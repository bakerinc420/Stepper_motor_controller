
LWIP_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003efc  080166a8  080166a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a5a4  0801a5a4  0001c0b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a5a4  0801a5a4  0001b5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a5ac  0801a5ac  0001c0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a5ac  0801a5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a5b0  0801a5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  0801a5b4  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c0b4  2**0
                  CONTENTS
 10 .bss          000173ac  200000b4  200000b4  0001c0b4  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20017460  20017460  0001c0b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c0b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bdde  00000000  00000000  0001c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000721d  00000000  00000000  00047ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ff0  00000000  00000000  0004f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000197e  00000000  00000000  000510d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033c7f  00000000  00000000  00052a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031339  00000000  00000000  000866cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdc15  00000000  00000000  000b7a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b561b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e90  00000000  00000000  001b5660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001be4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016690 	.word	0x08016690

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	08016690 	.word	0x08016690

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000d0 	.word	0x200000d0
 800061c:	20000170 	.word	0x20000170

08000620 <usDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void usDelay(int useconds) //1 sec = 10000
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <usDelay+0x48>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <usDelay+0x48>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f06f 0201 	mvn.w	r2, #1
 8000638:	611a      	str	r2, [r3, #16]

  while(__HAL_TIM_GET_COUNTER(&htim2) < useconds)
 800063a:	e006      	b.n	800064a <usDelay+0x2a>
  {

    if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET)
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <usDelay+0x48>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	691b      	ldr	r3, [r3, #16]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b01      	cmp	r3, #1
 8000648:	d006      	beq.n	8000658 <usDelay+0x38>
  while(__HAL_TIM_GET_COUNTER(&htim2) < useconds)
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <usDelay+0x48>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3f2      	bcc.n	800063c <usDelay+0x1c>
    {
      break;
    }
  }
}
 8000656:	e000      	b.n	800065a <usDelay+0x3a>
      break;
 8000658:	bf00      	nop
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	200003b8 	.word	0x200003b8

0800066c <LedCGIhandler>:


const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	603b      	str	r3, [r7, #0]
	uint32_t i = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
	if (iIndex == 0) {
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d110      	bne.n	80006a6 <LedCGIhandler+0x3a>
		HAL_GPIO_WritePin(GPIOB, Led2_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2180      	movs	r1, #128	@ 0x80
 8000688:	4829      	ldr	r0, [pc, #164]	@ (8000730 <LedCGIhandler+0xc4>)
 800068a:	f003 f99b 	bl	80039c4 <HAL_GPIO_WritePin>
		LD2ON = false;
 800068e:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <LedCGIhandler+0xc8>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, Led3_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800069a:	4825      	ldr	r0, [pc, #148]	@ (8000730 <LedCGIhandler+0xc4>)
 800069c:	f003 f992 	bl	80039c4 <HAL_GPIO_WritePin>
		LD1ON = false;
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <LedCGIhandler+0xcc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	for (i = 0; i < iNumParams; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	e038      	b.n	800071e <LedCGIhandler+0xb2>
		if (strcmp(pcParam[i], "led") == 0)
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4921      	ldr	r1, [pc, #132]	@ (800073c <LedCGIhandler+0xd0>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fd99 	bl	80001f0 <strcmp>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d129      	bne.n	8000718 <LedCGIhandler+0xac>
		{
			if (strcmp(pcValue[i], "1") == 0) {
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	491c      	ldr	r1, [pc, #112]	@ (8000740 <LedCGIhandler+0xd4>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd8d 	bl	80001f0 <strcmp>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d109      	bne.n	80006f0 <LedCGIhandler+0x84>
				HAL_GPIO_WritePin(GPIOB, Led3_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e2:	4813      	ldr	r0, [pc, #76]	@ (8000730 <LedCGIhandler+0xc4>)
 80006e4:	f003 f96e 	bl	80039c4 <HAL_GPIO_WritePin>
				LD1ON = true;
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <LedCGIhandler+0xcc>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	e013      	b.n	8000718 <LedCGIhandler+0xac>
			}
			else if (strcmp(pcValue[i], "2") == 0) {
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4912      	ldr	r1, [pc, #72]	@ (8000744 <LedCGIhandler+0xd8>)
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fd77 	bl	80001f0 <strcmp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d107      	bne.n	8000718 <LedCGIhandler+0xac>
				HAL_GPIO_WritePin(GPIOB, Led2_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2180      	movs	r1, #128	@ 0x80
 800070c:	4808      	ldr	r0, [pc, #32]	@ (8000730 <LedCGIhandler+0xc4>)
 800070e:	f003 f959 	bl	80039c4 <HAL_GPIO_WritePin>
				LD2ON = true;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <LedCGIhandler+0xc8>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < iNumParams; i++) {
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	429a      	cmp	r2, r3
 8000724:	d3c2      	bcc.n	80006ac <LedCGIhandler+0x40>
			}
		}
	}
	return "/index.shtml";
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <LedCGIhandler+0xdc>)
}
 8000728:	4618      	mov	r0, r3
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40020400 	.word	0x40020400
 8000734:	20000371 	.word	0x20000371
 8000738:	20000370 	.word	0x20000370
 800073c:	08016714 	.word	0x08016714
 8000740:	08016718 	.word	0x08016718
 8000744:	0801671c 	.word	0x0801671c
 8000748:	08016720 	.word	0x08016720

0800074c <MotorCGIhandler>:

const char* MotorCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b08b      	sub	sp, #44	@ 0x2c
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	603b      	str	r3, [r7, #0]
	uint32_t i = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
	MotorCommand_t motorCmd = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]

    for (i = 0; i < iNumParams; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
 800076e:	e07b      	b.n	8000868 <MotorCGIhandler+0x11c>
        if (strcmp(pcParam[i], "direction") == 0) {
 8000770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4970      	ldr	r1, [pc, #448]	@ (800093c <MotorCGIhandler+0x1f0>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd37 	bl	80001f0 <strcmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10d      	bne.n	80007a4 <MotorCGIhandler+0x58>
            motorCmd.direction = atoi(pcValue[i]);
 8000788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	4413      	add	r3, r2
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f014 fc24 	bl	8014fe0 <atoi>
 8000798:	4603      	mov	r3, r0
 800079a:	617b      	str	r3, [r7, #20]
            direction = motorCmd.direction;
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4a68      	ldr	r2, [pc, #416]	@ (8000940 <MotorCGIhandler+0x1f4>)
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e05e      	b.n	8000862 <MotorCGIhandler+0x116>
        }
        else if (strcmp(pcParam[i], "numberInput") == 0) {
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4965      	ldr	r1, [pc, #404]	@ (8000944 <MotorCGIhandler+0x1f8>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd1d 	bl	80001f0 <strcmp>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10d      	bne.n	80007d8 <MotorCGIhandler+0x8c>
            motorCmd.steps = atoi(pcValue[i]);
 80007bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f014 fc0a 	bl	8014fe0 <atoi>
 80007cc:	4603      	mov	r3, r0
 80007ce:	61bb      	str	r3, [r7, #24]
            steps = motorCmd.steps;
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	4a5d      	ldr	r2, [pc, #372]	@ (8000948 <MotorCGIhandler+0x1fc>)
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e044      	b.n	8000862 <MotorCGIhandler+0x116>
        }
        else if (strcmp(pcParam[i], "speed") == 0) {
 80007d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	495a      	ldr	r1, [pc, #360]	@ (800094c <MotorCGIhandler+0x200>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fd03 	bl	80001f0 <strcmp>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d110      	bne.n	8000812 <MotorCGIhandler+0xc6>
            motorCmd.speed = atoi(pcValue[i]);
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f014 fbf0 	bl	8014fe0 <atoi>
 8000800:	4603      	mov	r3, r0
 8000802:	61fb      	str	r3, [r7, #28]
            speed = motorCmd.speed;
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	4a52      	ldr	r2, [pc, #328]	@ (8000950 <MotorCGIhandler+0x204>)
 8000808:	6013      	str	r3, [r2, #0]
            current_speed = motorCmd.speed;
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	4a51      	ldr	r2, [pc, #324]	@ (8000954 <MotorCGIhandler+0x208>)
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	e027      	b.n	8000862 <MotorCGIhandler+0x116>
        } else if(strcmp(pcParam[i], "VirtualSteps") == 0){
 8000812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	494e      	ldr	r1, [pc, #312]	@ (8000958 <MotorCGIhandler+0x20c>)
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fce6 	bl	80001f0 <strcmp>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d11b      	bne.n	8000862 <MotorCGIhandler+0x116>
			virtual_steps = atoi(pcValue[i]);
 800082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	4413      	add	r3, r2
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f014 fbd3 	bl	8014fe0 <atoi>
 800083a:	4603      	mov	r3, r0
 800083c:	4a47      	ldr	r2, [pc, #284]	@ (800095c <MotorCGIhandler+0x210>)
 800083e:	6013      	str	r3, [r2, #0]
			K = virtual_steps / 6400;
 8000840:	4b46      	ldr	r3, [pc, #280]	@ (800095c <MotorCGIhandler+0x210>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a46      	ldr	r2, [pc, #280]	@ (8000960 <MotorCGIhandler+0x214>)
 8000846:	fb82 1203 	smull	r1, r2, r2, r3
 800084a:	12d2      	asrs	r2, r2, #11
 800084c:	17db      	asrs	r3, r3, #31
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	4a44      	ldr	r2, [pc, #272]	@ (8000964 <MotorCGIhandler+0x218>)
 8000852:	6013      	str	r3, [r2, #0]
			if (K == 1) { K = 0; }
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MotorCGIhandler+0x218>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d102      	bne.n	8000862 <MotorCGIhandler+0x116>
 800085c:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <MotorCGIhandler+0x218>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
    for (i = 0; i < iNumParams; i++) {
 8000862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000864:	3301      	adds	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800086c:	429a      	cmp	r2, r3
 800086e:	f4ff af7f 	bcc.w	8000770 <MotorCGIhandler+0x24>
        }
    }

    // Если получены все параметры - отправляем команду в очередь
	if (motorCmd.steps > 0 && motorCmd.steps <= 1000) {
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	2b00      	cmp	r3, #0
 8000876:	dd5c      	ble.n	8000932 <MotorCGIhandler+0x1e6>
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800087e:	dc58      	bgt.n	8000932 <MotorCGIhandler+0x1e6>
		if (osMutexWait(motorMutex, 0) == osOK) {
 8000880:	4b39      	ldr	r3, [pc, #228]	@ (8000968 <MotorCGIhandler+0x21c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 f952 	bl	8005b30 <osMutexWait>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14f      	bne.n	8000932 <MotorCGIhandler+0x1e6>
			if (motorBusy == false) {
 8000892:	4b36      	ldr	r3, [pc, #216]	@ (800096c <MotorCGIhandler+0x220>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d043      	beq.n	8000928 <MotorCGIhandler+0x1dc>
				motorBusy = true;
 80008a0:	4b32      	ldr	r3, [pc, #200]	@ (800096c <MotorCGIhandler+0x220>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
				osMutexRelease(motorMutex);
 80008a6:	4b30      	ldr	r3, [pc, #192]	@ (8000968 <MotorCGIhandler+0x21c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 f98e 	bl	8005bcc <osMutexRelease>

				MotorCommand_t *cmd_copy = pvPortMalloc(sizeof(MotorCommand_t));
 80008b0:	200c      	movs	r0, #12
 80008b2:	f007 fe03 	bl	80084bc <pvPortMalloc>
 80008b6:	6238      	str	r0, [r7, #32]
				if (cmd_copy != NULL) {
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d024      	beq.n	8000908 <MotorCGIhandler+0x1bc>
					*cmd_copy = motorCmd;
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	461c      	mov	r4, r3
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

					if (osMessagePut(motorCommandQueue, (uint32_t) cmd_copy, 0) != osOK) {
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MotorCGIhandler+0x224>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6a39      	ldr	r1, [r7, #32]
 80008d4:	2200      	movs	r2, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f005 fa8c 	bl	8005df4 <osMessagePut>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d027      	beq.n	8000932 <MotorCGIhandler+0x1e6>
						vPortFree(cmd_copy);
 80008e2:	6a38      	ldr	r0, [r7, #32]
 80008e4:	f007 feb8 	bl	8008658 <vPortFree>
						osMutexWait(motorMutex, osWaitForever);
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MotorCGIhandler+0x21c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295
 80008f0:	4618      	mov	r0, r3
 80008f2:	f005 f91d 	bl	8005b30 <osMutexWait>
						motorBusy = false;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <MotorCGIhandler+0x220>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
						osMutexRelease(motorMutex);
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MotorCGIhandler+0x21c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f005 f963 	bl	8005bcc <osMutexRelease>
 8000906:	e014      	b.n	8000932 <MotorCGIhandler+0x1e6>
					}
				} else {
					osMutexWait(motorMutex, osWaitForever);
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MotorCGIhandler+0x21c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	4618      	mov	r0, r3
 8000912:	f005 f90d 	bl	8005b30 <osMutexWait>
					motorBusy = false;
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MotorCGIhandler+0x220>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
					osMutexRelease(motorMutex);
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MotorCGIhandler+0x21c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f005 f953 	bl	8005bcc <osMutexRelease>
 8000926:	e004      	b.n	8000932 <MotorCGIhandler+0x1e6>
				}
			} else {
				osMutexRelease(motorMutex);
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MotorCGIhandler+0x21c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f005 f94d 	bl	8005bcc <osMutexRelease>
			}
		}
	}
    return "/index.shtml";
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <MotorCGIhandler+0x228>)
}
 8000934:	4618      	mov	r0, r3
 8000936:	372c      	adds	r7, #44	@ 0x2c
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	08016730 	.word	0x08016730
 8000940:	20000378 	.word	0x20000378
 8000944:	0801673c 	.word	0x0801673c
 8000948:	20000374 	.word	0x20000374
 800094c:	08016748 	.word	0x08016748
 8000950:	2000037c 	.word	0x2000037c
 8000954:	20000000 	.word	0x20000000
 8000958:	08016750 	.word	0x08016750
 800095c:	20000004 	.word	0x20000004
 8000960:	51eb851f 	.word	0x51eb851f
 8000964:	20000380 	.word	0x20000380
 8000968:	20000390 	.word	0x20000390
 800096c:	20000394 	.word	0x20000394
 8000970:	2000038c 	.word	0x2000038c
 8000974:	08016720 	.word	0x08016720

08000978 <CalibrationCGIhandler>:

const char* CalibrationCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
    uint32_t i = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]

    for (i = 0; i < iNumParams; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	e078      	b.n	8000a82 <CalibrationCGIhandler+0x10a>
        if (strcmp(pcParam[i], "calibration") == 0) {
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	493e      	ldr	r1, [pc, #248]	@ (8000a94 <CalibrationCGIhandler+0x11c>)
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc27 	bl	80001f0 <strcmp>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d169      	bne.n	8000a7c <CalibrationCGIhandler+0x104>
            if (strcmp(pcValue[i], "start") == 0) {
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4939      	ldr	r1, [pc, #228]	@ (8000a98 <CalibrationCGIhandler+0x120>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc1b 	bl	80001f0 <strcmp>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d149      	bne.n	8000a54 <CalibrationCGIhandler+0xdc>
                // Запуск калибровки
                if (osMutexWait(motorMutex, 0) == osOK) {
 80009c0:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <CalibrationCGIhandler+0x124>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 f8b2 	bl	8005b30 <osMutexWait>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d154      	bne.n	8000a7c <CalibrationCGIhandler+0x104>
                    if (!motorBusy && !calibration_in_progress) {
 80009d2:	4b33      	ldr	r3, [pc, #204]	@ (8000aa0 <CalibrationCGIhandler+0x128>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	f083 0301 	eor.w	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d033      	beq.n	8000a48 <CalibrationCGIhandler+0xd0>
 80009e0:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <CalibrationCGIhandler+0x12c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f083 0301 	eor.w	r3, r3, #1
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d02c      	beq.n	8000a48 <CalibrationCGIhandler+0xd0>
                        calibration_mode = true;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa8 <CalibrationCGIhandler+0x130>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
                        calibration_in_progress = true;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa4 <CalibrationCGIhandler+0x12c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
                        osMutexRelease(motorMutex);
 80009fa:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <CalibrationCGIhandler+0x124>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 f8e4 	bl	8005bcc <osMutexRelease>

                        // Отправляем команду калибровки в очередь
                        MotorCommand_t *calib_cmd = pvPortMalloc(sizeof(MotorCommand_t));
 8000a04:	200c      	movs	r0, #12
 8000a06:	f007 fd59 	bl	80084bc <pvPortMalloc>
 8000a0a:	6138      	str	r0, [r7, #16]
                        if (calib_cmd != NULL) {
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d033      	beq.n	8000a7a <CalibrationCGIhandler+0x102>
                            calib_cmd->direction = 1;
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	2201      	movs	r2, #1
 8000a16:	601a      	str	r2, [r3, #0]
                            calib_cmd->steps = calibration;
 8000a18:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <CalibrationCGIhandler+0x134>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	605a      	str	r2, [r3, #4]
                            calib_cmd->speed = 100; // Медленная скорость для калибровки
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	2264      	movs	r2, #100	@ 0x64
 8000a24:	609a      	str	r2, [r3, #8]

                            if (osMessagePut(motorCommandQueue, (uint32_t) calib_cmd, 0) != osOK) {
 8000a26:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <CalibrationCGIhandler+0x138>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6939      	ldr	r1, [r7, #16]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 f9e0 	bl	8005df4 <osMessagePut>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d01f      	beq.n	8000a7a <CalibrationCGIhandler+0x102>
                                vPortFree(calib_cmd);
 8000a3a:	6938      	ldr	r0, [r7, #16]
 8000a3c:	f007 fe0c 	bl	8008658 <vPortFree>
                                calibration_in_progress = false;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <CalibrationCGIhandler+0x12c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
                    if (!motorBusy && !calibration_in_progress) {
 8000a46:	e018      	b.n	8000a7a <CalibrationCGIhandler+0x102>
                            }
                        }
                    } else {
                        osMutexRelease(motorMutex);
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <CalibrationCGIhandler+0x124>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 f8bd 	bl	8005bcc <osMutexRelease>
 8000a52:	e013      	b.n	8000a7c <CalibrationCGIhandler+0x104>
                    }
                }
            }
            else if (strcmp(pcValue[i], "stop") == 0) {
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4915      	ldr	r1, [pc, #84]	@ (8000ab4 <CalibrationCGIhandler+0x13c>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbc5 	bl	80001f0 <strcmp>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d107      	bne.n	8000a7c <CalibrationCGIhandler+0x104>
                // Остановка калибровки
                calibration_mode = false;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <CalibrationCGIhandler+0x130>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
                calibration_in_progress = false;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <CalibrationCGIhandler+0x12c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e000      	b.n	8000a7c <CalibrationCGIhandler+0x104>
                    if (!motorBusy && !calibration_in_progress) {
 8000a7a:	bf00      	nop
    for (i = 0; i < iNumParams; i++) {
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d382      	bcc.n	8000990 <CalibrationCGIhandler+0x18>
            }
        }
    }
    return "/index.shtml";
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <CalibrationCGIhandler+0x140>)
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	08016760 	.word	0x08016760
 8000a98:	0801676c 	.word	0x0801676c
 8000a9c:	20000390 	.word	0x20000390
 8000aa0:	20000394 	.word	0x20000394
 8000aa4:	20000385 	.word	0x20000385
 8000aa8:	20000384 	.word	0x20000384
 8000aac:	20000388 	.word	0x20000388
 8000ab0:	2000038c 	.word	0x2000038c
 8000ab4:	08016774 	.word	0x08016774
 8000ab8:	08016720 	.word	0x08016720

08000abc <Steps_Calibration>:

void Steps_Calibration(int direction, int steps){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]

	if (direction == 1){ //по часовой
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d110      	bne.n	8000aee <Steps_Calibration+0x32>
		calibration += steps;
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <Steps_Calibration+0x64>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <Steps_Calibration+0x64>)
 8000ad6:	6013      	str	r3, [r2, #0]
		while (calibration >= 200){
 8000ad8:	e004      	b.n	8000ae4 <Steps_Calibration+0x28>
			calibration -= 200;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <Steps_Calibration+0x64>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3bc8      	subs	r3, #200	@ 0xc8
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <Steps_Calibration+0x64>)
 8000ae2:	6013      	str	r3, [r2, #0]
		while (calibration >= 200){
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <Steps_Calibration+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2bc7      	cmp	r3, #199	@ 0xc7
 8000aea:	dcf6      	bgt.n	8000ada <Steps_Calibration+0x1e>
		calibration -= steps;
		while (calibration < 0){
			calibration += 200;
		}
	}
}
 8000aec:	e012      	b.n	8000b14 <Steps_Calibration+0x58>
	} else if (direction == 0){ // против часовой
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10f      	bne.n	8000b14 <Steps_Calibration+0x58>
		calibration -= steps;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <Steps_Calibration+0x64>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <Steps_Calibration+0x64>)
 8000afe:	6013      	str	r3, [r2, #0]
		while (calibration < 0){
 8000b00:	e004      	b.n	8000b0c <Steps_Calibration+0x50>
			calibration += 200;
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <Steps_Calibration+0x64>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	33c8      	adds	r3, #200	@ 0xc8
 8000b08:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <Steps_Calibration+0x64>)
 8000b0a:	6013      	str	r3, [r2, #0]
		while (calibration < 0){
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <Steps_Calibration+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dbf6      	blt.n	8000b02 <Steps_Calibration+0x46>
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	20000388 	.word	0x20000388

08000b24 <myCGIinit>:

void myCGIinit(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	theCGItable[0] = LedCGI;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <myCGIinit+0x38>)
 8000b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <myCGIinit+0x3c>)
 8000b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b30:	e883 0003 	stmia.w	r3, {r0, r1}
	theCGItable[1] = MotorCGI;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <myCGIinit+0x38>)
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <myCGIinit+0x40>)
 8000b38:	3308      	adds	r3, #8
 8000b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3e:	e883 0003 	stmia.w	r3, {r0, r1}
	theCGItable[2] = CalibrationCGI;
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <myCGIinit+0x38>)
 8000b44:	4a08      	ldr	r2, [pc, #32]	@ (8000b68 <myCGIinit+0x44>)
 8000b46:	3310      	adds	r3, #16
 8000b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4c:	e883 0003 	stmia.w	r3, {r0, r1}
	http_set_cgi_handlers(theCGItable, 3);
 8000b50:	2103      	movs	r1, #3
 8000b52:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <myCGIinit+0x38>)
 8000b54:	f009 fba8 	bl	800a2a8 <http_set_cgi_handlers>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000398 	.word	0x20000398
 8000b60:	08019b08 	.word	0x08019b08
 8000b64:	08019b10 	.word	0x08019b10
 8000b68:	08019b18 	.word	0x08019b18

08000b6c <mySSIHandler>:

u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen) {
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b0b8      	sub	sp, #224	@ 0xe0
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	if (iIndex == 0) {
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d142      	bne.n	8000c04 <mySSIHandler+0x98>
		if (LD1ON == false) {
 8000b7e:	4bb1      	ldr	r3, [pc, #708]	@ (8000e44 <mySSIHandler+0x2d8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f083 0301 	eor.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d019      	beq.n	8000bc0 <mySSIHandler+0x54>
			char myStr1[] = "<input value=\"1\" name=\"led\" type=\"checkbox\">";
 8000b8c:	4bae      	ldr	r3, [pc, #696]	@ (8000e48 <mySSIHandler+0x2dc>)
 8000b8e:	f107 0410 	add.w	r4, r7, #16
 8000b92:	461d      	mov	r5, r3
 8000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ba0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ba2:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr1);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	68b8      	ldr	r0, [r7, #8]
 8000bac:	f014 fe41 	bl	8015832 <strcpy>
			return strlen(myStr1);
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb25 	bl	8000204 <strlen>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	e199      	b.n	8000ef4 <mySSIHandler+0x388>
		}
		else if (LD1ON == true) {
 8000bc0:	4ba0      	ldr	r3, [pc, #640]	@ (8000e44 <mySSIHandler+0x2d8>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f000 8194 	beq.w	8000ef2 <mySSIHandler+0x386>
			char myStr1[] = "<input value=\"1\" name=\"led\" type=\"checkbox\" checked>";
 8000bca:	4ba0      	ldr	r3, [pc, #640]	@ (8000e4c <mySSIHandler+0x2e0>)
 8000bcc:	f107 0410 	add.w	r4, r7, #16
 8000bd0:	461d      	mov	r5, r3
 8000bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000be2:	6020      	str	r0, [r4, #0]
 8000be4:	3404      	adds	r4, #4
 8000be6:	7021      	strb	r1, [r4, #0]
			strcpy(pcInsert, myStr1);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	68b8      	ldr	r0, [r7, #8]
 8000bf0:	f014 fe1f 	bl	8015832 <strcpy>
			return strlen(myStr1);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fb03 	bl	8000204 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	e177      	b.n	8000ef4 <mySSIHandler+0x388>
		}
	}

	else if (iIndex == 1)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d142      	bne.n	8000c90 <mySSIHandler+0x124>
	{
		if (LD2ON == false) {
 8000c0a:	4b91      	ldr	r3, [pc, #580]	@ (8000e50 <mySSIHandler+0x2e4>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f083 0301 	eor.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d019      	beq.n	8000c4c <mySSIHandler+0xe0>
			char myStr2[] = "<input value=\"2\" name=\"led\" type=\"checkbox\">";
 8000c18:	4b8e      	ldr	r3, [pc, #568]	@ (8000e54 <mySSIHandler+0x2e8>)
 8000c1a:	f107 0410 	add.w	r4, r7, #16
 8000c1e:	461d      	mov	r5, r3
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c2c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c2e:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr2);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	68b8      	ldr	r0, [r7, #8]
 8000c38:	f014 fdfb 	bl	8015832 <strcpy>
			return strlen(myStr2);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fadf 	bl	8000204 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	e153      	b.n	8000ef4 <mySSIHandler+0x388>
		} else if (LD2ON == true) {
 8000c4c:	4b80      	ldr	r3, [pc, #512]	@ (8000e50 <mySSIHandler+0x2e4>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 814e 	beq.w	8000ef2 <mySSIHandler+0x386>
			char myStr2[] = "<input value=\"2\" name=\"led\" type=\"checkbox\" checked>";
 8000c56:	4b80      	ldr	r3, [pc, #512]	@ (8000e58 <mySSIHandler+0x2ec>)
 8000c58:	f107 0410 	add.w	r4, r7, #16
 8000c5c:	461d      	mov	r5, r3
 8000c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c6e:	6020      	str	r0, [r4, #0]
 8000c70:	3404      	adds	r4, #4
 8000c72:	7021      	strb	r1, [r4, #0]
			strcpy(pcInsert, myStr2);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	68b8      	ldr	r0, [r7, #8]
 8000c7c:	f014 fdd9 	bl	8015832 <strcpy>
			return strlen(myStr2);
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fabd 	bl	8000204 <strlen>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	e131      	b.n	8000ef4 <mySSIHandler+0x388>
		}
	} else if (iIndex == 2) {
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d134      	bne.n	8000d00 <mySSIHandler+0x194>

		if (direction == 0){
 8000c96:	4b71      	ldr	r3, [pc, #452]	@ (8000e5c <mySSIHandler+0x2f0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d115      	bne.n	8000cca <mySSIHandler+0x15e>
			char myStr3[] = "<option value=\"0\">Против часовой стрелки 0</option>"
 8000c9e:	4a70      	ldr	r2, [pc, #448]	@ (8000e60 <mySSIHandler+0x2f4>)
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	2287      	movs	r2, #135	@ 0x87
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f014 fdca 	bl	8015842 <memcpy>
							"<option value=\"1\">По часовой стрелке 1</option>";
			strcpy(pcInsert, myStr3);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	68b8      	ldr	r0, [r7, #8]
 8000cb6:	f014 fdbc 	bl	8015832 <strcpy>
			return strlen(myStr3);
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff faa0 	bl	8000204 <strlen>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	e114      	b.n	8000ef4 <mySSIHandler+0x388>
		} else if (direction == 1){
 8000cca:	4b64      	ldr	r3, [pc, #400]	@ (8000e5c <mySSIHandler+0x2f0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	f040 810f 	bne.w	8000ef2 <mySSIHandler+0x386>
			char myStr3[] = "<option value=\"1\">По часовой стрелке 1</option>"
 8000cd4:	4a63      	ldr	r2, [pc, #396]	@ (8000e64 <mySSIHandler+0x2f8>)
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4611      	mov	r1, r2
 8000cdc:	2287      	movs	r2, #135	@ 0x87
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f014 fdaf 	bl	8015842 <memcpy>
							"<option value=\"0\">Против часовой стрелки 0</option>";
			strcpy(pcInsert, myStr3);
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4619      	mov	r1, r3
 8000cea:	68b8      	ldr	r0, [r7, #8]
 8000cec:	f014 fda1 	bl	8015832 <strcpy>
			return strlen(myStr3);
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fa85 	bl	8000204 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	e0f9      	b.n	8000ef4 <mySSIHandler+0x388>
		}

    }  else if (iIndex == 3){
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d119      	bne.n	8000d3a <mySSIHandler+0x1ce>
    	char myStr4[200];
    	snprintf(myStr4, sizeof(myStr4), "<input type=\"range\" min=\"0\" max=\"100\" value=\"%d\"  id=\"speed\" name=\"speed\"><br>" "<div>Скорость: <span id=\"speedValue\">%d</span>%%</div>", current_speed, current_speed);
 8000d06:	4b58      	ldr	r3, [pc, #352]	@ (8000e68 <mySSIHandler+0x2fc>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b57      	ldr	r3, [pc, #348]	@ (8000e68 <mySSIHandler+0x2fc>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f107 0010 	add.w	r0, r7, #16
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	4a55      	ldr	r2, [pc, #340]	@ (8000e6c <mySSIHandler+0x300>)
 8000d18:	21c8      	movs	r1, #200	@ 0xc8
 8000d1a:	f014 fb59 	bl	80153d0 <sniprintf>
    	strcpy(pcInsert,myStr4);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4619      	mov	r1, r3
 8000d24:	68b8      	ldr	r0, [r7, #8]
 8000d26:	f014 fd84 	bl	8015832 <strcpy>
    	return strlen(myStr4);
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fa68 	bl	8000204 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	e0dc      	b.n	8000ef4 <mySSIHandler+0x388>

    }  else if (iIndex == 4) {
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d115      	bne.n	8000d6c <mySSIHandler+0x200>

    	char myStr5[] = "<input type=\"number\" id=\"numberInput\" name=\"numberInput\" min=\"0\" max=\"1000\" step=\"1\" placeholder=\"0-1000\" required>";
 8000d40:	4a4b      	ldr	r2, [pc, #300]	@ (8000e70 <mySSIHandler+0x304>)
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4611      	mov	r1, r2
 8000d48:	2274      	movs	r2, #116	@ 0x74
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f014 fd79 	bl	8015842 <memcpy>
    	strcpy(pcInsert, myStr5);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	68b8      	ldr	r0, [r7, #8]
 8000d58:	f014 fd6b 	bl	8015832 <strcpy>
    	return strlen(myStr5);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fa4f 	bl	8000204 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	e0c3      	b.n	8000ef4 <mySSIHandler+0x388>
    }	else if (iIndex == 5) {
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d14f      	bne.n	8000e12 <mySSIHandler+0x2a6>
        // Статус мотора
        osMutexWait(motorMutex, 0);
 8000d72:	4b40      	ldr	r3, [pc, #256]	@ (8000e74 <mySSIHandler+0x308>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 fed9 	bl	8005b30 <osMutexWait>
        if (motorBusy == true) {
 8000d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e78 <mySSIHandler+0x30c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d020      	beq.n	8000dc8 <mySSIHandler+0x25c>
            char myStr6[] = "<div style='color: orange;'>Мотор занят</div>";
 8000d86:	4b3d      	ldr	r3, [pc, #244]	@ (8000e7c <mySSIHandler+0x310>)
 8000d88:	f107 0410 	add.w	r4, r7, #16
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d9e:	e884 0003 	stmia.w	r4, {r0, r1}
            strcpy(pcInsert, myStr6);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	68b8      	ldr	r0, [r7, #8]
 8000daa:	f014 fd42 	bl	8015832 <strcpy>
            osMutexRelease(motorMutex);
 8000dae:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <mySSIHandler+0x308>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 ff0a 	bl	8005bcc <osMutexRelease>
            return strlen(myStr6);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fa21 	bl	8000204 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	e095      	b.n	8000ef4 <mySSIHandler+0x388>
        } else {
            char myStr6[] = "<div style='color: green;'>Мотор готов</div>";
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <mySSIHandler+0x314>)
 8000dca:	f107 0410 	add.w	r4, r7, #16
 8000dce:	461d      	mov	r5, r3
 8000dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000de0:	6020      	str	r0, [r4, #0]
 8000de2:	3404      	adds	r4, #4
 8000de4:	8021      	strh	r1, [r4, #0]
 8000de6:	3402      	adds	r4, #2
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	7023      	strb	r3, [r4, #0]
            strcpy(pcInsert, myStr6);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	68b8      	ldr	r0, [r7, #8]
 8000df4:	f014 fd1d 	bl	8015832 <strcpy>
            osMutexRelease(motorMutex);
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <mySSIHandler+0x308>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 fee5 	bl	8005bcc <osMutexRelease>
            return strlen(myStr6);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9fc 	bl	8000204 <strlen>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	e070      	b.n	8000ef4 <mySSIHandler+0x388>
        }
    }	else if(iIndex == 6){ //virtual steps
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	d139      	bne.n	8000e8c <mySSIHandler+0x320>
		char myStr7[120];
		snprintf(myStr7, sizeof(myStr7), "<input type=\"number\" id=\"VirtualSteps\" name=\"VirtualSteps\" min=\"6400\" max=\"1000000\" value=\"%d\" required>", virtual_steps);
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <mySSIHandler+0x318>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f107 0010 	add.w	r0, r7, #16
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <mySSIHandler+0x31c>)
 8000e22:	2178      	movs	r1, #120	@ 0x78
 8000e24:	f014 fad4 	bl	80153d0 <sniprintf>
		strcpy(pcInsert, myStr7);
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	68b8      	ldr	r0, [r7, #8]
 8000e30:	f014 fcff 	bl	8015832 <strcpy>
		return strlen(myStr7);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff f9e3 	bl	8000204 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	e057      	b.n	8000ef4 <mySSIHandler+0x388>
 8000e44:	20000370 	.word	0x20000370
 8000e48:	08016878 	.word	0x08016878
 8000e4c:	080168a8 	.word	0x080168a8
 8000e50:	20000371 	.word	0x20000371
 8000e54:	080168e0 	.word	0x080168e0
 8000e58:	08016910 	.word	0x08016910
 8000e5c:	20000378 	.word	0x20000378
 8000e60:	08016948 	.word	0x08016948
 8000e64:	080169d0 	.word	0x080169d0
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	0801677c 	.word	0x0801677c
 8000e70:	08016a58 	.word	0x08016a58
 8000e74:	20000390 	.word	0x20000390
 8000e78:	20000394 	.word	0x20000394
 8000e7c:	08016acc 	.word	0x08016acc
 8000e80:	08016b04 	.word	0x08016b04
 8000e84:	20000004 	.word	0x20000004
 8000e88:	0801680c 	.word	0x0801680c

    }	else if (iIndex == 7) {
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	d12f      	bne.n	8000ef2 <mySSIHandler+0x386>
        // Статус калибровки
        if (calibration_in_progress) {
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <mySSIHandler+0x390>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d015      	beq.n	8000ec6 <mySSIHandler+0x35a>
            char myStr8[] = "<div style='color: orange;'>Калибровка выполняется...</div>";
 8000e9a:	4a19      	ldr	r2, [pc, #100]	@ (8000f00 <mySSIHandler+0x394>)
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	2251      	movs	r2, #81	@ 0x51
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f014 fccc 	bl	8015842 <memcpy>
            strcpy(pcInsert, myStr8);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	68b8      	ldr	r0, [r7, #8]
 8000eb2:	f014 fcbe 	bl	8015832 <strcpy>
            return strlen(myStr8);
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f9a2 	bl	8000204 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	e016      	b.n	8000ef4 <mySSIHandler+0x388>
        } else {
            char myStr8[] = "<div>Длинное нажатие кнопки для калибровки</div>";
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f04 <mySSIHandler+0x398>)
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4611      	mov	r1, r2
 8000ece:	2252      	movs	r2, #82	@ 0x52
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f014 fcb6 	bl	8015842 <memcpy>
            strcpy(pcInsert, myStr8);
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	4619      	mov	r1, r3
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	f014 fca8 	bl	8015832 <strcpy>
            return strlen(myStr8);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f98c 	bl	8000204 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	e000      	b.n	8000ef4 <mySSIHandler+0x388>
        }
    }

	return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	37d8      	adds	r7, #216	@ 0xd8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}
 8000efc:	20000385 	.word	0x20000385
 8000f00:	08016b3c 	.word	0x08016b3c
 8000f04:	08016b90 	.word	0x08016b90

08000f08 <mySSIinit>:


void mySSIinit(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	http_set_ssi_handler(mySSIHandler, (char const**) theSSItags,
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4903      	ldr	r1, [pc, #12]	@ (8000f1c <mySSIinit+0x14>)
 8000f10:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <mySSIinit+0x18>)
 8000f12:	f009 f987 	bl	800a224 <http_set_ssi_handler>
	numSSItags);
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	08000b6d 	.word	0x08000b6d

08000f24 <Stepper_motor_with_ramp>:

void Stepper_motor_with_ramp(int direction, int steps, int target_speed_percent, int accel_steps, int decel_steps, int virtual_steps) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b090      	sub	sp, #64	@ 0x40
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
    HAL_GPIO_WritePin(GPIOG, ENABLE_PG3_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2108      	movs	r1, #8
 8000f36:	485f      	ldr	r0, [pc, #380]	@ (80010b4 <Stepper_motor_with_ramp+0x190>)
 8000f38:	f002 fd44 	bl	80039c4 <HAL_GPIO_WritePin>

    switch (direction) {
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d106      	bne.n	8000f50 <Stepper_motor_with_ramp+0x2c>
        case 1:
            HAL_GPIO_WritePin(GPIOC, CW_CCW_DIR_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f48:	485b      	ldr	r0, [pc, #364]	@ (80010b8 <Stepper_motor_with_ramp+0x194>)
 8000f4a:	f002 fd3b 	bl	80039c4 <HAL_GPIO_WritePin>
            break;
 8000f4e:	e006      	b.n	8000f5e <Stepper_motor_with_ramp+0x3a>
        default:
            HAL_GPIO_WritePin(GPIOC, CW_CCW_DIR_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f56:	4858      	ldr	r0, [pc, #352]	@ (80010b8 <Stepper_motor_with_ramp+0x194>)
 8000f58:	f002 fd34 	bl	80039c4 <HAL_GPIO_WritePin>
            break;
 8000f5c:	bf00      	nop
    }

    if (accel_steps + decel_steps > steps) {
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f62:	4413      	add	r3, r2
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	da08      	bge.n	8000f7c <Stepper_motor_with_ramp+0x58>
        accel_steps = steps / 2;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	0fda      	lsrs	r2, r3, #31
 8000f6e:	4413      	add	r3, r2
 8000f70:	105b      	asrs	r3, r3, #1
 8000f72:	603b      	str	r3, [r7, #0]
        decel_steps = steps - accel_steps;
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    }
    int const_steps = steps - accel_steps - decel_steps;
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	1ad2      	subs	r2, r2, r3
 8000f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28

    int target_delay = map_speed_to_delay(target_speed_percent); // 100% = минимальная задержка (быстро), 0% = максимальная задержка (медленно)
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f897 	bl	80010bc <map_speed_to_delay>
 8000f8e:	6278      	str	r0, [r7, #36]	@ 0x24
    int start_delay = map_speed_to_delay(30); // Начинаем с 30% скорости (медленно) // УСТАНАВЛИВАЕМ НАЧАЛЬНУЮ ЗАДЕРЖКУ ДЛЯ РАЗГОНА
 8000f90:	201e      	movs	r0, #30
 8000f92:	f000 f893 	bl	80010bc <map_speed_to_delay>
 8000f96:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (start_delay <= target_delay) {
 8000f98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dc02      	bgt.n	8000fa6 <Stepper_motor_with_ramp+0x82>
        start_delay = target_delay + 10; // Добавляется запас для плавности //  начальная задержка больше целевой для плавного разгона
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa2:	330a      	adds	r3, #10
 8000fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // === ФАЗА 1: ПЛАВНЫЙ РАЗГОН ===
    for (int i = 0; i < accel_steps * 16 * 2; i++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000faa:	e024      	b.n	8000ff6 <Stepper_motor_with_ramp+0xd2>
    	int result  = Virtual_Steps(virtual_steps);
 8000fac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000fae:	f000 f8a5 	bl	80010fc <Virtual_Steps>
 8000fb2:	6178      	str	r0, [r7, #20]
    	if (result != 0){
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d173      	bne.n	80010a2 <Stepper_motor_with_ramp+0x17e>
    		return;
    	}
        HAL_GPIO_TogglePin(GPIOC, CLK_STEP_Pin);
 8000fba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fbe:	483e      	ldr	r0, [pc, #248]	@ (80010b8 <Stepper_motor_with_ramp+0x194>)
 8000fc0:	f002 fd19 	bl	80039f6 <HAL_GPIO_TogglePin>
        // Линейно уменьшаем задержку от start_delay до target_delay
        int current_delay = start_delay - ((start_delay - target_delay) * i) / (accel_steps * 16 * 2);// ВЫЧИСЛЯЕМ ТЕКУЩУЮ ЗАДЕРЖКУ ДЛЯ ПЛАВНОГО РАЗГОНА
 8000fc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000fcc:	fb03 f202 	mul.w	r2, r3, r2
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34

        if (current_delay < target_delay) {
 8000fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	da01      	bge.n	8000fea <Stepper_motor_with_ramp+0xc6>
            current_delay = target_delay; // Защита от перескока (задержка не должна быть меньше целевой)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        usDelay(current_delay);
 8000fea:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000fec:	f7ff fb18 	bl	8000620 <usDelay>
    for (int i = 0; i < accel_steps * 16 * 2; i++) {
 8000ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	015b      	lsls	r3, r3, #5
 8000ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbd5      	blt.n	8000fac <Stepper_motor_with_ramp+0x88>
    }

    // === ФАЗА 2: ДВИЖЕНИЕ С ПОСТОЯННОЙ СКОРОСТЬЮ ===
    for (int i = 0; i < const_steps * 16 * 2; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
 8001004:	e011      	b.n	800102a <Stepper_motor_with_ramp+0x106>
    	int result  = Virtual_Steps(virtual_steps);
 8001006:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001008:	f000 f878 	bl	80010fc <Virtual_Steps>
 800100c:	61b8      	str	r0, [r7, #24]
		if (result != 0) {
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d148      	bne.n	80010a6 <Stepper_motor_with_ramp+0x182>
			return;
		}
        HAL_GPIO_TogglePin(GPIOC, CLK_STEP_Pin);
 8001014:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001018:	4827      	ldr	r0, [pc, #156]	@ (80010b8 <Stepper_motor_with_ramp+0x194>)
 800101a:	f002 fcec 	bl	80039f6 <HAL_GPIO_TogglePin>
        usDelay(target_delay);
 800101e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001020:	f7ff fafe 	bl	8000620 <usDelay>
    for (int i = 0; i < const_steps * 16 * 2; i++) {
 8001024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001026:	3301      	adds	r3, #1
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
 800102a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800102c:	015b      	lsls	r3, r3, #5
 800102e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001030:	429a      	cmp	r2, r3
 8001032:	dbe8      	blt.n	8001006 <Stepper_motor_with_ramp+0xe2>
    }

    // === ФАЗА 3: ПЛАВНОЕ ТОРМОЖЕНИЕ ===
    for (int i = 0; i < decel_steps * 16 * 2; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001038:	e01e      	b.n	8001078 <Stepper_motor_with_ramp+0x154>
    	int result  = Virtual_Steps(virtual_steps);
 800103a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800103c:	f000 f85e 	bl	80010fc <Virtual_Steps>
 8001040:	6238      	str	r0, [r7, #32]
		if (result != 0) {
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d130      	bne.n	80010aa <Stepper_motor_with_ramp+0x186>
			return;
		}
        HAL_GPIO_TogglePin(GPIOC, CLK_STEP_Pin);
 8001048:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800104c:	481a      	ldr	r0, [pc, #104]	@ (80010b8 <Stepper_motor_with_ramp+0x194>)
 800104e:	f002 fcd2 	bl	80039f6 <HAL_GPIO_TogglePin>
        int current_delay = target_delay + ((start_delay - target_delay) * i) / (decel_steps * 16 * 2); // ВЫЧИСЛЯЕМ ТЕКУЩУЮ ЗАДЕРЖКУ ДЛЯ ПЛАВНОГО ТОРМОЖЕНИЯ
 8001052:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800105a:	fb03 f202 	mul.w	r2, r3, r2
 800105e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001060:	015b      	lsls	r3, r3, #5
 8001062:	fb92 f3f3 	sdiv	r3, r2, r3
 8001066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001068:	4413      	add	r3, r2
 800106a:	61fb      	str	r3, [r7, #28]
        usDelay(current_delay);
 800106c:	69f8      	ldr	r0, [r7, #28]
 800106e:	f7ff fad7 	bl	8000620 <usDelay>
    for (int i = 0; i < decel_steps * 16 * 2; i++) {
 8001072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001074:	3301      	adds	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800107a:	015b      	lsls	r3, r3, #5
 800107c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800107e:	429a      	cmp	r2, r3
 8001080:	dbdb      	blt.n	800103a <Stepper_motor_with_ramp+0x116>
    }

    HAL_GPIO_WritePin(GPIOC, CLK_STEP_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001088:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <Stepper_motor_with_ramp+0x194>)
 800108a:	f002 fc9b 	bl	80039c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, ENABLE_PG3_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2108      	movs	r1, #8
 8001092:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <Stepper_motor_with_ramp+0x190>)
 8001094:	f002 fc96 	bl	80039c4 <HAL_GPIO_WritePin>
    Steps_Calibration(direction, steps);
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff fd0e 	bl	8000abc <Steps_Calibration>
 80010a0:	e004      	b.n	80010ac <Stepper_motor_with_ramp+0x188>
    		return;
 80010a2:	bf00      	nop
 80010a4:	e002      	b.n	80010ac <Stepper_motor_with_ramp+0x188>
			return;
 80010a6:	bf00      	nop
 80010a8:	e000      	b.n	80010ac <Stepper_motor_with_ramp+0x188>
			return;
 80010aa:	bf00      	nop
}
 80010ac:	3740      	adds	r7, #64	@ 0x40
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40020800 	.word	0x40020800

080010bc <map_speed_to_delay>:


int map_speed_to_delay(int speed) {
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    int min_delay = 1;   // 1 мс - максимальная скорость
 80010c4:	2301      	movs	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
    int max_delay = 100; // 100 мс - минимальная скорость
 80010c8:	2364      	movs	r3, #100	@ 0x64
 80010ca:	613b      	str	r3, [r7, #16]

    int delay_range = max_delay - min_delay;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	60fb      	str	r3, [r7, #12]
    return max_delay - (speed * delay_range / 100);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <map_speed_to_delay+0x3c>)
 80010de:	fb82 1203 	smull	r1, r2, r2, r3
 80010e2:	1152      	asrs	r2, r2, #5
 80010e4:	17db      	asrs	r3, r3, #31
 80010e6:	1a9a      	subs	r2, r3, r2
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4413      	add	r3, r2
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	51eb851f 	.word	0x51eb851f

080010fc <Virtual_Steps>:

int Virtual_Steps(int virtual_steps) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	int counter  = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < virtual_steps; i++){
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	e008      	b.n	8001120 <Virtual_Steps+0x24>
		counter += 1;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
		usDelay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fa83 	bl	8000620 <usDelay>
	for (int i = 0; i < virtual_steps; i++){
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3301      	adds	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbf2      	blt.n	800110e <Virtual_Steps+0x12>
	}
	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b0a2      	sub	sp, #136	@ 0x88
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f000 febf 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f881 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f000 f939 	bl	80013b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001146:	f000 f8e9 	bl	800131c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	osMutexDef(motorMutex);
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	motorMutex = osMutexCreate(osMutex(motorMutex));
 8001156:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800115a:	4618      	mov	r0, r3
 800115c:	f004 fcd0 	bl	8005b00 <osMutexCreate>
 8001160:	4603      	mov	r3, r0
 8001162:	4a2e      	ldr	r2, [pc, #184]	@ (800121c <main+0xe8>)
 8001164:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMessageQDef(motorCommandQueue, 5, MotorCommand_t);
 8001166:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <main+0xec>)
 8001168:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800116c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motorCommandQueue = osMessageCreate(osMessageQ(motorCommandQueue), NULL);
 8001172:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fe13 	bl	8005da4 <osMessageCreate>
 800117e:	4603      	mov	r3, r0
 8001180:	4a28      	ldr	r2, [pc, #160]	@ (8001224 <main+0xf0>)
 8001182:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001184:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <main+0xf4>)
 8001186:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800118a:	461d      	mov	r5, r3
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001198:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fc4e 	bl	8005a40 <osThreadCreate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <main+0xf8>)
 80011a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <main+0xfc>)
 80011ac:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80011b0:	461d      	mov	r5, r3
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80011be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 fc3b 	bl	8005a40 <osThreadCreate>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <main+0x100>)
 80011ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadDef(motorTask, StartMotorTask, osPriorityNormal, 0, 512);
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <main+0x104>)
 80011d2:	f107 041c 	add.w	r4, r7, #28
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fc28 	bl	8005a40 <osThreadCreate>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <main+0x108>)
 80011f4:	6013      	str	r3, [r2, #0]

	osThreadDef(buttonTask, StartButtonTask, osPriorityNormal, 0, 256);
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <main+0x10c>)
 80011f8:	463c      	mov	r4, r7
 80011fa:	461d      	mov	r5, r3
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(buttonTask), NULL);
 8001208:	463b      	mov	r3, r7
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f004 fc17 	bl	8005a40 <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001212:	f004 fbfe 	bl	8005a12 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001216:	bf00      	nop
 8001218:	e7fd      	b.n	8001216 <main+0xe2>
 800121a:	bf00      	nop
 800121c:	20000390 	.word	0x20000390
 8001220:	08016be4 	.word	0x08016be4
 8001224:	2000038c 	.word	0x2000038c
 8001228:	08016c00 	.word	0x08016c00
 800122c:	20000400 	.word	0x20000400
 8001230:	08016c28 	.word	0x08016c28
 8001234:	20000404 	.word	0x20000404
 8001238:	08016c50 	.word	0x08016c50
 800123c:	20000408 	.word	0x20000408
 8001240:	08016c78 	.word	0x08016c78

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2230      	movs	r2, #48	@ 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f014 f9f4 	bl	8015640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <SystemClock_Config+0xd0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a28      	ldr	r2, [pc, #160]	@ (8001314 <SystemClock_Config+0xd0>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <SystemClock_Config+0xd0>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <SystemClock_Config+0xd4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001290:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <SystemClock_Config+0xd4>)
 8001292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <SystemClock_Config+0xd4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ae:	2302      	movs	r3, #2
 80012b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012bc:	23a8      	movs	r3, #168	@ 0xa8
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012c4:	2307      	movs	r3, #7
 80012c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fbad 	bl	8003a2c <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d8:	f000 fae6 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e0:	2302      	movs	r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2102      	movs	r1, #2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fe0e 	bl	8003f1c <HAL_RCC_ClockConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001306:	f000 facf 	bl	80018a8 <Error_Handler>
  }
}
 800130a:	bf00      	nop
 800130c:	3750      	adds	r7, #80	@ 0x50
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <MX_TIM2_Init+0x98>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800133e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001340:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_TIM2_Init+0x98>)
 8001342:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_TIM2_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <MX_TIM2_Init+0x98>)
 8001350:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_TIM2_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_TIM2_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001362:	4814      	ldr	r0, [pc, #80]	@ (80013b4 <MX_TIM2_Init+0x98>)
 8001364:	f003 f818 	bl	8004398 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800136e:	f000 fa9b 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <MX_TIM2_Init+0x98>)
 8001380:	f003 fa22 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800138a:	f000 fa8d 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <MX_TIM2_Init+0x98>)
 800139c:	f003 fc44 	bl	8004c28 <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013a6:	f000 fa7f 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200003b8 	.word	0x200003b8

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b49      	ldr	r3, [pc, #292]	@ (80014f8 <MX_GPIO_Init+0x140>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a48      	ldr	r2, [pc, #288]	@ (80014f8 <MX_GPIO_Init+0x140>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b46      	ldr	r3, [pc, #280]	@ (80014f8 <MX_GPIO_Init+0x140>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b42      	ldr	r3, [pc, #264]	@ (80014f8 <MX_GPIO_Init+0x140>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a41      	ldr	r2, [pc, #260]	@ (80014f8 <MX_GPIO_Init+0x140>)
 80013f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b3f      	ldr	r3, [pc, #252]	@ (80014f8 <MX_GPIO_Init+0x140>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b3b      	ldr	r3, [pc, #236]	@ (80014f8 <MX_GPIO_Init+0x140>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a3a      	ldr	r2, [pc, #232]	@ (80014f8 <MX_GPIO_Init+0x140>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <MX_GPIO_Init+0x140>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <MX_GPIO_Init+0x140>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a33      	ldr	r2, [pc, #204]	@ (80014f8 <MX_GPIO_Init+0x140>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <MX_GPIO_Init+0x140>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <MX_GPIO_Init+0x140>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a2c      	ldr	r2, [pc, #176]	@ (80014f8 <MX_GPIO_Init+0x140>)
 8001448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <MX_GPIO_Init+0x140>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led3_Pin|Led2_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001460:	4826      	ldr	r0, [pc, #152]	@ (80014fc <MX_GPIO_Init+0x144>)
 8001462:	f002 faaf 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ENABLE_Pin|ENABLE_PG3_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	210c      	movs	r1, #12
 800146a:	4825      	ldr	r0, [pc, #148]	@ (8001500 <MX_GPIO_Init+0x148>)
 800146c:	f002 faaa 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CLK_STEP_Pin|CW_CCW_DIR_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001476:	4823      	ldr	r0, [pc, #140]	@ (8001504 <MX_GPIO_Init+0x14c>)
 8001478:	f002 faa4 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800147c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001482:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	481c      	ldr	r0, [pc, #112]	@ (8001504 <MX_GPIO_Init+0x14c>)
 8001494:	f002 f8d2 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led3_Pin Led2_Pin */
  GPIO_InitStruct.Pin = Led3_Pin|Led2_Pin;
 8001498:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <MX_GPIO_Init+0x144>)
 80014b2:	f002 f8c3 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_Pin ENABLE_PG3_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|ENABLE_PG3_Pin;
 80014b6:	230c      	movs	r3, #12
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014ba:	2311      	movs	r3, #17
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	@ (8001500 <MX_GPIO_Init+0x148>)
 80014ce:	f002 f8b5 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_STEP_Pin CW_CCW_DIR_Pin */
  GPIO_InitStruct.Pin = CLK_STEP_Pin|CW_CCW_DIR_Pin;
 80014d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014d8:	2311      	movs	r3, #17
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4806      	ldr	r0, [pc, #24]	@ (8001504 <MX_GPIO_Init+0x14c>)
 80014ec:	f002 f8a6 	bl	800363c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	@ 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400
 8001500:	40021800 	.word	0x40021800
 8001504:	40020800 	.word	0x40020800

08001508 <StartMotorTask>:

/* USER CODE BEGIN 4 */
void StartMotorTask(void const *argument) {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b08f      	sub	sp, #60	@ 0x3c
 800150c:	af02      	add	r7, sp, #8
 800150e:	6078      	str	r0, [r7, #4]
	MotorCommand_t receivedCmd;
	osEvent event;

	for (;;) {
		// ожидание команды из очереди
		event = osMessageGet(motorCommandQueue, osWaitForever);
 8001510:	4b6d      	ldr	r3, [pc, #436]	@ (80016c8 <StartMotorTask+0x1c0>)
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	4618      	mov	r0, r3
 800151e:	f004 fca9 	bl	8005e74 <osMessageGet>

		if (event.status == osEventMessage) {
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b10      	cmp	r3, #16
 8001526:	f040 80ca 	bne.w	80016be <StartMotorTask+0x1b6>
			receivedCmd = *(MotorCommand_t*) event.value.p;
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	ca07      	ldmia	r2, {r0, r1, r2}
 8001532:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if (calibration_mode) {
 8001536:	4b65      	ldr	r3, [pc, #404]	@ (80016cc <StartMotorTask+0x1c4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d04d      	beq.n	80015da <StartMotorTask+0xd2>
				// Медленная и плавная калибровка
				Stepper_motor_with_ramp(0, receivedCmd.steps, receivedCmd.speed, receivedCmd.steps / 2, receivedCmd.steps / 2, K);
 800153e:	69b9      	ldr	r1, [r7, #24]
 8001540:	69f8      	ldr	r0, [r7, #28]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	0fda      	lsrs	r2, r3, #31
 8001546:	4413      	add	r3, r2
 8001548:	105b      	asrs	r3, r3, #1
 800154a:	461c      	mov	r4, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	0fda      	lsrs	r2, r3, #31
 8001550:	4413      	add	r3, r2
 8001552:	105b      	asrs	r3, r3, #1
 8001554:	461a      	mov	r2, r3
 8001556:	4b5e      	ldr	r3, [pc, #376]	@ (80016d0 <StartMotorTask+0x1c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	4623      	mov	r3, r4
 8001560:	4602      	mov	r2, r0
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fcde 	bl	8000f24 <Stepper_motor_with_ramp>

				// Завершение калибровки
				osMutexWait(motorMutex, osWaitForever);
 8001568:	4b5a      	ldr	r3, [pc, #360]	@ (80016d4 <StartMotorTask+0x1cc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fadd 	bl	8005b30 <osMutexWait>
				calibration_mode = false;
 8001576:	4b55      	ldr	r3, [pc, #340]	@ (80016cc <StartMotorTask+0x1c4>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
				calibration_in_progress = false;
 800157c:	4b56      	ldr	r3, [pc, #344]	@ (80016d8 <StartMotorTask+0x1d0>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
				motorBusy = false;
 8001582:	4b56      	ldr	r3, [pc, #344]	@ (80016dc <StartMotorTask+0x1d4>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
				osMutexRelease(motorMutex);
 8001588:	4b52      	ldr	r3, [pc, #328]	@ (80016d4 <StartMotorTask+0x1cc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f004 fb1d 	bl	8005bcc <osMutexRelease>

				// Визуальная индикация завершения калибровки
				HAL_GPIO_WritePin(GPIOB, Led2_Pin | Led3_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001598:	4851      	ldr	r0, [pc, #324]	@ (80016e0 <StartMotorTask+0x1d8>)
 800159a:	f002 fa13 	bl	80039c4 <HAL_GPIO_WritePin>
				for (int i = 0; i < 3; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015a2:	e016      	b.n	80015d2 <StartMotorTask+0xca>
					HAL_GPIO_WritePin(GPIOB, Led3_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015aa:	484d      	ldr	r0, [pc, #308]	@ (80016e0 <StartMotorTask+0x1d8>)
 80015ac:	f002 fa0a 	bl	80039c4 <HAL_GPIO_WritePin>
					osDelay(300);
 80015b0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015b4:	f004 fa90 	bl	8005ad8 <osDelay>
					HAL_GPIO_WritePin(GPIOB, Led3_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015be:	4848      	ldr	r0, [pc, #288]	@ (80016e0 <StartMotorTask+0x1d8>)
 80015c0:	f002 fa00 	bl	80039c4 <HAL_GPIO_WritePin>
					osDelay(300);
 80015c4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015c8:	f004 fa86 	bl	8005ad8 <osDelay>
				for (int i = 0; i < 3; i++) {
 80015cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ce:	3301      	adds	r3, #1
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	dde5      	ble.n	80015a4 <StartMotorTask+0x9c>
 80015d8:	e06d      	b.n	80016b6 <StartMotorTask+0x1ae>
				}
			} else {
				if (receivedCmd.steps == 0) {
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d103      	bne.n	80015e8 <StartMotorTask+0xe0>
					printf("ERROR: Received zero steps! Check CGI handler.\n");
 80015e0:	4840      	ldr	r0, [pc, #256]	@ (80016e4 <StartMotorTask+0x1dc>)
 80015e2:	f013 feed 	bl	80153c0 <puts>
					continue;
 80015e6:	e06d      	b.n	80016c4 <StartMotorTask+0x1bc>
				}

				int actual_speed = receivedCmd.speed;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
				int steps = receivedCmd.steps;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
				int direction = receivedCmd.direction;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	623b      	str	r3, [r7, #32]

				if (steps < 20) {
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	2b13      	cmp	r3, #19
 80015f8:	dc10      	bgt.n	800161c <StartMotorTask+0x114>
					if (actual_speed > 15) {
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	dd01      	ble.n	8001604 <StartMotorTask+0xfc>
						actual_speed = 15;
 8001600:	230f      	movs	r3, #15
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
					Stepper_motor_with_ramp(direction, steps, actual_speed, 0,
 8001604:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <StartMotorTask+0x1c8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2300      	movs	r3, #0
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001612:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001614:	6a38      	ldr	r0, [r7, #32]
 8001616:	f7ff fc85 	bl	8000f24 <Stepper_motor_with_ramp>
 800161a:	e03d      	b.n	8001698 <StartMotorTask+0x190>
							0, K);
				} else if (steps >= 20 && steps < 50) {
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	2b13      	cmp	r3, #19
 8001620:	dd13      	ble.n	800164a <StartMotorTask+0x142>
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	2b31      	cmp	r3, #49	@ 0x31
 8001626:	dc10      	bgt.n	800164a <StartMotorTask+0x142>
					if (actual_speed > 50) {
 8001628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162a:	2b32      	cmp	r3, #50	@ 0x32
 800162c:	dd01      	ble.n	8001632 <StartMotorTask+0x12a>
						actual_speed = 50;
 800162e:	2332      	movs	r3, #50	@ 0x32
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
					Stepper_motor_with_ramp(direction, steps, actual_speed, 5,
 8001632:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <StartMotorTask+0x1c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	2305      	movs	r3, #5
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2305      	movs	r3, #5
 800163e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001642:	6a38      	ldr	r0, [r7, #32]
 8001644:	f7ff fc6e 	bl	8000f24 <Stepper_motor_with_ramp>
 8001648:	e026      	b.n	8001698 <StartMotorTask+0x190>
							5, K);
				} else if (steps >= 50 && steps <= 100) {
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	2b31      	cmp	r3, #49	@ 0x31
 800164e:	dd13      	ble.n	8001678 <StartMotorTask+0x170>
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	dc10      	bgt.n	8001678 <StartMotorTask+0x170>
					if (actual_speed > 80) {
 8001656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001658:	2b50      	cmp	r3, #80	@ 0x50
 800165a:	dd01      	ble.n	8001660 <StartMotorTask+0x158>
						actual_speed = 80;
 800165c:	2350      	movs	r3, #80	@ 0x50
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
					Stepper_motor_with_ramp(direction, steps, actual_speed, 15,
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <StartMotorTask+0x1c8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	230f      	movs	r3, #15
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	230f      	movs	r3, #15
 800166c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800166e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001670:	6a38      	ldr	r0, [r7, #32]
 8001672:	f7ff fc57 	bl	8000f24 <Stepper_motor_with_ramp>
 8001676:	e00f      	b.n	8001698 <StartMotorTask+0x190>
							15, K);
				} else {
					if (actual_speed < 75) {
 8001678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167a:	2b4a      	cmp	r3, #74	@ 0x4a
 800167c:	dc01      	bgt.n	8001682 <StartMotorTask+0x17a>
						actual_speed = 75;
 800167e:	234b      	movs	r3, #75	@ 0x4b
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
					Stepper_motor_with_ramp(direction, steps, actual_speed, 50,
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <StartMotorTask+0x1c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2323      	movs	r3, #35	@ 0x23
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2332      	movs	r3, #50	@ 0x32
 800168e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001692:	6a38      	ldr	r0, [r7, #32]
 8001694:	f7ff fc46 	bl	8000f24 <Stepper_motor_with_ramp>
							35, K);
				}

				// Освобождаем мотор
				osMutexWait(motorMutex, osWaitForever);
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <StartMotorTask+0x1cc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	4618      	mov	r0, r3
 80016a2:	f004 fa45 	bl	8005b30 <osMutexWait>
				motorBusy = false;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <StartMotorTask+0x1d4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
				osMutexRelease(motorMutex);
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <StartMotorTask+0x1cc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 fa8b 	bl	8005bcc <osMutexRelease>
			}
			vPortFree(event.value.p);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f006 ffcd 	bl	8008658 <vPortFree>
		}

		// Небольшая задержка для других задач
		osDelay(100);
 80016be:	2064      	movs	r0, #100	@ 0x64
 80016c0:	f004 fa0a 	bl	8005ad8 <osDelay>
		event = osMessageGet(motorCommandQueue, osWaitForever);
 80016c4:	e724      	b.n	8001510 <StartMotorTask+0x8>
 80016c6:	bf00      	nop
 80016c8:	2000038c 	.word	0x2000038c
 80016cc:	20000384 	.word	0x20000384
 80016d0:	20000380 	.word	0x20000380
 80016d4:	20000390 	.word	0x20000390
 80016d8:	20000385 	.word	0x20000385
 80016dc:	20000394 	.word	0x20000394
 80016e0:	40020400 	.word	0x40020400
 80016e4:	08016c94 	.word	0x08016c94

080016e8 <StartButtonTask>:
	}
}
////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
void StartButtonTask(void const * argument) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    uint32_t last_button_state = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t button_press_time = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    const uint32_t long_press_delay = 3000; // 3 секунды для длинного нажатия
 80016f8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80016fc:	61bb      	str	r3, [r7, #24]

    for (;;) {
        uint32_t current_button_state = HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin);
 80016fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001702:	4845      	ldr	r0, [pc, #276]	@ (8001818 <StartButtonTask+0x130>)
 8001704:	f002 f946 	bl	8003994 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	617b      	str	r3, [r7, #20]

        // Обнаружение нажатия кнопки
        if (current_button_state == GPIO_PIN_SET && last_button_state == GPIO_PIN_RESET) {
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d105      	bne.n	800171e <StartButtonTask+0x36>
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <StartButtonTask+0x36>
            // Кнопка нажата - запоминаем время
            button_press_time = osKernelSysTick();
 8001718:	f004 f982 	bl	8005a20 <osKernelSysTick>
 800171c:	6238      	str	r0, [r7, #32]
        }

        // Обнаружение отпускания кнопки
        if (current_button_state == GPIO_PIN_RESET && last_button_state == GPIO_PIN_SET) {
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d173      	bne.n	800180c <StartButtonTask+0x124>
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	2b01      	cmp	r3, #1
 8001728:	d170      	bne.n	800180c <StartButtonTask+0x124>
            uint32_t press_duration = osKernelSysTick() - button_press_time;
 800172a:	f004 f979 	bl	8005a20 <osKernelSysTick>
 800172e:	4602      	mov	r2, r0
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	613b      	str	r3, [r7, #16]

            // Длинное нажатие (более 3 секунд) - запуск калибровки
            if (press_duration >= long_press_delay) {
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	429a      	cmp	r2, r3
 800173c:	d366      	bcc.n	800180c <StartButtonTask+0x124>
                if (osMutexWait(motorMutex, 0) == osOK) {
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <StartButtonTask+0x134>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f004 f9f3 	bl	8005b30 <osMutexWait>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d15d      	bne.n	800180c <StartButtonTask+0x124>
                    if (motorBusy == false && calibration_in_progress == false) {
 8001750:	4b33      	ldr	r3, [pc, #204]	@ (8001820 <StartButtonTask+0x138>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f083 0301 	eor.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d03f      	beq.n	80017de <StartButtonTask+0xf6>
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <StartButtonTask+0x13c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	f083 0301 	eor.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d038      	beq.n	80017de <StartButtonTask+0xf6>
                        calibration_mode = true;
 800176c:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <StartButtonTask+0x140>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
                        calibration_in_progress = true;
 8001772:	4b2c      	ldr	r3, [pc, #176]	@ (8001824 <StartButtonTask+0x13c>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
                        osMutexRelease(motorMutex);
 8001778:	4b28      	ldr	r3, [pc, #160]	@ (800181c <StartButtonTask+0x134>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fa25 	bl	8005bcc <osMutexRelease>

                        // Визуальная индикация начала калибровки
                        HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001788:	4828      	ldr	r0, [pc, #160]	@ (800182c <StartButtonTask+0x144>)
 800178a:	f002 f91b 	bl	80039c4 <HAL_GPIO_WritePin>

                        // Отправляем команду калибровки
                        MotorCommand_t *calib_cmd = pvPortMalloc(sizeof(MotorCommand_t));
 800178e:	200c      	movs	r0, #12
 8001790:	f006 fe94 	bl	80084bc <pvPortMalloc>
 8001794:	60f8      	str	r0, [r7, #12]
                        if (calib_cmd != NULL) {
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d036      	beq.n	800180a <StartButtonTask+0x122>
                            calib_cmd->direction = 1;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
                            calib_cmd->steps = calibration;
 80017a2:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <StartButtonTask+0x148>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	605a      	str	r2, [r3, #4]
                            calib_cmd->speed = 100;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2264      	movs	r2, #100	@ 0x64
 80017ae:	609a      	str	r2, [r3, #8]

                            if (osMessagePut(motorCommandQueue, (uint32_t) calib_cmd, 0) != osOK) {
 80017b0:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <StartButtonTask+0x14c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fb1b 	bl	8005df4 <osMessagePut>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d022      	beq.n	800180a <StartButtonTask+0x122>
                                vPortFree(calib_cmd);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f006 ff47 	bl	8008658 <vPortFree>
                                calibration_in_progress = false;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <StartButtonTask+0x13c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
                                HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80017d6:	4815      	ldr	r0, [pc, #84]	@ (800182c <StartButtonTask+0x144>)
 80017d8:	f002 f8f4 	bl	80039c4 <HAL_GPIO_WritePin>
                    if (motorBusy == false && calibration_in_progress == false) {
 80017dc:	e015      	b.n	800180a <StartButtonTask+0x122>
                            }
                        }
                    } else {
                        osMutexRelease(motorMutex);
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <StartButtonTask+0x134>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 f9f2 	bl	8005bcc <osMutexRelease>
                        // Индикация ошибки - мигание светодиодами
                        for (int i = 0; i < 5; i++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	e009      	b.n	8001802 <StartButtonTask+0x11a>
                            HAL_GPIO_TogglePin(GPIOB, Led2_Pin);
 80017ee:	2180      	movs	r1, #128	@ 0x80
 80017f0:	480e      	ldr	r0, [pc, #56]	@ (800182c <StartButtonTask+0x144>)
 80017f2:	f002 f900 	bl	80039f6 <HAL_GPIO_TogglePin>
                            osDelay(200);
 80017f6:	20c8      	movs	r0, #200	@ 0xc8
 80017f8:	f004 f96e 	bl	8005ad8 <osDelay>
                        for (int i = 0; i < 5; i++) {
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	3301      	adds	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	2b04      	cmp	r3, #4
 8001806:	ddf2      	ble.n	80017ee <StartButtonTask+0x106>
 8001808:	e000      	b.n	800180c <StartButtonTask+0x124>
                    if (motorBusy == false && calibration_in_progress == false) {
 800180a:	bf00      	nop
                    }
                }
            }
        }

        last_button_state = current_button_state;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
        osDelay(50); // Проверяем состояние кнопки каждые 50мс
 8001810:	2032      	movs	r0, #50	@ 0x32
 8001812:	f004 f961 	bl	8005ad8 <osDelay>
    for (;;) {
 8001816:	e772      	b.n	80016fe <StartButtonTask+0x16>
 8001818:	40020800 	.word	0x40020800
 800181c:	20000390 	.word	0x20000390
 8001820:	20000394 	.word	0x20000394
 8001824:	20000385 	.word	0x20000385
 8001828:	20000384 	.word	0x20000384
 800182c:	40020400 	.word	0x40020400
 8001830:	20000388 	.word	0x20000388
 8001834:	2000038c 	.word	0x2000038c

08001838 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001840:	f003 fa82 	bl	8004d48 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  HAL_TIM_Base_Start(&htim2);
 8001844:	4809      	ldr	r0, [pc, #36]	@ (800186c <StartDefaultTask+0x34>)
 8001846:	f002 fdf7 	bl	8004438 <HAL_TIM_Base_Start>
  netif_set_link_up(&gnetif);
 800184a:	4809      	ldr	r0, [pc, #36]	@ (8001870 <StartDefaultTask+0x38>)
 800184c:	f009 fdb6 	bl	800b3bc <netif_set_link_up>
  netif_set_up(&gnetif);
 8001850:	4807      	ldr	r0, [pc, #28]	@ (8001870 <StartDefaultTask+0x38>)
 8001852:	f009 fd15 	bl	800b280 <netif_set_up>
  httpd_init();
 8001856:	f008 fcc5 	bl	800a1e4 <httpd_init>
  myCGIinit();
 800185a:	f7ff f963 	bl	8000b24 <myCGIinit>
  mySSIinit();
 800185e:	f7ff fb53 	bl	8000f08 <mySSIinit>
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f004 f938 	bl	8005ad8 <osDelay>
 8001868:	e7fb      	b.n	8001862 <StartDefaultTask+0x2a>
 800186a:	bf00      	nop
 800186c:	200003b8 	.word	0x200003b8
 8001870:	2000045c 	.word	0x2000045c

08001874 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB,LD3_Pin);
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB,LD2_Pin);
    osDelay(1);
 800187c:	2001      	movs	r0, #1
 800187e:	f004 f92b 	bl	8005ad8 <osDelay>
 8001882:	e7fb      	b.n	800187c <StartTask02+0x8>

08001884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001896:	f000 fb33 	bl	8001f00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40001000 	.word	0x40001000

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <Error_Handler+0x8>

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_MspInit+0x54>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_MspInit+0x54>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_MspInit+0x54>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_MspInit+0x54>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_MspInit+0x54>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_MspInit+0x54>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	210f      	movs	r1, #15
 80018f6:	f06f 0001 	mvn.w	r0, #1
 80018fa:	f000 fbfd 	bl	80020f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191c:	d10d      	bne.n	800193a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_TIM_Base_MspInit+0x3c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	@ (8001948 <HAL_TIM_Base_MspInit+0x3c>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6413      	str	r3, [r2, #64]	@ 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_TIM_Base_MspInit+0x3c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	@ 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	4b33      	ldr	r3, [pc, #204]	@ (8001a30 <HAL_InitTick+0xe4>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	4a32      	ldr	r2, [pc, #200]	@ (8001a30 <HAL_InitTick+0xe4>)
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
 800196c:	4b30      	ldr	r3, [pc, #192]	@ (8001a30 <HAL_InitTick+0xe4>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001978:	f107 0210 	add.w	r2, r7, #16
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fcd6 	bl	8004334 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800198c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001992:	f002 fcbb 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8001996:	6378      	str	r0, [r7, #52]	@ 0x34
 8001998:	e004      	b.n	80019a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800199a:	f002 fcb7 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 800199e:	4603      	mov	r3, r0
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a6:	4a23      	ldr	r2, [pc, #140]	@ (8001a34 <HAL_InitTick+0xe8>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	3b01      	subs	r3, #1
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019b2:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <HAL_InitTick+0xec>)
 80019b4:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <HAL_InitTick+0xf0>)
 80019b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_InitTick+0xec>)
 80019ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a38 <HAL_InitTick+0xec>)
 80019c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <HAL_InitTick+0xec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_InitTick+0xec>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_InitTick+0xec>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80019d8:	4817      	ldr	r0, [pc, #92]	@ (8001a38 <HAL_InitTick+0xec>)
 80019da:	f002 fcdd 	bl	8004398 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d11b      	bne.n	8001a24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019ec:	4812      	ldr	r0, [pc, #72]	@ (8001a38 <HAL_InitTick+0xec>)
 80019ee:	f002 fd8b 	bl	8004508 <HAL_TIM_Base_Start_IT>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a00:	2036      	movs	r0, #54	@ 0x36
 8001a02:	f000 fb95 	bl	8002130 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d808      	bhi.n	8001a1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	2036      	movs	r0, #54	@ 0x36
 8001a12:	f000 fb71 	bl	80020f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <HAL_InitTick+0xf4>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e002      	b.n	8001a24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3738      	adds	r7, #56	@ 0x38
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	431bde83 	.word	0x431bde83
 8001a38:	2000040c 	.word	0x2000040c
 8001a3c:	40001000 	.word	0x40001000
 8001a40:	2000002c 	.word	0x2000002c

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <NMI_Handler+0x4>

08001a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <TIM6_DAC_IRQHandler+0x10>)
 8001a82:	f002 fdb1 	bl	80045e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000040c 	.word	0x2000040c

08001a90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <ETH_IRQHandler+0x10>)
 8001a96:	f000 fee7 	bl	8002868 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20004f7c 	.word	0x20004f7c

08001aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_kill>:

int _kill(int pid, int sig)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001abe:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <_kill+0x20>)
 8001ac0:	2216      	movs	r2, #22
 8001ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	20017450 	.word	0x20017450

08001ad8 <_exit>:

void _exit (int status)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ffe5 	bl	8001ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aea:	bf00      	nop
 8001aec:	e7fd      	b.n	8001aea <_exit+0x12>

08001aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e00a      	b.n	8001b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b00:	f3af 8000 	nop.w
 8001b04:	4601      	mov	r1, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	60ba      	str	r2, [r7, #8]
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dbf0      	blt.n	8001b00 <_read+0x12>
  }

  return len;
 8001b1e:	687b      	ldr	r3, [r7, #4]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e009      	b.n	8001b4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	60ba      	str	r2, [r7, #8]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dbf1      	blt.n	8001b3a <_write+0x12>
  }
  return len;
 8001b56:	687b      	ldr	r3, [r7, #4]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_close>:

int _close(int file)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b88:	605a      	str	r2, [r3, #4]
  return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_isatty>:

int _isatty(int file)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	@ (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d205      	bcs.n	8001c04 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <_sbrk+0x6c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	4a06      	ldr	r2, [pc, #24]	@ (8001c2c <_sbrk+0x64>)
 8001c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	20030000 	.word	0x20030000
 8001c28:	00004000 	.word	0x00004000
 8001c2c:	20000454 	.word	0x20000454
 8001c30:	20017460 	.word	0x20017460
 8001c34:	20017450 	.word	0x20017450

08001c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <SystemInit+0x20>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <SystemInit+0x20>)
 8001c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c60:	f7ff ffea 	bl	8001c38 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c64:	480c      	ldr	r0, [pc, #48]	@ (8001c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c66:	490d      	ldr	r1, [pc, #52]	@ (8001c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f013 fdab 	bl	80157e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f7ff fa51 	bl	8001134 <main>
  bx  lr    
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001ca0:	0801a5b4 	.word	0x0801a5b4
  ldr r2, =_sbss
 8001ca4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001ca8:	20017460 	.word	0x20017460

08001cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC_IRQHandler>

08001cae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <LAN8742_RegisterBusIO+0x28>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <LAN8742_RegisterBusIO+0x28>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <LAN8742_RegisterBusIO+0x28>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e014      	b.n	8001d06 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d139      	bne.n	8001da2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e01c      	b.n	8001d82 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f107 020c 	add.w	r2, r7, #12
 8001d50:	2112      	movs	r1, #18
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	4798      	blx	r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	da03      	bge.n	8001d64 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001d5c:	f06f 0304 	mvn.w	r3, #4
 8001d60:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001d62:	e00b      	b.n	8001d7c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d105      	bne.n	8001d7c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
         break;
 8001d7a:	e005      	b.n	8001d88 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b1f      	cmp	r3, #31
 8001d86:	d9df      	bls.n	8001d48 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b1f      	cmp	r3, #31
 8001d8e:	d902      	bls.n	8001d96 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001d90:	f06f 0302 	mvn.w	r3, #2
 8001d94:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001da2:	693b      	ldr	r3, [r7, #16]
 }
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6810      	ldr	r0, [r2, #0]
 8001dc0:	f107 020c 	add.w	r2, r7, #12
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4798      	blx	r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da02      	bge.n	8001dd4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001dce:	f06f 0304 	mvn.w	r3, #4
 8001dd2:	e06e      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6810      	ldr	r0, [r2, #0]
 8001ddc:	f107 020c 	add.w	r2, r7, #12
 8001de0:	2101      	movs	r1, #1
 8001de2:	4798      	blx	r3
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	da02      	bge.n	8001df0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001dea:	f06f 0304 	mvn.w	r3, #4
 8001dee:	e060      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e059      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6810      	ldr	r0, [r2, #0]
 8001e06:	f107 020c 	add.w	r2, r7, #12
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4798      	blx	r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da02      	bge.n	8001e1a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001e14:	f06f 0304 	mvn.w	r3, #4
 8001e18:	e04b      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11b      	bne.n	8001e5c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <LAN8742_GetLinkState+0x90>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e03a      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e033      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e54:	2304      	movs	r3, #4
 8001e56:	e02c      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e58:	2305      	movs	r3, #5
 8001e5a:	e02a      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6810      	ldr	r0, [r2, #0]
 8001e64:	f107 020c 	add.w	r2, r7, #12
 8001e68:	211f      	movs	r1, #31
 8001e6a:	4798      	blx	r3
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da02      	bge.n	8001e78 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e72:	f06f 0304 	mvn.w	r3, #4
 8001e76:	e01c      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001e82:	2306      	movs	r3, #6
 8001e84:	e015      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 031c 	and.w	r3, r3, #28
 8001e8c:	2b18      	cmp	r3, #24
 8001e8e:	d101      	bne.n	8001e94 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e90:	2302      	movs	r3, #2
 8001e92:	e00e      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 031c 	and.w	r3, r3, #28
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d101      	bne.n	8001ea2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e007      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 031c 	and.w	r3, r3, #28
 8001ea8:	2b14      	cmp	r3, #20
 8001eaa:	d101      	bne.n	8001eb0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001eac:	2304      	movs	r3, #4
 8001eae:	e000      	b.n	8001eb2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001eb0:	2305      	movs	r3, #5
    }
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_Init+0x40>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_Init+0x40>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_Init+0x40>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f8fc 	bl	80020e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	200f      	movs	r0, #15
 8001eec:	f7ff fd2e 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fce0 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000030 	.word	0x20000030
 8001f24:	20000458 	.word	0x20000458

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000458 	.word	0x20000458

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000030 	.word	0x20000030

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	@ (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	@ (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	@ (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff4c 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210a:	f7ff ff61 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 800210e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	6978      	ldr	r0, [r7, #20]
 8002116:	f7ff ffb1 	bl	800207c <NVIC_EncodePriority>
 800211a:	4602      	mov	r2, r0
 800211c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff80 	bl	8002028 <__NVIC_SetPriority>
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff54 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e08a      	b.n	8002274 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f003 f9ff 	bl	8005574 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b40      	ldr	r3, [pc, #256]	@ (800227c <HAL_ETH_Init+0x130>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	4a3f      	ldr	r2, [pc, #252]	@ (800227c <HAL_ETH_Init+0x130>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002184:	6453      	str	r3, [r2, #68]	@ 0x44
 8002186:	4b3d      	ldr	r3, [pc, #244]	@ (800227c <HAL_ETH_Init+0x130>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002192:	4b3b      	ldr	r3, [pc, #236]	@ (8002280 <HAL_ETH_Init+0x134>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a3a      	ldr	r2, [pc, #232]	@ (8002280 <HAL_ETH_Init+0x134>)
 8002198:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800219c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800219e:	4b38      	ldr	r3, [pc, #224]	@ (8002280 <HAL_ETH_Init+0x134>)
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4936      	ldr	r1, [pc, #216]	@ (8002280 <HAL_ETH_Init+0x134>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021ac:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_ETH_Init+0x134>)
 80021ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c8:	f7ff feae 	bl	8001f28 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021ce:	e011      	b.n	80021f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021d0:	f7ff feaa 	bl	8001f28 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80021de:	d909      	bls.n	80021f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2204      	movs	r2, #4
 80021e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	22e0      	movs	r2, #224	@ 0xe0
 80021ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e03f      	b.n	8002274 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e4      	bne.n	80021d0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 ff5a 	bl	80030c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f001 f805 	bl	800321c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f001 f85b 	bl	80032ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	461a      	mov	r2, r3
 800221e:	2100      	movs	r1, #0
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 ffc3 	bl	80031ac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002246:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800224a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800225e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2210      	movs	r2, #16
 800226e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40013800 	.word	0x40013800

08002284 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002292:	2b10      	cmp	r3, #16
 8002294:	d161      	bne.n	800235a <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2204      	movs	r2, #4
 80022a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9f4 	bl	8002698 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7ff fe41 	bl	8001f40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022dc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022f4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fd7e 	bl	8002df8 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002314:	2001      	movs	r0, #1
 8002316:	f7ff fe13 	bl	8001f40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0204 	orr.w	r2, r2, #4
 8002330:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002344:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8002348:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800234c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2240      	movs	r2, #64	@ 0x40
 8002352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
  }
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002372:	2b40      	cmp	r3, #64	@ 0x40
 8002374:	d170      	bne.n	8002458 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002390:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002394:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002398:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023b0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	f023 0302 	bic.w	r3, r3, #2
 80023c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0204 	bic.w	r2, r2, #4
 80023d8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f7ff fdac 	bl	8001f40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fd01 	bl	8002df8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0208 	bic.w	r2, r2, #8
 8002404:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800240e:	2001      	movs	r0, #1
 8002410:	f7ff fd96 	bl	8001f40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e00e      	b.n	8002440 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	3212      	adds	r2, #18
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d9ed      	bls.n	8002422 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2210      	movs	r2, #16
 8002450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e045      	b.n	8002512 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800248c:	2b40      	cmp	r3, #64	@ 0x40
 800248e:	d13f      	bne.n	8002510 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002498:	2201      	movs	r2, #1
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 ff85 	bl	80033ac <ETH_Prepare_Tx_Descriptors>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e02a      	b.n	8002512 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80024bc:	f3bf 8f4f 	dsb	sy
}
 80024c0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d904      	bls.n	80024de <HAL_ETH_Transmit_IT+0x7c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	1f1a      	subs	r2, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f8:	461a      	mov	r2, r3
 80024fa:	2304      	movs	r3, #4
 80024fc:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002506:	461a      	mov	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b088      	sub	sp, #32
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0a4      	b.n	8002690 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	d001      	beq.n	8002554 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e09d      	b.n	8002690 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002558:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	3212      	adds	r2, #18
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800256a:	f1c3 0304 	rsb	r3, r3, #4
 800256e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002570:	e066      	b.n	8002640 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <HAL_ETH_ReadData+0x88>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d03c      	beq.n	800261c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025c4:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f003 f994 	bl	8005928 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d902      	bls.n	800262e <HAL_ETH_ReadData+0x114>
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	3b04      	subs	r3, #4
 800262c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	3212      	adds	r2, #18
 8002634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002638:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002644:	2b00      	cmp	r3, #0
 8002646:	db06      	blt.n	8002656 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d202      	bcs.n	8002656 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d08d      	beq.n	8002572 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	441a      	add	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f814 	bl	8002698 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d108      	bne.n	800268e <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80026a4:	2301      	movs	r3, #1
 80026a6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026ac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	3212      	adds	r2, #18
 80026b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026be:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80026c0:	e044      	b.n	800274c <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d112      	bne.n	80026f0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80026ca:	f107 0308 	add.w	r3, r7, #8
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 f8fa 	bl	80058c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	74fb      	strb	r3, [r7, #19]
 80026de:	e007      	b.n	80026f0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	461a      	mov	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	461a      	mov	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d02a      	beq.n	800274c <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	6053      	str	r3, [r2, #4]
 800270e:	e005      	b.n	800271c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3301      	adds	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d902      	bls.n	800273a <ETH_UpdateDescriptor+0xa2>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3b04      	subs	r3, #4
 8002738:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	3212      	adds	r2, #18
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	617b      	str	r3, [r7, #20]
      desccount--;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	3b01      	subs	r3, #1
 800274a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <ETH_UpdateDescriptor+0xc0>
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1b4      	bne.n	80026c2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	429a      	cmp	r2, r3
 8002760:	d01a      	beq.n	8002798 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3303      	adds	r3, #3
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800276c:	f3bf 8f5f 	dmb	sy
}
 8002770:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6919      	ldr	r1, [r3, #16]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	18ca      	adds	r2, r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800278a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3318      	adds	r3, #24
 80027ac:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80027be:	e047      	b.n	8002850 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	3304      	adds	r3, #4
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	3301      	adds	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d902      	bls.n	80027ec <HAL_ETH_ReleaseTxPacket+0x4c>
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	3b04      	subs	r3, #4
 80027ea:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80027f0:	7bbb      	ldrb	r3, [r7, #14]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d02c      	beq.n	8002850 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68d9      	ldr	r1, [r3, #12]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db1f      	blt.n	800284c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	3304      	adds	r3, #4
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	f003 f8c5 	bl	80059a8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	3304      	adds	r3, #4
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	2200      	movs	r2, #0
 800282a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	3301      	adds	r3, #1
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d902      	bls.n	800283e <HAL_ETH_ReleaseTxPacket+0x9e>
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	3b04      	subs	r3, #4
 800283c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	62da      	str	r2, [r3, #44]	@ 0x2c
 800284a:	e001      	b.n	8002850 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_ETH_ReleaseTxPacket+0xbc>
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1b1      	bne.n	80027c0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002890:	4b4b      	ldr	r3, [pc, #300]	@ (80029c0 <HAL_ETH_IRQHandler+0x158>)
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_ETH_IRQHandler+0x56>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b43      	ldr	r3, [pc, #268]	@ (80029c4 <HAL_ETH_IRQHandler+0x15c>)
 80028b6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f002 fb87 	bl	8004fcc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00f      	beq.n	80028e8 <HAL_ETH_IRQHandler+0x80>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028da:	461a      	mov	r2, r3
 80028dc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80028e0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f002 fb82 	bl	8004fec <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d042      	beq.n	8002978 <HAL_ETH_IRQHandler+0x110>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03d      	beq.n	8002978 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002902:	f043 0208 	orr.w	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01a      	beq.n	800294c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_ETH_IRQHandler+0x160>)
 8002922:	4013      	ands	r3, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800293c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002940:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	22e0      	movs	r2, #224	@ 0xe0
 8002946:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800294a:	e012      	b.n	8002972 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	f248 6380 	movw	r3, #34432	@ 0x8680
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800296a:	461a      	mov	r2, r3
 800296c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002970:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f002 fb4a 	bl	800500c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002988:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f81a 	bl	80029cc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80029aa:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_ETH_IRQHandler+0x158>)
 80029ac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80029b0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f814 	bl	80029e0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80029b8:	bf00      	nop
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40013c00 	.word	0x40013c00
 80029c4:	00010040 	.word	0x00010040
 80029c8:	007e2000 	.word	0x007e2000

080029cc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 031c 	and.w	r3, r3, #28
 8002a10:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	02db      	lsls	r3, r3, #11
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0302 	bic.w	r3, r3, #2
 8002a32:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002a44:	f7ff fa70 	bl	8001f28 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a4a:	e00d      	b.n	8002a68 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002a4c:	f7ff fa6c 	bl	8001f28 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a5a:	d301      	bcc.n	8002a60 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e010      	b.n	8002a82 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ec      	bne.n	8002a4c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 031c 	and.w	r3, r3, #28
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	02db      	lsls	r3, r3, #11
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	019b      	lsls	r3, r3, #6
 8002ab8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae4:	f7ff fa20 	bl	8001f28 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002aea:	e00d      	b.n	8002b08 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002aec:	f7ff fa1c 	bl	8001f28 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afa:	d301      	bcc.n	8002b00 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e009      	b.n	8002b14 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1ec      	bne.n	8002aec <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0e6      	b.n	8002cfe <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bf0c      	ite	eq
 8002bee:	2301      	moveq	r3, #1
 8002bf0:	2300      	movne	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00b      	b.n	8002d36 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d105      	bne.n	8002d34 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d28:	6839      	ldr	r1, [r7, #0]
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f88a 	bl	8002e44 <ETH_SetMACConfig>

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 031c 	bic.w	r3, r3, #28
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d58:	f001 facc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8002d5c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4a14      	ldr	r2, [pc, #80]	@ (8002db4 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d804      	bhi.n	8002d70 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e019      	b.n	8002da4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a11      	ldr	r2, [pc, #68]	@ (8002db8 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d204      	bcs.n	8002d82 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f043 030c 	orr.w	r3, r3, #12
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e010      	b.n	8002da4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d90c      	bls.n	8002da4 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc0 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d804      	bhi.n	8002d9c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e003      	b.n	8002da4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f043 0310 	orr.w	r3, r3, #16
 8002da2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	611a      	str	r2, [r3, #16]
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	02160ebf 	.word	0x02160ebf
 8002db8:	03938700 	.word	0x03938700
 8002dbc:	05f5e0ff 	.word	0x05f5e0ff
 8002dc0:	08f0d17f 	.word	0x08f0d17f

08002dc4 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e1a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7ff f889 	bl	8001f40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e38:	6193      	str	r3, [r2, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4b53      	ldr	r3, [pc, #332]	@ (8002fa8 <ETH_SetMACConfig+0x164>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7b9b      	ldrb	r3, [r3, #14]
 8002e62:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	7c12      	ldrb	r2, [r2, #16]
 8002e68:	2a00      	cmp	r2, #0
 8002e6a:	d102      	bne.n	8002e72 <ETH_SetMACConfig+0x2e>
 8002e6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e70:	e000      	b.n	8002e74 <ETH_SetMACConfig+0x30>
 8002e72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	7c52      	ldrb	r2, [r2, #17]
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	d102      	bne.n	8002e84 <ETH_SetMACConfig+0x40>
 8002e7e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e82:	e000      	b.n	8002e86 <ETH_SetMACConfig+0x42>
 8002e84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	7fdb      	ldrb	r3, [r3, #31]
 8002e92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	7f92      	ldrb	r2, [r2, #30]
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d102      	bne.n	8002eaa <ETH_SetMACConfig+0x66>
 8002ea4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ea8:	e000      	b.n	8002eac <ETH_SetMACConfig+0x68>
 8002eaa:	2200      	movs	r2, #0
                        macconf->Speed |
 8002eac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	7f1b      	ldrb	r3, [r3, #28]
 8002eb2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002eb4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	791b      	ldrb	r3, [r3, #4]
 8002ec0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ec2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002eca:	2a00      	cmp	r2, #0
 8002ecc:	d102      	bne.n	8002ed4 <ETH_SetMACConfig+0x90>
 8002ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed2:	e000      	b.n	8002ed6 <ETH_SetMACConfig+0x92>
 8002ed4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ed6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	7bdb      	ldrb	r3, [r3, #15]
 8002edc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ede:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ee4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002eec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f06:	2001      	movs	r0, #1
 8002f08:	f7ff f81a 	bl	8001f40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d101      	bne.n	8002f3a <ETH_SetMACConfig+0xf6>
 8002f36:	2280      	movs	r2, #128	@ 0x80
 8002f38:	e000      	b.n	8002f3c <ETH_SetMACConfig+0xf8>
 8002f3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f4a:	2a01      	cmp	r2, #1
 8002f4c:	d101      	bne.n	8002f52 <ETH_SetMACConfig+0x10e>
 8002f4e:	2208      	movs	r2, #8
 8002f50:	e000      	b.n	8002f54 <ETH_SetMACConfig+0x110>
 8002f52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f5c:	2a01      	cmp	r2, #1
 8002f5e:	d101      	bne.n	8002f64 <ETH_SetMACConfig+0x120>
 8002f60:	2204      	movs	r2, #4
 8002f62:	e000      	b.n	8002f66 <ETH_SetMACConfig+0x122>
 8002f64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002f6e:	2a01      	cmp	r2, #1
 8002f70:	d101      	bne.n	8002f76 <ETH_SetMACConfig+0x132>
 8002f72:	2202      	movs	r2, #2
 8002f74:	e000      	b.n	8002f78 <ETH_SetMACConfig+0x134>
 8002f76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f90:	2001      	movs	r0, #1
 8002f92:	f7fe ffd5 	bl	8001f40 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	fd20810f 	.word	0xfd20810f

08002fac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80030bc <ETH_SetDMAConfig+0x110>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	7b1b      	ldrb	r3, [r3, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <ETH_SetDMAConfig+0x2c>
 8002fd2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fd6:	e000      	b.n	8002fda <ETH_SetDMAConfig+0x2e>
 8002fd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	7b5b      	ldrb	r3, [r3, #13]
 8002fde:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fe0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	7f52      	ldrb	r2, [r2, #29]
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	d102      	bne.n	8002ff0 <ETH_SetDMAConfig+0x44>
 8002fea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002fee:	e000      	b.n	8002ff2 <ETH_SetDMAConfig+0x46>
 8002ff0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ff2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	7b9b      	ldrb	r3, [r3, #14]
 8002ff8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ffa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003000:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	7f1b      	ldrb	r3, [r3, #28]
 8003006:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003008:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7f9b      	ldrb	r3, [r3, #30]
 800300e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003010:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003016:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800301e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003020:	4313      	orrs	r3, r2
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003030:	461a      	mov	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003042:	2001      	movs	r0, #1
 8003044:	f7fe ff7c 	bl	8001f40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003050:	461a      	mov	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	791b      	ldrb	r3, [r3, #4]
 800305a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003060:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003066:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800306c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003074:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003076:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800307e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003084:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800308e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003092:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a0:	2001      	movs	r0, #1
 80030a2:	f7fe ff4d 	bl	8001f40 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	f8de3f23 	.word	0xf8de3f23

080030c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0a6      	sub	sp, #152	@ 0x98
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003102:	2300      	movs	r3, #0
 8003104:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800310c:	2300      	movs	r3, #0
 800310e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003128:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800312c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800312e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800313a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fe7f 	bl	8002e44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003146:	2301      	movs	r3, #1
 8003148:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800314a:	2301      	movs	r3, #1
 800314c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003154:	2301      	movs	r3, #1
 8003156:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003172:	2301      	movs	r3, #1
 8003174:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003176:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800317a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800317c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003180:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003182:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003186:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800318e:	2300      	movs	r3, #0
 8003190:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff05 	bl	8002fac <ETH_SetDMAConfig>
}
 80031a2:	bf00      	nop
 80031a4:	3798      	adds	r7, #152	@ 0x98
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3305      	adds	r3, #5
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	3204      	adds	r2, #4
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <ETH_MACAddressConfig+0x68>)
 80031ce:	4413      	add	r3, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3303      	adds	r3, #3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	061a      	lsls	r2, r3, #24
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3302      	adds	r3, #2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	4313      	orrs	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <ETH_MACAddressConfig+0x6c>)
 80031fe:	4413      	add	r3, r2
 8003200:	461a      	mov	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	6013      	str	r3, [r2, #0]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40028040 	.word	0x40028040
 8003218:	40028044 	.word	0x40028044

0800321c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e03e      	b.n	80032a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	3206      	adds	r2, #6
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d80c      	bhi.n	800328c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68d9      	ldr	r1, [r3, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	e004      	b.n	8003296 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3301      	adds	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d9bd      	bls.n	800322a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c0:	611a      	str	r2, [r3, #16]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e048      	b.n	800336e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6919      	ldr	r1, [r3, #16]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003318:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	3212      	adds	r2, #18
 800333a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d80c      	bhi.n	800335e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6919      	ldr	r1, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	461a      	mov	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e004      	b.n	8003368 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d9b3      	bls.n	80032dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800339e:	60da      	str	r2, [r3, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b091      	sub	sp, #68	@ 0x44
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3318      	adds	r3, #24
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033ee:	d007      	beq.n	8003400 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f4:	3304      	adds	r3, #4
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003400:	2302      	movs	r3, #2
 8003402:	e115      	b.n	8003630 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003406:	3301      	adds	r3, #1
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800341c:	f023 031f 	bic.w	r3, r3, #31
 8003420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003422:	6852      	ldr	r2, [r2, #4]
 8003424:	431a      	orrs	r2, r3
 8003426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003428:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	431a      	orrs	r2, r3
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	431a      	orrs	r2, r3
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800348a:	e084      	b.n	8003596 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e005      	b.n	80034b8 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ba:	3301      	adds	r3, #1
 80034bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d902      	bls.n	80034ca <ETH_Prepare_Tx_Descriptors+0x11e>
 80034c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c6:	3b04      	subs	r3, #4
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034e0:	d007      	beq.n	80034f2 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e6:	3304      	adds	r3, #4
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d029      	beq.n	8003546 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003500:	2300      	movs	r3, #0
 8003502:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003504:	e019      	b.n	800353a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003506:	f3bf 8f5f 	dmb	sy
}
 800350a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351a:	3301      	adds	r3, #1
 800351c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800351e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003520:	2b03      	cmp	r3, #3
 8003522:	d902      	bls.n	800352a <ETH_Prepare_Tx_Descriptors+0x17e>
 8003524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003526:	3b04      	subs	r3, #4
 8003528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800352e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003532:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003536:	3301      	adds	r3, #1
 8003538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800353a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	429a      	cmp	r2, r3
 8003540:	d3e1      	bcc.n	8003506 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	e074      	b.n	8003630 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	3301      	adds	r3, #1
 8003556:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003570:	f023 031f 	bic.w	r3, r3, #31
 8003574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003576:	6852      	ldr	r2, [r2, #4]
 8003578:	431a      	orrs	r2, r3
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	3301      	adds	r3, #1
 8003582:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003584:	f3bf 8f5f 	dmb	sy
}
 8003588:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f47f af76 	bne.w	800348c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e005      	b.n	80035c0 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80035d6:	f3bf 8f5f 	dmb	sy
}
 80035da:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f0:	3304      	adds	r3, #4
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035fc:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	613b      	str	r3, [r7, #16]
  return(result);
 8003604:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	2301      	movs	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	4413      	add	r3, r2
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	629a      	str	r2, [r3, #40]	@ 0x28
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f383 8810 	msr	PRIMASK, r3
}
 800362c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3744      	adds	r7, #68	@ 0x44
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	@ 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e177      	b.n	8003948 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003658:	2201      	movs	r2, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	f040 8166 	bne.w	8003942 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d005      	beq.n	800368e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800368a:	2b02      	cmp	r3, #2
 800368c:	d130      	bne.n	80036f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2203      	movs	r2, #3
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c4:	2201      	movs	r2, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 0201 	and.w	r2, r3, #1
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d017      	beq.n	800372c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d123      	bne.n	8003780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	08da      	lsrs	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3208      	adds	r2, #8
 8003740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	220f      	movs	r2, #15
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	08da      	lsrs	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3208      	adds	r2, #8
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80c0 	beq.w	8003942 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b66      	ldr	r3, [pc, #408]	@ (8003960 <HAL_GPIO_Init+0x324>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	4a65      	ldr	r2, [pc, #404]	@ (8003960 <HAL_GPIO_Init+0x324>)
 80037cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037d2:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <HAL_GPIO_Init+0x324>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037de:	4a61      	ldr	r2, [pc, #388]	@ (8003964 <HAL_GPIO_Init+0x328>)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a58      	ldr	r2, [pc, #352]	@ (8003968 <HAL_GPIO_Init+0x32c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d037      	beq.n	800387a <HAL_GPIO_Init+0x23e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a57      	ldr	r2, [pc, #348]	@ (800396c <HAL_GPIO_Init+0x330>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <HAL_GPIO_Init+0x23a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a56      	ldr	r2, [pc, #344]	@ (8003970 <HAL_GPIO_Init+0x334>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02b      	beq.n	8003872 <HAL_GPIO_Init+0x236>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a55      	ldr	r2, [pc, #340]	@ (8003974 <HAL_GPIO_Init+0x338>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d025      	beq.n	800386e <HAL_GPIO_Init+0x232>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a54      	ldr	r2, [pc, #336]	@ (8003978 <HAL_GPIO_Init+0x33c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01f      	beq.n	800386a <HAL_GPIO_Init+0x22e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a53      	ldr	r2, [pc, #332]	@ (800397c <HAL_GPIO_Init+0x340>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d019      	beq.n	8003866 <HAL_GPIO_Init+0x22a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a52      	ldr	r2, [pc, #328]	@ (8003980 <HAL_GPIO_Init+0x344>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_GPIO_Init+0x226>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a51      	ldr	r2, [pc, #324]	@ (8003984 <HAL_GPIO_Init+0x348>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00d      	beq.n	800385e <HAL_GPIO_Init+0x222>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a50      	ldr	r2, [pc, #320]	@ (8003988 <HAL_GPIO_Init+0x34c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <HAL_GPIO_Init+0x21e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4f      	ldr	r2, [pc, #316]	@ (800398c <HAL_GPIO_Init+0x350>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_GPIO_Init+0x21a>
 8003852:	2309      	movs	r3, #9
 8003854:	e012      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003856:	230a      	movs	r3, #10
 8003858:	e010      	b.n	800387c <HAL_GPIO_Init+0x240>
 800385a:	2308      	movs	r3, #8
 800385c:	e00e      	b.n	800387c <HAL_GPIO_Init+0x240>
 800385e:	2307      	movs	r3, #7
 8003860:	e00c      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003862:	2306      	movs	r3, #6
 8003864:	e00a      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003866:	2305      	movs	r3, #5
 8003868:	e008      	b.n	800387c <HAL_GPIO_Init+0x240>
 800386a:	2304      	movs	r3, #4
 800386c:	e006      	b.n	800387c <HAL_GPIO_Init+0x240>
 800386e:	2303      	movs	r3, #3
 8003870:	e004      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003872:	2302      	movs	r3, #2
 8003874:	e002      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <HAL_GPIO_Init+0x240>
 800387a:	2300      	movs	r3, #0
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	f002 0203 	and.w	r2, r2, #3
 8003882:	0092      	lsls	r2, r2, #2
 8003884:	4093      	lsls	r3, r2
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800388c:	4935      	ldr	r1, [pc, #212]	@ (8003964 <HAL_GPIO_Init+0x328>)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	3302      	adds	r3, #2
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389a:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <HAL_GPIO_Init+0x354>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038be:	4a34      	ldr	r2, [pc, #208]	@ (8003990 <HAL_GPIO_Init+0x354>)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c4:	4b32      	ldr	r3, [pc, #200]	@ (8003990 <HAL_GPIO_Init+0x354>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e8:	4a29      	ldr	r2, [pc, #164]	@ (8003990 <HAL_GPIO_Init+0x354>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ee:	4b28      	ldr	r3, [pc, #160]	@ (8003990 <HAL_GPIO_Init+0x354>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003912:	4a1f      	ldr	r2, [pc, #124]	@ (8003990 <HAL_GPIO_Init+0x354>)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003918:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <HAL_GPIO_Init+0x354>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800393c:	4a14      	ldr	r2, [pc, #80]	@ (8003990 <HAL_GPIO_Init+0x354>)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3301      	adds	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b0f      	cmp	r3, #15
 800394c:	f67f ae84 	bls.w	8003658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3724      	adds	r7, #36	@ 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	40013800 	.word	0x40013800
 8003968:	40020000 	.word	0x40020000
 800396c:	40020400 	.word	0x40020400
 8003970:	40020800 	.word	0x40020800
 8003974:	40020c00 	.word	0x40020c00
 8003978:	40021000 	.word	0x40021000
 800397c:	40021400 	.word	0x40021400
 8003980:	40021800 	.word	0x40021800
 8003984:	40021c00 	.word	0x40021c00
 8003988:	40022000 	.word	0x40022000
 800398c:	40022400 	.word	0x40022400
 8003990:	40013c00 	.word	0x40013c00

08003994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e001      	b.n	80039b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
 80039d0:	4613      	mov	r3, r2
 80039d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039e0:	e003      	b.n	80039ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	619a      	str	r2, [r3, #24]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a08:	887a      	ldrh	r2, [r7, #2]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	041a      	lsls	r2, r3, #16
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	400b      	ands	r3, r1
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	619a      	str	r2, [r3, #24]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e267      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d075      	beq.n	8003b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a4a:	4b88      	ldr	r3, [pc, #544]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d00c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4b85      	ldr	r3, [pc, #532]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d112      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a62:	4b82      	ldr	r3, [pc, #520]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	4b7e      	ldr	r3, [pc, #504]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05b      	beq.n	8003b34 <HAL_RCC_OscConfig+0x108>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d157      	bne.n	8003b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e242      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x74>
 8003a92:	4b76      	ldr	r3, [pc, #472]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a75      	ldr	r2, [pc, #468]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x98>
 8003aaa:	4b70      	ldr	r3, [pc, #448]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6f      	ldr	r2, [pc, #444]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6c      	ldr	r2, [pc, #432]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003ac4:	4b69      	ldr	r3, [pc, #420]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a68      	ldr	r2, [pc, #416]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b66      	ldr	r3, [pc, #408]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a65      	ldr	r2, [pc, #404]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fa20 	bl	8001f28 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe fa1c 	bl	8001f28 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	@ 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e207      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xc0>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fa0c 	bl	8001f28 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe fa08 	bl	8001f28 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1f3      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b51      	ldr	r3, [pc, #324]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0xe8>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b42:	4b4a      	ldr	r3, [pc, #296]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b47      	ldr	r3, [pc, #284]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5a:	4b44      	ldr	r3, [pc, #272]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b41      	ldr	r3, [pc, #260]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c7      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4937      	ldr	r1, [pc, #220]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fe f9c1 	bl	8001f28 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fe f9bd 	bl	8001f28 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1a8      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4925      	ldr	r1, [pc, #148]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b24      	ldr	r3, [pc, #144]	@ (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe f9a0 	bl	8001f28 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe f99c 	bl	8001f28 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e187      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d036      	beq.n	8003c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe f980 	bl	8001f28 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fe f97c 	bl	8001f28 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e167      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x200>
 8003c4a:	e01b      	b.n	8003c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fe f969 	bl	8001f28 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	e00e      	b.n	8003c78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fe f965 	bl	8001f28 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d907      	bls.n	8003c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e150      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470000 	.word	0x42470000
 8003c74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b88      	ldr	r3, [pc, #544]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ea      	bne.n	8003c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8097 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c96:	4b81      	ldr	r3, [pc, #516]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	4a7c      	ldr	r2, [pc, #496]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b77      	ldr	r3, [pc, #476]	@ (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cce:	4b74      	ldr	r3, [pc, #464]	@ (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a73      	ldr	r2, [pc, #460]	@ (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fe f925 	bl	8001f28 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe f921 	bl	8001f28 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e10c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2ea>
 8003d08:	4b64      	ldr	r3, [pc, #400]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0c:	4a63      	ldr	r2, [pc, #396]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d14:	e01c      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x30c>
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	4a5e      	ldr	r2, [pc, #376]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d38:	4b58      	ldr	r3, [pc, #352]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3c:	4a57      	ldr	r2, [pc, #348]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d44:	4b55      	ldr	r3, [pc, #340]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	4a54      	ldr	r2, [pc, #336]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fe f8e6 	bl	8001f28 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fe f8e2 	bl	8001f28 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0cb      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	4b49      	ldr	r3, [pc, #292]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ee      	beq.n	8003d60 <HAL_RCC_OscConfig+0x334>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d84:	f7fe f8d0 	bl	8001f28 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fe f8cc 	bl	8001f28 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0b5      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	4b3e      	ldr	r3, [pc, #248]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ee      	bne.n	8003d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	4a38      	ldr	r2, [pc, #224]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a1 	beq.w	8003f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dca:	4b34      	ldr	r3, [pc, #208]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d05c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d141      	bne.n	8003e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b31      	ldr	r3, [pc, #196]	@ (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe f8a0 	bl	8001f28 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe f89c 	bl	8001f28 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e087      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	491b      	ldr	r1, [pc, #108]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fe f875 	bl	8001f28 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fe f871 	bl	8001f28 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e05c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e54:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x416>
 8003e60:	e054      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e62:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe f85e 	bl	8001f28 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe f85a 	bl	8001f28 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e045      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x444>
 8003e8e:	e03d      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e038      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40007000 	.word	0x40007000
 8003ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <HAL_RCC_OscConfig+0x4ec>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d121      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d11a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d111      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0cc      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b68      	ldr	r3, [pc, #416]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90c      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b63      	ldr	r3, [pc, #396]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b8      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f70:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a58      	ldr	r2, [pc, #352]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f88:	4b53      	ldr	r3, [pc, #332]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a52      	ldr	r2, [pc, #328]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	494d      	ldr	r1, [pc, #308]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d044      	beq.n	800403c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d119      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b3f      	ldr	r3, [pc, #252]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	4b3b      	ldr	r3, [pc, #236]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e067      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b37      	ldr	r3, [pc, #220]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4934      	ldr	r1, [pc, #208]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7fd ff8c 	bl	8001f28 <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fd ff88 	bl	8001f28 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e04f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d20c      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b22      	ldr	r3, [pc, #136]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b20      	ldr	r3, [pc, #128]	@ (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e032      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4916      	ldr	r1, [pc, #88]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490e      	ldr	r1, [pc, #56]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040a2:	f000 f821 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	490a      	ldr	r1, [pc, #40]	@ (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	4a09      	ldr	r2, [pc, #36]	@ (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fd fc42 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08019b20 	.word	0x08019b20
 80040e0:	20000028 	.word	0x20000028
 80040e4:	2000002c 	.word	0x2000002c

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b094      	sub	sp, #80	@ 0x50
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004100:	4b79      	ldr	r3, [pc, #484]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d00d      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x40>
 800410c:	2b08      	cmp	r3, #8
 800410e:	f200 80e1 	bhi.w	80042d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x34>
 8004116:	2b04      	cmp	r3, #4
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x3a>
 800411a:	e0db      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b73      	ldr	r3, [pc, #460]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x204>)
 800411e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004120:	e0db      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004122:	4b73      	ldr	r3, [pc, #460]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004124:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004126:	e0d8      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004128:	4b6f      	ldr	r3, [pc, #444]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004132:	4b6d      	ldr	r3, [pc, #436]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d063      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413e:	4b6a      	ldr	r3, [pc, #424]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	2200      	movs	r2, #0
 8004146:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004148:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004150:	633b      	str	r3, [r7, #48]	@ 0x30
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	@ 0x34
 8004156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4621      	mov	r1, r4
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	6139      	str	r1, [r7, #16]
 8004178:	4629      	mov	r1, r5
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800418c:	4659      	mov	r1, fp
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4651      	mov	r1, sl
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4651      	mov	r1, sl
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4651      	mov	r1, sl
 800419c:	ebb2 0801 	subs.w	r8, r2, r1
 80041a0:	4659      	mov	r1, fp
 80041a2:	eb63 0901 	sbc.w	r9, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ba:	4690      	mov	r8, r2
 80041bc:	4699      	mov	r9, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb18 0303 	adds.w	r3, r8, r3
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	462b      	mov	r3, r5
 80041c8:	eb49 0303 	adc.w	r3, r9, r3
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041da:	4629      	mov	r1, r5
 80041dc:	024b      	lsls	r3, r1, #9
 80041de:	4621      	mov	r1, r4
 80041e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e4:	4621      	mov	r1, r4
 80041e6:	024a      	lsls	r2, r1, #9
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ee:	2200      	movs	r2, #0
 80041f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041f8:	f7fc f862 	bl	80002c0 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004204:	e058      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b38      	ldr	r3, [pc, #224]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	2200      	movs	r2, #0
 800420e:	4618      	mov	r0, r3
 8004210:	4611      	mov	r1, r2
 8004212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
 800421c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	0159      	lsls	r1, r3, #5
 800422e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004232:	0150      	lsls	r0, r2, #5
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4641      	mov	r1, r8
 800423a:	ebb2 0a01 	subs.w	sl, r2, r1
 800423e:	4649      	mov	r1, r9
 8004240:	eb63 0b01 	sbc.w	fp, r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004258:	ebb2 040a 	subs.w	r4, r2, sl
 800425c:	eb63 050b 	sbc.w	r5, r3, fp
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	00eb      	lsls	r3, r5, #3
 800426a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426e:	00e2      	lsls	r2, r4, #3
 8004270:	4614      	mov	r4, r2
 8004272:	461d      	mov	r5, r3
 8004274:	4643      	mov	r3, r8
 8004276:	18e3      	adds	r3, r4, r3
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	464b      	mov	r3, r9
 800427c:	eb45 0303 	adc.w	r3, r5, r3
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428e:	4629      	mov	r1, r5
 8004290:	028b      	lsls	r3, r1, #10
 8004292:	4621      	mov	r1, r4
 8004294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004298:	4621      	mov	r1, r4
 800429a:	028a      	lsls	r2, r1, #10
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a2:	2200      	movs	r2, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	61fa      	str	r2, [r7, #28]
 80042a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ac:	f7fc f808 	bl	80002c0 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042b8:	4b0b      	ldr	r3, [pc, #44]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x204>)
 80042d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3750      	adds	r7, #80	@ 0x50
 80042e0:	46bd      	mov	sp, r7
 80042e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	007a1200 	.word	0x007a1200

080042f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	@ (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000028 	.word	0x20000028

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	@ (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	08019b30 	.word	0x08019b30

08004334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	220f      	movs	r2, #15
 8004342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004344:	4b12      	ldr	r3, [pc, #72]	@ (8004390 <HAL_RCC_GetClockConfig+0x5c>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004350:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <HAL_RCC_GetClockConfig+0x5c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004368:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <HAL_RCC_GetClockConfig+0x5c>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <HAL_RCC_GetClockConfig+0x60>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	601a      	str	r2, [r3, #0]
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	40023c00 	.word	0x40023c00

08004398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e041      	b.n	800442e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fd faa4 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 fae6 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d001      	beq.n	8004450 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e046      	b.n	80044de <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a23      	ldr	r2, [pc, #140]	@ (80044ec <HAL_TIM_Base_Start+0xb4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d022      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446a:	d01d      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1f      	ldr	r2, [pc, #124]	@ (80044f0 <HAL_TIM_Base_Start+0xb8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <HAL_TIM_Base_Start+0xbc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1c      	ldr	r2, [pc, #112]	@ (80044f8 <HAL_TIM_Base_Start+0xc0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1b      	ldr	r2, [pc, #108]	@ (80044fc <HAL_TIM_Base_Start+0xc4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <HAL_TIM_Base_Start+0xc8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a18      	ldr	r2, [pc, #96]	@ (8004504 <HAL_TIM_Base_Start+0xcc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d111      	bne.n	80044cc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d010      	beq.n	80044dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ca:	e007      	b.n	80044dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	40010400 	.word	0x40010400
 8004500:	40014000 	.word	0x40014000
 8004504:	40001800 	.word	0x40001800

08004508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d001      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e04e      	b.n	80045be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a23      	ldr	r2, [pc, #140]	@ (80045cc <HAL_TIM_Base_Start_IT+0xc4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d022      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454a:	d01d      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1e      	ldr	r2, [pc, #120]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1c      	ldr	r2, [pc, #112]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a19      	ldr	r2, [pc, #100]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0x80>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a18      	ldr	r2, [pc, #96]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d010      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	e007      	b.n	80045bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40001800 	.word	0x40001800

080045e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d020      	beq.n	800464c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01b      	beq.n	800464c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0202 	mvn.w	r2, #2
 800461c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f999 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f98b 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f99c 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d020      	beq.n	8004698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01b      	beq.n	8004698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0204 	mvn.w	r2, #4
 8004668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f973 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 8004684:	e005      	b.n	8004692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f965 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f976 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d020      	beq.n	80046e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01b      	beq.n	80046e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0208 	mvn.w	r2, #8
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2204      	movs	r2, #4
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f94d 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f93f 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f950 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d020      	beq.n	8004730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01b      	beq.n	8004730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0210 	mvn.w	r2, #16
 8004700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2208      	movs	r2, #8
 8004706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f927 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 800471c:	e005      	b.n	800472a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f919 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f92a 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0201 	mvn.w	r2, #1
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd f898 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fade 	bl	8004d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8fb 	bl	8004992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0220 	mvn.w	r2, #32
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fab0 	bl	8004d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e0b4      	b.n	800494e <HAL_TIM_ConfigClockSource+0x186>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800480a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800481c:	d03e      	beq.n	800489c <HAL_TIM_ConfigClockSource+0xd4>
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004822:	f200 8087 	bhi.w	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482a:	f000 8086 	beq.w	800493a <HAL_TIM_ConfigClockSource+0x172>
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004832:	d87f      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b70      	cmp	r3, #112	@ 0x70
 8004836:	d01a      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xa6>
 8004838:	2b70      	cmp	r3, #112	@ 0x70
 800483a:	d87b      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b60      	cmp	r3, #96	@ 0x60
 800483e:	d050      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004840:	2b60      	cmp	r3, #96	@ 0x60
 8004842:	d877      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b50      	cmp	r3, #80	@ 0x50
 8004846:	d03c      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004848:	2b50      	cmp	r3, #80	@ 0x50
 800484a:	d873      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b40      	cmp	r3, #64	@ 0x40
 800484e:	d058      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x13a>
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d86f      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b30      	cmp	r3, #48	@ 0x30
 8004856:	d064      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	2b30      	cmp	r3, #48	@ 0x30
 800485a:	d86b      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b20      	cmp	r3, #32
 800485e:	d060      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004860:	2b20      	cmp	r3, #32
 8004862:	d867      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d05c      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004868:	2b10      	cmp	r3, #16
 800486a:	d05a      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	e062      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800487e:	f000 f9b3 	bl	8004be8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	609a      	str	r2, [r3, #8]
      break;
 800489a:	e04f      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ac:	f000 f99c 	bl	8004be8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048be:	609a      	str	r2, [r3, #8]
      break;
 80048c0:	e03c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 f910 	bl	8004af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2150      	movs	r1, #80	@ 0x50
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f969 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 80048e0:	e02c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 f92f 	bl	8004b52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2160      	movs	r1, #96	@ 0x60
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f959 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 8004900:	e01c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	461a      	mov	r2, r3
 8004910:	f000 f8f0 	bl	8004af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2140      	movs	r1, #64	@ 0x40
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f949 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 8004920:	e00c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f000 f940 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 8004932:	e003      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
      break;
 8004938:	e000      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800493a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a43      	ldr	r2, [pc, #268]	@ (8004ac8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c6:	d00f      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a40      	ldr	r2, [pc, #256]	@ (8004acc <TIM_Base_SetConfig+0x124>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ad0 <TIM_Base_SetConfig+0x128>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3e      	ldr	r2, [pc, #248]	@ (8004ad4 <TIM_Base_SetConfig+0x12c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ad8 <TIM_Base_SetConfig+0x130>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a32      	ldr	r2, [pc, #200]	@ (8004ac8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a08:	d027      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004acc <TIM_Base_SetConfig+0x124>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d023      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad0 <TIM_Base_SetConfig+0x128>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01f      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad4 <TIM_Base_SetConfig+0x12c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad8 <TIM_Base_SetConfig+0x130>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d017      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004adc <TIM_Base_SetConfig+0x134>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <TIM_Base_SetConfig+0x138>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a29      	ldr	r2, [pc, #164]	@ (8004ae4 <TIM_Base_SetConfig+0x13c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a28      	ldr	r2, [pc, #160]	@ (8004ae8 <TIM_Base_SetConfig+0x140>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a27      	ldr	r2, [pc, #156]	@ (8004aec <TIM_Base_SetConfig+0x144>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a26      	ldr	r2, [pc, #152]	@ (8004af0 <TIM_Base_SetConfig+0x148>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac8 <TIM_Base_SetConfig+0x120>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_Base_SetConfig+0xf2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a10      	ldr	r2, [pc, #64]	@ (8004ad8 <TIM_Base_SetConfig+0x130>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d103      	bne.n	8004aa2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40010400 	.word	0x40010400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800
 8004ae8:	40001800 	.word	0x40001800
 8004aec:	40001c00 	.word	0x40001c00
 8004af0:	40002000 	.word	0x40002000

08004af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 030a 	bic.w	r3, r3, #10
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b087      	sub	sp, #28
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f023 0210 	bic.w	r2, r3, #16
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	031b      	lsls	r3, r3, #12
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f043 0307 	orr.w	r3, r3, #7
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e05a      	b.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a21      	ldr	r2, [pc, #132]	@ (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d022      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8c:	d01d      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1d      	ldr	r2, [pc, #116]	@ (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d018      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00e      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	@ (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a17      	ldr	r2, [pc, #92]	@ (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a15      	ldr	r2, [pc, #84]	@ (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40010400 	.word	0x40010400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40001800 	.word	0x40001800

08004d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004d48:	b5b0      	push	{r4, r5, r7, lr}
 8004d4a:	b08c      	sub	sp, #48	@ 0x30
 8004d4c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004d4e:	4b8f      	ldr	r3, [pc, #572]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004d50:	22c0      	movs	r2, #192	@ 0xc0
 8004d52:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004d54:	4b8d      	ldr	r3, [pc, #564]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004d56:	22a8      	movs	r2, #168	@ 0xa8
 8004d58:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8004d5a:	4b8c      	ldr	r3, [pc, #560]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004d5c:	2264      	movs	r2, #100	@ 0x64
 8004d5e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8004d60:	4b8a      	ldr	r3, [pc, #552]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004d62:	227b      	movs	r2, #123	@ 0x7b
 8004d64:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004d66:	4b8a      	ldr	r3, [pc, #552]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004d68:	22ff      	movs	r2, #255	@ 0xff
 8004d6a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004d6c:	4b88      	ldr	r3, [pc, #544]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004d6e:	22ff      	movs	r2, #255	@ 0xff
 8004d70:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004d72:	4b87      	ldr	r3, [pc, #540]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004d74:	22ff      	movs	r2, #255	@ 0xff
 8004d76:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004d78:	4b85      	ldr	r3, [pc, #532]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004d7e:	4b85      	ldr	r3, [pc, #532]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004d80:	22c0      	movs	r2, #192	@ 0xc0
 8004d82:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004d84:	4b83      	ldr	r3, [pc, #524]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004d86:	22a8      	movs	r2, #168	@ 0xa8
 8004d88:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 8004d8a:	4b82      	ldr	r3, [pc, #520]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004d8c:	2264      	movs	r2, #100	@ 0x64
 8004d8e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004d90:	4b80      	ldr	r3, [pc, #512]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004d96:	2100      	movs	r1, #0
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f003 fed5 	bl	8008b48 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d9e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	061a      	lsls	r2, r3, #24
 8004da4:	4b79      	ldr	r3, [pc, #484]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	431a      	orrs	r2, r3
 8004dac:	4b77      	ldr	r3, [pc, #476]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004dae:	789b      	ldrb	r3, [r3, #2]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	4313      	orrs	r3, r2
 8004db4:	4a75      	ldr	r2, [pc, #468]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004db6:	78d2      	ldrb	r2, [r2, #3]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	061a      	lsls	r2, r3, #24
 8004dbc:	4b73      	ldr	r3, [pc, #460]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	0619      	lsls	r1, r3, #24
 8004dc2:	4b72      	ldr	r3, [pc, #456]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	4319      	orrs	r1, r3
 8004dca:	4b70      	ldr	r3, [pc, #448]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004dcc:	789b      	ldrb	r3, [r3, #2]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	496e      	ldr	r1, [pc, #440]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004dd4:	78c9      	ldrb	r1, [r1, #3]
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004dde:	431a      	orrs	r2, r3
 8004de0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	0619      	lsls	r1, r3, #24
 8004de6:	4b69      	ldr	r3, [pc, #420]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	4319      	orrs	r1, r3
 8004dee:	4b67      	ldr	r3, [pc, #412]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004df0:	789b      	ldrb	r3, [r3, #2]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	430b      	orrs	r3, r1
 8004df6:	4965      	ldr	r1, [pc, #404]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004df8:	78c9      	ldrb	r1, [r1, #3]
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e02:	431a      	orrs	r2, r3
 8004e04:	4b61      	ldr	r3, [pc, #388]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	0619      	lsls	r1, r3, #24
 8004e0a:	4b60      	ldr	r3, [pc, #384]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	4319      	orrs	r1, r3
 8004e12:	4b5e      	ldr	r3, [pc, #376]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004e14:	789b      	ldrb	r3, [r3, #2]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	495c      	ldr	r1, [pc, #368]	@ (8004f8c <MX_LWIP_Init+0x244>)
 8004e1c:	78c9      	ldrb	r1, [r1, #3]
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	0e1b      	lsrs	r3, r3, #24
 8004e22:	4313      	orrs	r3, r2
 8004e24:	4a5c      	ldr	r2, [pc, #368]	@ (8004f98 <MX_LWIP_Init+0x250>)
 8004e26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004e28:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	061a      	lsls	r2, r3, #24
 8004e2e:	4b58      	ldr	r3, [pc, #352]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	431a      	orrs	r2, r3
 8004e36:	4b56      	ldr	r3, [pc, #344]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e38:	789b      	ldrb	r3, [r3, #2]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	4a54      	ldr	r2, [pc, #336]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e40:	78d2      	ldrb	r2, [r2, #3]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	061a      	lsls	r2, r3, #24
 8004e46:	4b52      	ldr	r3, [pc, #328]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	0619      	lsls	r1, r3, #24
 8004e4c:	4b50      	ldr	r3, [pc, #320]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	4319      	orrs	r1, r3
 8004e54:	4b4e      	ldr	r3, [pc, #312]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e56:	789b      	ldrb	r3, [r3, #2]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	494c      	ldr	r1, [pc, #304]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e5e:	78c9      	ldrb	r1, [r1, #3]
 8004e60:	430b      	orrs	r3, r1
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	4b49      	ldr	r3, [pc, #292]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	0619      	lsls	r1, r3, #24
 8004e70:	4b47      	ldr	r3, [pc, #284]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	4319      	orrs	r1, r3
 8004e78:	4b45      	ldr	r3, [pc, #276]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e7a:	789b      	ldrb	r3, [r3, #2]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	4943      	ldr	r1, [pc, #268]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e82:	78c9      	ldrb	r1, [r1, #3]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	4b40      	ldr	r3, [pc, #256]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	0619      	lsls	r1, r3, #24
 8004e94:	4b3e      	ldr	r3, [pc, #248]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	4319      	orrs	r1, r3
 8004e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004e9e:	789b      	ldrb	r3, [r3, #2]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	493a      	ldr	r1, [pc, #232]	@ (8004f90 <MX_LWIP_Init+0x248>)
 8004ea6:	78c9      	ldrb	r1, [r1, #3]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	0e1b      	lsrs	r3, r3, #24
 8004eac:	4313      	orrs	r3, r2
 8004eae:	4a3b      	ldr	r2, [pc, #236]	@ (8004f9c <MX_LWIP_Init+0x254>)
 8004eb0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004eb2:	4b38      	ldr	r3, [pc, #224]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	061a      	lsls	r2, r3, #24
 8004eb8:	4b36      	ldr	r3, [pc, #216]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	4b34      	ldr	r3, [pc, #208]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004ec2:	789b      	ldrb	r3, [r3, #2]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	4a32      	ldr	r2, [pc, #200]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004eca:	78d2      	ldrb	r2, [r2, #3]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	061a      	lsls	r2, r3, #24
 8004ed0:	4b30      	ldr	r3, [pc, #192]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	0619      	lsls	r1, r3, #24
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	4319      	orrs	r1, r3
 8004ede:	4b2d      	ldr	r3, [pc, #180]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004ee0:	789b      	ldrb	r3, [r3, #2]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	492b      	ldr	r1, [pc, #172]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004ee8:	78c9      	ldrb	r1, [r1, #3]
 8004eea:	430b      	orrs	r3, r1
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	4b27      	ldr	r3, [pc, #156]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	0619      	lsls	r1, r3, #24
 8004efa:	4b26      	ldr	r3, [pc, #152]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	4319      	orrs	r1, r3
 8004f02:	4b24      	ldr	r3, [pc, #144]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004f04:	789b      	ldrb	r3, [r3, #2]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	4922      	ldr	r1, [pc, #136]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004f0c:	78c9      	ldrb	r1, [r1, #3]
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004f16:	431a      	orrs	r2, r3
 8004f18:	4b1e      	ldr	r3, [pc, #120]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	0619      	lsls	r1, r3, #24
 8004f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	4319      	orrs	r1, r3
 8004f26:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004f28:	789b      	ldrb	r3, [r3, #2]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	4919      	ldr	r1, [pc, #100]	@ (8004f94 <MX_LWIP_Init+0x24c>)
 8004f30:	78c9      	ldrb	r1, [r1, #3]
 8004f32:	430b      	orrs	r3, r1
 8004f34:	0e1b      	lsrs	r3, r3, #24
 8004f36:	4313      	orrs	r3, r2
 8004f38:	4a19      	ldr	r2, [pc, #100]	@ (8004fa0 <MX_LWIP_Init+0x258>)
 8004f3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004f3c:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <MX_LWIP_Init+0x25c>)
 8004f3e:	9302      	str	r3, [sp, #8]
 8004f40:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <MX_LWIP_Init+0x260>)
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	2300      	movs	r3, #0
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <MX_LWIP_Init+0x258>)
 8004f4a:	4a14      	ldr	r2, [pc, #80]	@ (8004f9c <MX_LWIP_Init+0x254>)
 8004f4c:	4912      	ldr	r1, [pc, #72]	@ (8004f98 <MX_LWIP_Init+0x250>)
 8004f4e:	4817      	ldr	r0, [pc, #92]	@ (8004fac <MX_LWIP_Init+0x264>)
 8004f50:	f005 ffd4 	bl	800aefc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004f54:	4815      	ldr	r0, [pc, #84]	@ (8004fac <MX_LWIP_Init+0x264>)
 8004f56:	f006 f983 	bl	800b260 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004f5a:	4814      	ldr	r0, [pc, #80]	@ (8004fac <MX_LWIP_Init+0x264>)
 8004f5c:	f006 f990 	bl	800b280 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004f60:	4913      	ldr	r1, [pc, #76]	@ (8004fb0 <MX_LWIP_Init+0x268>)
 8004f62:	4812      	ldr	r0, [pc, #72]	@ (8004fac <MX_LWIP_Init+0x264>)
 8004f64:	f006 fa8e 	bl	800b484 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004f68:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <MX_LWIP_Init+0x26c>)
 8004f6a:	1d3c      	adds	r4, r7, #4
 8004f6c:	461d      	mov	r5, r3
 8004f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004f7a:	1d3b      	adds	r3, r7, #4
 8004f7c:	490b      	ldr	r1, [pc, #44]	@ (8004fac <MX_LWIP_Init+0x264>)
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fd5e 	bl	8005a40 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f84:	bf00      	nop
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f8c:	2000049c 	.word	0x2000049c
 8004f90:	200004a0 	.word	0x200004a0
 8004f94:	200004a4 	.word	0x200004a4
 8004f98:	20000490 	.word	0x20000490
 8004f9c:	20000494 	.word	0x20000494
 8004fa0:	20000498 	.word	0x20000498
 8004fa4:	08008a85 	.word	0x08008a85
 8004fa8:	080054c9 	.word	0x080054c9
 8004fac:	2000045c 	.word	0x2000045c
 8004fb0:	08004fb9 	.word	0x08004fb9
 8004fb4:	08016ccc 	.word	0x08016ccc

08004fb8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004fd4:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <HAL_ETH_RxCpltCallback+0x1c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fead 	bl	8005d38 <osSemaphoreRelease>
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20004f74 	.word	0x20004f74

08004fec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004ff4:	4b04      	ldr	r3, [pc, #16]	@ (8005008 <HAL_ETH_TxCpltCallback+0x1c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fe9d 	bl	8005d38 <osSemaphoreRelease>
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20004f78 	.word	0x20004f78

0800500c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fd fee2 	bl	8002dde <HAL_ETH_GetDMAError>
 800501a:	4603      	mov	r3, r0
 800501c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005020:	2b80      	cmp	r3, #128	@ 0x80
 8005022:	d104      	bne.n	800502e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005024:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <HAL_ETH_ErrorCallback+0x2c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fe85 	bl	8005d38 <osSemaphoreRelease>
  }
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20004f74 	.word	0x20004f74

0800503c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800503c:	b5b0      	push	{r4, r5, r7, lr}
 800503e:	b0ac      	sub	sp, #176	@ 0xb0
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8005056:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800505a:	2264      	movs	r2, #100	@ 0x64
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f010 faee 	bl	8015640 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005064:	4b94      	ldr	r3, [pc, #592]	@ (80052b8 <low_level_init+0x27c>)
 8005066:	4a95      	ldr	r2, [pc, #596]	@ (80052bc <low_level_init+0x280>)
 8005068:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8005076:	23e1      	movs	r3, #225	@ 0xe1
 8005078:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 8005082:	2300      	movs	r3, #0
 8005084:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8005088:	2300      	movs	r3, #0
 800508a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800508e:	4a8a      	ldr	r2, [pc, #552]	@ (80052b8 <low_level_init+0x27c>)
 8005090:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005094:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005096:	4b88      	ldr	r3, [pc, #544]	@ (80052b8 <low_level_init+0x27c>)
 8005098:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800509c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800509e:	4b86      	ldr	r3, [pc, #536]	@ (80052b8 <low_level_init+0x27c>)
 80050a0:	4a87      	ldr	r2, [pc, #540]	@ (80052c0 <low_level_init+0x284>)
 80050a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80050a4:	4b84      	ldr	r3, [pc, #528]	@ (80052b8 <low_level_init+0x27c>)
 80050a6:	4a87      	ldr	r2, [pc, #540]	@ (80052c4 <low_level_init+0x288>)
 80050a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80050aa:	4b83      	ldr	r3, [pc, #524]	@ (80052b8 <low_level_init+0x27c>)
 80050ac:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80050b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80050b2:	4881      	ldr	r0, [pc, #516]	@ (80052b8 <low_level_init+0x27c>)
 80050b4:	f7fd f84a 	bl	800214c <HAL_ETH_Init>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80050be:	2238      	movs	r2, #56	@ 0x38
 80050c0:	2100      	movs	r1, #0
 80050c2:	4881      	ldr	r0, [pc, #516]	@ (80052c8 <low_level_init+0x28c>)
 80050c4:	f010 fabc 	bl	8015640 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80050c8:	4b7f      	ldr	r3, [pc, #508]	@ (80052c8 <low_level_init+0x28c>)
 80050ca:	2221      	movs	r2, #33	@ 0x21
 80050cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80050ce:	4b7e      	ldr	r3, [pc, #504]	@ (80052c8 <low_level_init+0x28c>)
 80050d0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80050d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80050d6:	4b7c      	ldr	r3, [pc, #496]	@ (80052c8 <low_level_init+0x28c>)
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80050dc:	487b      	ldr	r0, [pc, #492]	@ (80052cc <low_level_init+0x290>)
 80050de:	f005 fdc7 	bl	800ac70 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2206      	movs	r2, #6
 80050e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80050ea:	4b73      	ldr	r3, [pc, #460]	@ (80052b8 <low_level_init+0x27c>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	781a      	ldrb	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80050f6:	4b70      	ldr	r3, [pc, #448]	@ (80052b8 <low_level_init+0x27c>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	785a      	ldrb	r2, [r3, #1]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005102:	4b6d      	ldr	r3, [pc, #436]	@ (80052b8 <low_level_init+0x27c>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	789a      	ldrb	r2, [r3, #2]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800510e:	4b6a      	ldr	r3, [pc, #424]	@ (80052b8 <low_level_init+0x27c>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	78da      	ldrb	r2, [r3, #3]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800511a:	4b67      	ldr	r3, [pc, #412]	@ (80052b8 <low_level_init+0x27c>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	791a      	ldrb	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005126:	4b64      	ldr	r3, [pc, #400]	@ (80052b8 <low_level_init+0x27c>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	795a      	ldrb	r2, [r3, #5]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005138:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005140:	f043 030a 	orr.w	r3, r3, #10
 8005144:	b2da      	uxtb	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800514c:	2300      	movs	r3, #0
 800514e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005150:	2300      	movs	r3, #0
 8005152:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8005154:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005158:	2101      	movs	r1, #1
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fd6c 	bl	8005c38 <osSemaphoreCreate>
 8005160:	4603      	mov	r3, r0
 8005162:	4a5b      	ldr	r2, [pc, #364]	@ (80052d0 <low_level_init+0x294>)
 8005164:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
 800516a:	2300      	movs	r3, #0
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800516e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005172:	2101      	movs	r1, #1
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fd5f 	bl	8005c38 <osSemaphoreCreate>
 800517a:	4603      	mov	r3, r0
 800517c:	4a55      	ldr	r2, [pc, #340]	@ (80052d4 <low_level_init+0x298>)
 800517e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8005180:	4b53      	ldr	r3, [pc, #332]	@ (80052d0 <low_level_init+0x294>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fd88 	bl	8005c9c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800518c:	4b51      	ldr	r3, [pc, #324]	@ (80052d4 <low_level_init+0x298>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2100      	movs	r1, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fd82 	bl	8005c9c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005198:	4b4f      	ldr	r3, [pc, #316]	@ (80052d8 <low_level_init+0x29c>)
 800519a:	f107 0408 	add.w	r4, r7, #8
 800519e:	461d      	mov	r5, r3
 80051a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80051a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fc44 	bl	8005a40 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80051b8:	4948      	ldr	r1, [pc, #288]	@ (80052dc <low_level_init+0x2a0>)
 80051ba:	4849      	ldr	r0, [pc, #292]	@ (80052e0 <low_level_init+0x2a4>)
 80051bc:	f7fc fd77 	bl	8001cae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80051c0:	4847      	ldr	r0, [pc, #284]	@ (80052e0 <low_level_init+0x2a4>)
 80051c2:	f7fc fda6 	bl	8001d12 <LAN8742_Init>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d006      	beq.n	80051da <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f006 f929 	bl	800b424 <netif_set_link_down>
    netif_set_down(netif);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f006 f8c0 	bl	800b358 <netif_set_down>
 80051d8:	e06b      	b.n	80052b2 <low_level_init+0x276>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80051da:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d165      	bne.n	80052ae <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80051e2:	483f      	ldr	r0, [pc, #252]	@ (80052e0 <low_level_init+0x2a4>)
 80051e4:	f7fc fde2 	bl	8001dac <LAN8742_GetLinkState>
 80051e8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80051ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	dc06      	bgt.n	8005202 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f006 f915 	bl	800b424 <netif_set_link_down>
      netif_set_down(netif);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f006 f8ac 	bl	800b358 <netif_set_down>
 8005200:	e057      	b.n	80052b2 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8005202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005206:	3b02      	subs	r3, #2
 8005208:	2b03      	cmp	r3, #3
 800520a:	d82b      	bhi.n	8005264 <low_level_init+0x228>
 800520c:	a201      	add	r2, pc, #4	@ (adr r2, 8005214 <low_level_init+0x1d8>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005225 	.word	0x08005225
 8005218:	08005237 	.word	0x08005237
 800521c:	08005247 	.word	0x08005247
 8005220:	08005257 	.word	0x08005257
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005224:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005228:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800522c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005234:	e01f      	b.n	8005276 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800523c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005244:	e017      	b.n	8005276 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005246:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800524a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800524e:	2300      	movs	r3, #0
 8005250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005254:	e00f      	b.n	8005276 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005256:	2300      	movs	r3, #0
 8005258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800525c:	2300      	movs	r3, #0
 800525e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005262:	e008      	b.n	8005276 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8005264:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005268:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800526c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005270:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005274:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005276:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800527a:	4619      	mov	r1, r3
 800527c:	480e      	ldr	r0, [pc, #56]	@ (80052b8 <low_level_init+0x27c>)
 800527e:	f7fd fc4d 	bl	8002b1c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005286:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8005288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800528c:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800528e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005292:	4619      	mov	r1, r3
 8005294:	4808      	ldr	r0, [pc, #32]	@ (80052b8 <low_level_init+0x27c>)
 8005296:	f7fd fd38 	bl	8002d0a <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800529a:	4807      	ldr	r0, [pc, #28]	@ (80052b8 <low_level_init+0x27c>)
 800529c:	f7fc fff2 	bl	8002284 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f005 ffed 	bl	800b280 <netif_set_up>
    netif_set_link_up(netif);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f006 f888 	bl	800b3bc <netif_set_link_up>
 80052ac:	e001      	b.n	80052b2 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 80052ae:	f7fc fafb 	bl	80018a8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80052b2:	37b0      	adds	r7, #176	@ 0xb0
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bdb0      	pop	{r4, r5, r7, pc}
 80052b8:	20004f7c 	.word	0x20004f7c
 80052bc:	40028000 	.word	0x40028000
 80052c0:	20004ed4 	.word	0x20004ed4
 80052c4:	20004e34 	.word	0x20004e34
 80052c8:	2000502c 	.word	0x2000502c
 80052cc:	08019b38 	.word	0x08019b38
 80052d0:	20004f74 	.word	0x20004f74
 80052d4:	20004f78 	.word	0x20004f78
 80052d8:	08016cf0 	.word	0x08016cf0
 80052dc:	20000034 	.word	0x20000034
 80052e0:	20005064 	.word	0x20005064

080052e4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b092      	sub	sp, #72	@ 0x48
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	2230      	movs	r2, #48	@ 0x30
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f010 f99b 	bl	8015640 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	2230      	movs	r2, #48	@ 0x30
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f010 f994 	bl	8015640 <memset>

  for(q = p; q != NULL; q = q->next)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	643b      	str	r3, [r7, #64]	@ 0x40
 800531c:	e045      	b.n	80053aa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800531e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005320:	2b03      	cmp	r3, #3
 8005322:	d902      	bls.n	800532a <low_level_output+0x46>
      return ERR_IF;
 8005324:	f06f 030b 	mvn.w	r3, #11
 8005328:	e07f      	b.n	800542a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800532a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005330:	4613      	mov	r3, r2
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	3348      	adds	r3, #72	@ 0x48
 800533a:	443b      	add	r3, r7
 800533c:	3b3c      	subs	r3, #60	@ 0x3c
 800533e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005342:	895b      	ldrh	r3, [r3, #10]
 8005344:	4619      	mov	r1, r3
 8005346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005348:	4613      	mov	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	3348      	adds	r3, #72	@ 0x48
 8005352:	443b      	add	r3, r7
 8005354:	3b38      	subs	r3, #56	@ 0x38
 8005356:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800535a:	2b00      	cmp	r3, #0
 800535c:	d011      	beq.n	8005382 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800535e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	f107 000c 	add.w	r0, r7, #12
 8005366:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005368:	460b      	mov	r3, r1
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	440b      	add	r3, r1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	18c1      	adds	r1, r0, r3
 8005372:	4613      	mov	r3, r2
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	3348      	adds	r3, #72	@ 0x48
 800537c:	443b      	add	r3, r7
 800537e:	3b34      	subs	r3, #52	@ 0x34
 8005380:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800538a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800538c:	4613      	mov	r3, r2
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	3348      	adds	r3, #72	@ 0x48
 8005396:	443b      	add	r3, r7
 8005398:	3b34      	subs	r3, #52	@ 0x34
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800539e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a0:	3301      	adds	r3, #1
 80053a2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80053a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80053aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1b6      	bne.n	800531e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	891b      	ldrh	r3, [r3, #8]
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005434 <low_level_output+0x150>)
 80053b8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80053ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005434 <low_level_output+0x150>)
 80053bc:	f107 030c 	add.w	r3, r7, #12
 80053c0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80053c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <low_level_output+0x150>)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80053c8:	6838      	ldr	r0, [r7, #0]
 80053ca:	f006 fcaf 	bl	800bd2c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80053ce:	4919      	ldr	r1, [pc, #100]	@ (8005434 <low_level_output+0x150>)
 80053d0:	4819      	ldr	r0, [pc, #100]	@ (8005438 <low_level_output+0x154>)
 80053d2:	f7fd f846 	bl	8002462 <HAL_ETH_Transmit_IT>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80053e2:	e01b      	b.n	800541c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 80053e4:	4814      	ldr	r0, [pc, #80]	@ (8005438 <low_level_output+0x154>)
 80053e6:	f7fd fced 	bl	8002dc4 <HAL_ETH_GetError>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 80053f4:	4b11      	ldr	r3, [pc, #68]	@ (800543c <low_level_output+0x158>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fc4d 	bl	8005c9c <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8005402:	480d      	ldr	r0, [pc, #52]	@ (8005438 <low_level_output+0x154>)
 8005404:	f7fd f9cc 	bl	80027a0 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8005408:	23fe      	movs	r3, #254	@ 0xfe
 800540a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800540e:	e005      	b.n	800541c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8005410:	6838      	ldr	r0, [r7, #0]
 8005412:	f006 fbe5 	bl	800bbe0 <pbuf_free>
        errval =  ERR_IF;
 8005416:	23f4      	movs	r3, #244	@ 0xf4
 8005418:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800541c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005420:	f113 0f02 	cmn.w	r3, #2
 8005424:	d0d3      	beq.n	80053ce <low_level_output+0xea>

  return errval;
 8005426:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800542a:	4618      	mov	r0, r3
 800542c:	3748      	adds	r7, #72	@ 0x48
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	2000502c 	.word	0x2000502c
 8005438:	20004f7c 	.word	0x20004f7c
 800543c:	20004f78 	.word	0x20004f78

08005440 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800544c:	4b07      	ldr	r3, [pc, #28]	@ (800546c <low_level_input+0x2c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	4619      	mov	r1, r3
 800545a:	4805      	ldr	r0, [pc, #20]	@ (8005470 <low_level_input+0x30>)
 800545c:	f7fd f85d 	bl	800251a <HAL_ETH_ReadData>
  }

  return p;
 8005460:	68fb      	ldr	r3, [r7, #12]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20004e30 	.word	0x20004e30
 8005470:	20004f7c 	.word	0x20004f7c

08005474 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005484:	4b0f      	ldr	r3, [pc, #60]	@ (80054c4 <ethernetif_input+0x50>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f04f 31ff 	mov.w	r1, #4294967295
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fc05 	bl	8005c9c <osSemaphoreWait>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f5      	bne.n	8005484 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005498:	68b8      	ldr	r0, [r7, #8]
 800549a:	f7ff ffd1 	bl	8005440 <low_level_input>
 800549e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	4798      	blx	r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f006 fb92 	bl	800bbe0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1ea      	bne.n	8005498 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80054c2:	e7df      	b.n	8005484 <ethernetif_input+0x10>
 80054c4:	20004f74 	.word	0x20004f74

080054c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <ethernetif_init+0x1c>
 80054d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005510 <ethernetif_init+0x48>)
 80054d8:	f240 12fd 	movw	r2, #509	@ 0x1fd
 80054dc:	490d      	ldr	r1, [pc, #52]	@ (8005514 <ethernetif_init+0x4c>)
 80054de:	480e      	ldr	r0, [pc, #56]	@ (8005518 <ethernetif_init+0x50>)
 80054e0:	f00f ff06 	bl	80152f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2273      	movs	r2, #115	@ 0x73
 80054e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2274      	movs	r2, #116	@ 0x74
 80054f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a09      	ldr	r2, [pc, #36]	@ (800551c <ethernetif_init+0x54>)
 80054f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a08      	ldr	r2, [pc, #32]	@ (8005520 <ethernetif_init+0x58>)
 80054fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff fd9b 	bl	800503c <low_level_init>

  return ERR_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	08016d0c 	.word	0x08016d0c
 8005514:	08016d28 	.word	0x08016d28
 8005518:	08016d38 	.word	0x08016d38
 800551c:	080130c1 	.word	0x080130c1
 8005520:	080052e5 	.word	0x080052e5

08005524 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005530:	68f9      	ldr	r1, [r7, #12]
 8005532:	4809      	ldr	r0, [pc, #36]	@ (8005558 <pbuf_free_custom+0x34>)
 8005534:	f005 fc8c 	bl	800ae50 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005538:	4b08      	ldr	r3, [pc, #32]	@ (800555c <pbuf_free_custom+0x38>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005540:	4b06      	ldr	r3, [pc, #24]	@ (800555c <pbuf_free_custom+0x38>)
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005546:	4b06      	ldr	r3, [pc, #24]	@ (8005560 <pbuf_free_custom+0x3c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fbf4 	bl	8005d38 <osSemaphoreRelease>
  }
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08019b38 	.word	0x08019b38
 800555c:	20004e30 	.word	0x20004e30
 8005560:	20004f74 	.word	0x20004f74

08005564 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005568:	f7fc fcde 	bl	8001f28 <HAL_GetTick>
 800556c:	4603      	mov	r3, r0
}
 800556e:	4618      	mov	r0, r3
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08e      	sub	sp, #56	@ 0x38
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800557c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	60da      	str	r2, [r3, #12]
 800558a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a59      	ldr	r2, [pc, #356]	@ (80056f8 <HAL_ETH_MspInit+0x184>)
 8005592:	4293      	cmp	r3, r2
 8005594:	f040 80ac 	bne.w	80056f0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005598:	2300      	movs	r3, #0
 800559a:	623b      	str	r3, [r7, #32]
 800559c:	4b57      	ldr	r3, [pc, #348]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a0:	4a56      	ldr	r2, [pc, #344]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80055a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80055a8:	4b54      	ldr	r3, [pc, #336]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	4b50      	ldr	r3, [pc, #320]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055bc:	4a4f      	ldr	r2, [pc, #316]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80055c4:	4b4d      	ldr	r3, [pc, #308]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	4b49      	ldr	r3, [pc, #292]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d8:	4a48      	ldr	r2, [pc, #288]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055de:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e0:	4b46      	ldr	r3, [pc, #280]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	4b42      	ldr	r3, [pc, #264]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f4:	4a41      	ldr	r2, [pc, #260]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80055fc:	4b3f      	ldr	r3, [pc, #252]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 80055fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	4b3b      	ldr	r3, [pc, #236]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 800560e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005610:	4a3a      	ldr	r2, [pc, #232]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6313      	str	r3, [r2, #48]	@ 0x30
 8005618:	4b38      	ldr	r3, [pc, #224]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	4b34      	ldr	r3, [pc, #208]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	4a33      	ldr	r2, [pc, #204]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 800562e:	f043 0302 	orr.w	r3, r3, #2
 8005632:	6313      	str	r3, [r2, #48]	@ 0x30
 8005634:	4b31      	ldr	r3, [pc, #196]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005640:	2300      	movs	r3, #0
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005648:	4a2c      	ldr	r2, [pc, #176]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 800564a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800564e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005650:	4b2a      	ldr	r3, [pc, #168]	@ (80056fc <HAL_ETH_MspInit+0x188>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800565c:	2332      	movs	r3, #50	@ 0x32
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005660:	2302      	movs	r3, #2
 8005662:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	2300      	movs	r3, #0
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005668:	2303      	movs	r3, #3
 800566a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800566c:	230b      	movs	r3, #11
 800566e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005674:	4619      	mov	r1, r3
 8005676:	4822      	ldr	r0, [pc, #136]	@ (8005700 <HAL_ETH_MspInit+0x18c>)
 8005678:	f7fd ffe0 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800567c:	2386      	movs	r3, #134	@ 0x86
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005680:	2302      	movs	r3, #2
 8005682:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005684:	2300      	movs	r3, #0
 8005686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005688:	2303      	movs	r3, #3
 800568a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800568c:	230b      	movs	r3, #11
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005694:	4619      	mov	r1, r3
 8005696:	481b      	ldr	r0, [pc, #108]	@ (8005704 <HAL_ETH_MspInit+0x190>)
 8005698:	f7fd ffd0 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800569c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a2:	2302      	movs	r3, #2
 80056a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056aa:	2303      	movs	r3, #3
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056ae:	230b      	movs	r3, #11
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056b6:	4619      	mov	r1, r3
 80056b8:	4813      	ldr	r0, [pc, #76]	@ (8005708 <HAL_ETH_MspInit+0x194>)
 80056ba:	f7fd ffbf 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80056be:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c4:	2302      	movs	r3, #2
 80056c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056cc:	2303      	movs	r3, #3
 80056ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056d0:	230b      	movs	r3, #11
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80056d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056d8:	4619      	mov	r1, r3
 80056da:	480c      	ldr	r0, [pc, #48]	@ (800570c <HAL_ETH_MspInit+0x198>)
 80056dc:	f7fd ffae 	bl	800363c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80056e0:	2200      	movs	r2, #0
 80056e2:	2105      	movs	r1, #5
 80056e4:	203d      	movs	r0, #61	@ 0x3d
 80056e6:	f7fc fd07 	bl	80020f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80056ea:	203d      	movs	r0, #61	@ 0x3d
 80056ec:	f7fc fd20 	bl	8002130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80056f0:	bf00      	nop
 80056f2:	3738      	adds	r7, #56	@ 0x38
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40028000 	.word	0x40028000
 80056fc:	40023800 	.word	0x40023800
 8005700:	40020800 	.word	0x40020800
 8005704:	40020000 	.word	0x40020000
 8005708:	40020400 	.word	0x40020400
 800570c:	40021800 	.word	0x40021800

08005710 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005714:	4802      	ldr	r0, [pc, #8]	@ (8005720 <ETH_PHY_IO_Init+0x10>)
 8005716:	f7fd fb13 	bl	8002d40 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20004f7c 	.word	0x20004f7c

08005724 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return 0;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	4807      	ldr	r0, [pc, #28]	@ (8005764 <ETH_PHY_IO_ReadReg+0x30>)
 8005748:	f7fd f954 	bl	80029f4 <HAL_ETH_ReadPHYRegister>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	e000      	b.n	800575a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20004f7c 	.word	0x20004f7c

08005768 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	4807      	ldr	r0, [pc, #28]	@ (8005798 <ETH_PHY_IO_WriteReg+0x30>)
 800577c:	f7fd f985 	bl	8002a8a <HAL_ETH_WritePHYRegister>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005786:	f04f 33ff 	mov.w	r3, #4294967295
 800578a:	e000      	b.n	800578e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20004f7c 	.word	0x20004f7c

0800579c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80057a0:	f7fc fbc2 	bl	8001f28 <HAL_GetTick>
 80057a4:	4603      	mov	r3, r0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b0a0      	sub	sp, #128	@ 0x80
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80057b4:	f107 0308 	add.w	r3, r7, #8
 80057b8:	2264      	movs	r2, #100	@ 0x64
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f00f ff3f 	bl	8015640 <memset>
  int32_t PHYLinkState = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057ca:	2300      	movs	r3, #0
 80057cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057ce:	2300      	movs	r3, #0
 80057d0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80057d6:	483a      	ldr	r0, [pc, #232]	@ (80058c0 <ethernet_link_thread+0x114>)
 80057d8:	f7fc fae8 	bl	8001dac <LAN8742_GetLinkState>
 80057dc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80057de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <ethernet_link_thread+0x5e>
 80057f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	dc09      	bgt.n	800580a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80057f6:	4833      	ldr	r0, [pc, #204]	@ (80058c4 <ethernet_link_thread+0x118>)
 80057f8:	f7fc fdb4 	bl	8002364 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80057fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80057fe:	f005 fdab 	bl	800b358 <netif_set_down>
    netif_set_link_down(netif);
 8005802:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005804:	f005 fe0e 	bl	800b424 <netif_set_link_down>
 8005808:	e055      	b.n	80058b6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800580a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800580c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d14e      	bne.n	80058b6 <ethernet_link_thread+0x10a>
 8005818:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800581a:	2b01      	cmp	r3, #1
 800581c:	dd4b      	ble.n	80058b6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800581e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005820:	3b02      	subs	r3, #2
 8005822:	2b03      	cmp	r3, #3
 8005824:	d82a      	bhi.n	800587c <ethernet_link_thread+0xd0>
 8005826:	a201      	add	r2, pc, #4	@ (adr r2, 800582c <ethernet_link_thread+0x80>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	0800584f 	.word	0x0800584f
 8005834:	0800585f 	.word	0x0800585f
 8005838:	0800586f 	.word	0x0800586f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800583c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005840:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005842:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005846:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005848:	2301      	movs	r3, #1
 800584a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800584c:	e017      	b.n	800587e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800584e:	2300      	movs	r3, #0
 8005850:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005852:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005856:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005858:	2301      	movs	r3, #1
 800585a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800585c:	e00f      	b.n	800587e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800585e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005862:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005864:	2300      	movs	r3, #0
 8005866:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005868:	2301      	movs	r3, #1
 800586a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800586c:	e007      	b.n	800587e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800586e:	2300      	movs	r3, #0
 8005870:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005872:	2300      	movs	r3, #0
 8005874:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005876:	2301      	movs	r3, #1
 8005878:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800587a:	e000      	b.n	800587e <ethernet_link_thread+0xd2>
    default:
      break;
 800587c:	bf00      	nop
    }

    if(linkchanged)
 800587e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d018      	beq.n	80058b6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005884:	f107 0308 	add.w	r3, r7, #8
 8005888:	4619      	mov	r1, r3
 800588a:	480e      	ldr	r0, [pc, #56]	@ (80058c4 <ethernet_link_thread+0x118>)
 800588c:	f7fd f946 	bl	8002b1c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005892:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005896:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	4619      	mov	r1, r3
 800589e:	4809      	ldr	r0, [pc, #36]	@ (80058c4 <ethernet_link_thread+0x118>)
 80058a0:	f7fd fa33 	bl	8002d0a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80058a4:	4807      	ldr	r0, [pc, #28]	@ (80058c4 <ethernet_link_thread+0x118>)
 80058a6:	f7fc fced 	bl	8002284 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80058aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058ac:	f005 fce8 	bl	800b280 <netif_set_up>
      netif_set_link_up(netif);
 80058b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058b2:	f005 fd83 	bl	800b3bc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80058b6:	2064      	movs	r0, #100	@ 0x64
 80058b8:	f000 f90e 	bl	8005ad8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80058bc:	e78b      	b.n	80057d6 <ethernet_link_thread+0x2a>
 80058be:	bf00      	nop
 80058c0:	20005064 	.word	0x20005064
 80058c4:	20004f7c 	.word	0x20004f7c

080058c8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80058d0:	4812      	ldr	r0, [pc, #72]	@ (800591c <HAL_ETH_RxAllocateCallback+0x54>)
 80058d2:	f005 fa49 	bl	800ad68 <memp_malloc_pool>
 80058d6:	60f8      	str	r0, [r7, #12]
  if (p)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d014      	beq.n	8005908 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f103 0220 	add.w	r2, r3, #32
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005920 <HAL_ETH_RxAllocateCallback+0x58>)
 80058ec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80058f6:	9201      	str	r2, [sp, #4]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2241      	movs	r2, #65	@ 0x41
 80058fe:	2100      	movs	r1, #0
 8005900:	2000      	movs	r0, #0
 8005902:	f005 ffb3 	bl	800b86c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005906:	e005      	b.n	8005914 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005908:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <HAL_ETH_RxAllocateCallback+0x5c>)
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
}
 8005914:	bf00      	nop
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	08019b38 	.word	0x08019b38
 8005920:	08005525 	.word	0x08005525
 8005924:	20004e30 	.word	0x20004e30

08005928 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005928:	b480      	push	{r7}
 800592a:	b089      	sub	sp, #36	@ 0x24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3b20      	subs	r3, #32
 8005946:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	2200      	movs	r2, #0
 8005952:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	887a      	ldrh	r2, [r7, #2]
 8005958:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e003      	b.n	8005972 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	e009      	b.n	8005994 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	891a      	ldrh	r2, [r3, #8]
 8005984:	887b      	ldrh	r3, [r7, #2]
 8005986:	4413      	add	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f2      	bne.n	8005980 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	3724      	adds	r7, #36	@ 0x24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f006 f915 	bl	800bbe0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	4603      	mov	r3, r0
 80059c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059d0:	2b84      	cmp	r3, #132	@ 0x84
 80059d2:	d005      	beq.n	80059e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	3303      	adds	r3, #3
 80059de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059e0:	68fb      	ldr	r3, [r7, #12]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f4:	f3ef 8305 	mrs	r3, IPSR
 80059f8:	607b      	str	r3, [r7, #4]
  return(result);
 80059fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a16:	f001 fc95 	bl	8007344 <vTaskStartScheduler>
  
  return osOK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005a24:	f7ff ffe3 	bl	80059ee <inHandlerMode>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005a2e:	f001 fdaf 	bl	8007590 <xTaskGetTickCountFromISR>
 8005a32:	4603      	mov	r3, r0
 8005a34:	e002      	b.n	8005a3c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005a36:	f001 fd9b 	bl	8007570 <xTaskGetTickCount>
 8005a3a:	4603      	mov	r3, r0
  }
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a42:	b089      	sub	sp, #36	@ 0x24
 8005a44:	af04      	add	r7, sp, #16
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d020      	beq.n	8005a94 <osThreadCreate+0x54>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01c      	beq.n	8005a94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685c      	ldr	r4, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691e      	ldr	r6, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff ffa6 	bl	80059be <makeFreeRtosPriority>
 8005a72:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a7c:	9202      	str	r2, [sp, #8]
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	9100      	str	r1, [sp, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	4632      	mov	r2, r6
 8005a86:	4629      	mov	r1, r5
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f001 fa75 	bl	8006f78 <xTaskCreateStatic>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	e01c      	b.n	8005ace <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685c      	ldr	r4, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aa0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff ff88 	bl	80059be <makeFreeRtosPriority>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	f107 030c 	add.w	r3, r7, #12
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	9200      	str	r2, [sp, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	4632      	mov	r2, r6
 8005abc:	4629      	mov	r1, r5
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f001 faba 	bl	8007038 <xTaskCreate>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d001      	beq.n	8005ace <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e000      	b.n	8005ad0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ace:	68fb      	ldr	r3, [r7, #12]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ad8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <osDelay+0x16>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	e000      	b.n	8005af0 <osDelay+0x18>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fbf1 	bl	80072d8 <vTaskDelay>
  
  return osOK;
 8005af6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4619      	mov	r1, r3
 8005b16:	2001      	movs	r0, #1
 8005b18:	f000 fc47 	bl	80063aa <xQueueCreateMutexStatic>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	e003      	b.n	8005b28 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005b20:	2001      	movs	r0, #1
 8005b22:	f000 fc2a 	bl	800637a <xQueueCreateMutex>
 8005b26:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <osMutexWait+0x18>
    return osErrorParameter;
 8005b44:	2380      	movs	r3, #128	@ 0x80
 8005b46:	e03a      	b.n	8005bbe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d103      	bne.n	8005b5c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e009      	b.n	8005b70 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d006      	beq.n	8005b70 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <osMutexWait+0x40>
      ticks = 1;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005b70:	f7ff ff3d 	bl	80059ee <inHandlerMode>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d017      	beq.n	8005baa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b7a:	f107 0308 	add.w	r3, r7, #8
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2100      	movs	r1, #0
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 f84e 	bl	8006c24 <xQueueReceiveFromISR>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d001      	beq.n	8005b92 <osMutexWait+0x62>
      return osErrorOS;
 8005b8e:	23ff      	movs	r3, #255	@ 0xff
 8005b90:	e015      	b.n	8005bbe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d011      	beq.n	8005bbc <osMutexWait+0x8c>
 8005b98:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc8 <osMutexWait+0x98>)
 8005b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	e008      	b.n	8005bbc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 ff29 	bl	8006a04 <xQueueSemaphoreTake>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d001      	beq.n	8005bbc <osMutexWait+0x8c>
    return osErrorOS;
 8005bb8:	23ff      	movs	r3, #255	@ 0xff
 8005bba:	e000      	b.n	8005bbe <osMutexWait+0x8e>
  }
  
  return osOK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005bdc:	f7ff ff07 	bl	80059ee <inHandlerMode>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d016      	beq.n	8005c14 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fd97 	bl	8006720 <xQueueGiveFromISR>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d001      	beq.n	8005bfc <osMutexRelease+0x30>
      return osErrorOS;
 8005bf8:	23ff      	movs	r3, #255	@ 0xff
 8005bfa:	e017      	b.n	8005c2c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <osMutexRelease+0x5e>
 8005c02:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <osMutexRelease+0x68>)
 8005c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	e00a      	b.n	8005c2a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005c14:	2300      	movs	r3, #0
 8005c16:	2200      	movs	r2, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fbe0 	bl	80063e0 <xQueueGenericSend>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d001      	beq.n	8005c2a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005c26:	23ff      	movs	r3, #255	@ 0xff
 8005c28:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00f      	beq.n	8005c6a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d10a      	bne.n	8005c66 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2203      	movs	r2, #3
 8005c56:	9200      	str	r2, [sp, #0]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	f000 fa9b 	bl	8006198 <xQueueGenericCreateStatic>
 8005c62:	4603      	mov	r3, r0
 8005c64:	e016      	b.n	8005c94 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e014      	b.n	8005c94 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d110      	bne.n	8005c92 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005c70:	2203      	movs	r2, #3
 8005c72:	2100      	movs	r1, #0
 8005c74:	2001      	movs	r0, #1
 8005c76:	f000 fb0c 	bl	8006292 <xQueueGenericCreate>
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <osSemaphoreCreate+0x56>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2200      	movs	r2, #0
 8005c86:	2100      	movs	r1, #0
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fba9 	bl	80063e0 <xQueueGenericSend>
      return sema;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	e000      	b.n	8005c94 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005c92:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005cb0:	2380      	movs	r3, #128	@ 0x80
 8005cb2:	e03a      	b.n	8005d2a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d103      	bne.n	8005cc8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e009      	b.n	8005cdc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d006      	beq.n	8005cdc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <osSemaphoreWait+0x40>
      ticks = 1;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005cdc:	f7ff fe87 	bl	80059ee <inHandlerMode>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d017      	beq.n	8005d16 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005ce6:	f107 0308 	add.w	r3, r7, #8
 8005cea:	461a      	mov	r2, r3
 8005cec:	2100      	movs	r1, #0
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 ff98 	bl	8006c24 <xQueueReceiveFromISR>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d001      	beq.n	8005cfe <osSemaphoreWait+0x62>
      return osErrorOS;
 8005cfa:	23ff      	movs	r3, #255	@ 0xff
 8005cfc:	e015      	b.n	8005d2a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d011      	beq.n	8005d28 <osSemaphoreWait+0x8c>
 8005d04:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <osSemaphoreWait+0x98>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	e008      	b.n	8005d28 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fe73 	bl	8006a04 <xQueueSemaphoreTake>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d001      	beq.n	8005d28 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005d24:	23ff      	movs	r3, #255	@ 0xff
 8005d26:	e000      	b.n	8005d2a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005d48:	f7ff fe51 	bl	80059ee <inHandlerMode>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d016      	beq.n	8005d80 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fce1 	bl	8006720 <xQueueGiveFromISR>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d001      	beq.n	8005d68 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005d64:	23ff      	movs	r3, #255	@ 0xff
 8005d66:	e017      	b.n	8005d98 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d013      	beq.n	8005d96 <osSemaphoreRelease+0x5e>
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <osSemaphoreRelease+0x68>)
 8005d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	e00a      	b.n	8005d96 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005d80:	2300      	movs	r3, #0
 8005d82:	2200      	movs	r2, #0
 8005d84:	2100      	movs	r1, #0
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fb2a 	bl	80063e0 <xQueueGenericSend>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d001      	beq.n	8005d96 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005d92:	23ff      	movs	r3, #255	@ 0xff
 8005d94:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d011      	beq.n	8005dda <osMessageCreate+0x36>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6859      	ldr	r1, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	2400      	movs	r4, #0
 8005dd0:	9400      	str	r4, [sp, #0]
 8005dd2:	f000 f9e1 	bl	8006198 <xQueueGenericCreateStatic>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	e008      	b.n	8005dec <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	4619      	mov	r1, r3
 8005de6:	f000 fa54 	bl	8006292 <xQueueGenericCreate>
 8005dea:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd90      	pop	{r4, r7, pc}

08005df4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <osMessagePut+0x1e>
    ticks = 1;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005e12:	f7ff fdec 	bl	80059ee <inHandlerMode>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d018      	beq.n	8005e4e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005e1c:	f107 0210 	add.w	r2, r7, #16
 8005e20:	f107 0108 	add.w	r1, r7, #8
 8005e24:	2300      	movs	r3, #0
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fbdc 	bl	80065e4 <xQueueGenericSendFromISR>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d001      	beq.n	8005e36 <osMessagePut+0x42>
      return osErrorOS;
 8005e32:	23ff      	movs	r3, #255	@ 0xff
 8005e34:	e018      	b.n	8005e68 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d014      	beq.n	8005e66 <osMessagePut+0x72>
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <osMessagePut+0x7c>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	e00b      	b.n	8005e66 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005e4e:	f107 0108 	add.w	r1, r7, #8
 8005e52:	2300      	movs	r3, #0
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fac2 	bl	80063e0 <xQueueGenericSend>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d001      	beq.n	8005e66 <osMessagePut+0x72>
      return osErrorOS;
 8005e62:	23ff      	movs	r3, #255	@ 0xff
 8005e64:	e000      	b.n	8005e68 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b08b      	sub	sp, #44	@ 0x2c
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005e8e:	2380      	movs	r3, #128	@ 0x80
 8005e90:	617b      	str	r3, [r7, #20]
    return event;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	461c      	mov	r4, r3
 8005e96:	f107 0314 	add.w	r3, r7, #20
 8005e9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ea2:	e054      	b.n	8005f4e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d103      	bne.n	8005ebc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eba:	e009      	b.n	8005ed0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d006      	beq.n	8005ed0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <osMessageGet+0x5c>
      ticks = 1;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ed0:	f7ff fd8d 	bl	80059ee <inHandlerMode>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01c      	beq.n	8005f14 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005eda:	f107 0220 	add.w	r2, r7, #32
 8005ede:	f107 0314 	add.w	r3, r7, #20
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	68b8      	ldr	r0, [r7, #8]
 8005ee8:	f000 fe9c 	bl	8006c24 <xQueueReceiveFromISR>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d102      	bne.n	8005ef8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e001      	b.n	8005efc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01d      	beq.n	8005f3e <osMessageGet+0xca>
 8005f02:	4b15      	ldr	r3, [pc, #84]	@ (8005f58 <osMessageGet+0xe4>)
 8005f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	e014      	b.n	8005f3e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005f14:	f107 0314 	add.w	r3, r7, #20
 8005f18:	3304      	adds	r3, #4
 8005f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	68b8      	ldr	r0, [r7, #8]
 8005f20:	f000 fc8e 	bl	8006840 <xQueueReceive>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d102      	bne.n	8005f30 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e006      	b.n	8005f3e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <osMessageGet+0xc6>
 8005f36:	2300      	movs	r3, #0
 8005f38:	e000      	b.n	8005f3c <osMessageGet+0xc8>
 8005f3a:	2340      	movs	r3, #64	@ 0x40
 8005f3c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	461c      	mov	r4, r3
 8005f42:	f107 0314 	add.w	r3, r7, #20
 8005f46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	372c      	adds	r7, #44	@ 0x2c
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}
 8005f56:	bf00      	nop
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f103 0208 	add.w	r2, r3, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f103 0208 	add.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d103      	bne.n	800601e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e00c      	b.n	8006038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3308      	adds	r3, #8
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e002      	b.n	800602c <vListInsert+0x2e>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d2f6      	bcs.n	8006026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6892      	ldr	r2, [r2, #8]
 8006086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6852      	ldr	r2, [r2, #4]
 8006090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	d103      	bne.n	80060a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1e5a      	subs	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10b      	bne.n	80060f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	e7fd      	b.n	80060ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060f0:	f002 f8c2 	bl	8008278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	441a      	add	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	3b01      	subs	r3, #1
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006126:	fb01 f303 	mul.w	r3, r1, r3
 800612a:	441a      	add	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	22ff      	movs	r2, #255	@ 0xff
 8006134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	22ff      	movs	r2, #255	@ 0xff
 800613c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d114      	bne.n	8006170 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01a      	beq.n	8006184 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3310      	adds	r3, #16
 8006152:	4618      	mov	r0, r3
 8006154:	f001 fb72 	bl	800783c <xTaskRemoveFromEventList>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d012      	beq.n	8006184 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800615e:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <xQueueGenericReset+0xd0>)
 8006160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	e009      	b.n	8006184 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3310      	adds	r3, #16
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff fef1 	bl	8005f5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3324      	adds	r3, #36	@ 0x24
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff feec 	bl	8005f5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006184:	f002 f8aa 	bl	80082dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006188:	2301      	movs	r3, #1
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08e      	sub	sp, #56	@ 0x38
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	e7fd      	b.n	80061c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <xQueueGenericCreateStatic+0x56>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <xQueueGenericCreateStatic+0x5a>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericCreateStatic+0x5c>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	623b      	str	r3, [r7, #32]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <xQueueGenericCreateStatic+0x84>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <xQueueGenericCreateStatic+0x88>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <xQueueGenericCreateStatic+0x8a>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	61fb      	str	r3, [r7, #28]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800623e:	2348      	movs	r3, #72	@ 0x48
 8006240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b48      	cmp	r3, #72	@ 0x48
 8006246:	d00b      	beq.n	8006260 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61bb      	str	r3, [r7, #24]
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	e7fd      	b.n	800625c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006260:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00d      	beq.n	8006288 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800626c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006274:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f840 	bl	8006308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800628a:	4618      	mov	r0, r3
 800628c:	3730      	adds	r7, #48	@ 0x30
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006292:	b580      	push	{r7, lr}
 8006294:	b08a      	sub	sp, #40	@ 0x28
 8006296:	af02      	add	r7, sp, #8
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	4613      	mov	r3, r2
 800629e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <xQueueGenericCreate+0x2c>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	613b      	str	r3, [r7, #16]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	fb02 f303 	mul.w	r3, r2, r3
 80062c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3348      	adds	r3, #72	@ 0x48
 80062cc:	4618      	mov	r0, r3
 80062ce:	f002 f8f5 	bl	80084bc <pvPortMalloc>
 80062d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d011      	beq.n	80062fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	3348      	adds	r3, #72	@ 0x48
 80062e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062ec:	79fa      	ldrb	r2, [r7, #7]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	4613      	mov	r3, r2
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f805 	bl	8006308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	e002      	b.n	800632a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006336:	2101      	movs	r1, #1
 8006338:	69b8      	ldr	r0, [r7, #24]
 800633a:	f7ff fec3 	bl	80060c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00e      	beq.n	8006372 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006366:	2300      	movs	r3, #0
 8006368:	2200      	movs	r2, #0
 800636a:	2100      	movs	r1, #0
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f837 	bl	80063e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800637a:	b580      	push	{r7, lr}
 800637c:	b086      	sub	sp, #24
 800637e:	af00      	add	r7, sp, #0
 8006380:	4603      	mov	r3, r0
 8006382:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006384:	2301      	movs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	461a      	mov	r2, r3
 8006390:	6939      	ldr	r1, [r7, #16]
 8006392:	6978      	ldr	r0, [r7, #20]
 8006394:	f7ff ff7d 	bl	8006292 <xQueueGenericCreate>
 8006398:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff ffd3 	bl	8006346 <prvInitialiseMutex>

		return xNewQueue;
 80063a0:	68fb      	ldr	r3, [r7, #12]
	}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b088      	sub	sp, #32
 80063ae:	af02      	add	r7, sp, #8
 80063b0:	4603      	mov	r3, r0
 80063b2:	6039      	str	r1, [r7, #0]
 80063b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80063b6:	2301      	movs	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2200      	movs	r2, #0
 80063c6:	6939      	ldr	r1, [r7, #16]
 80063c8:	6978      	ldr	r0, [r7, #20]
 80063ca:	f7ff fee5 	bl	8006198 <xQueueGenericCreateStatic>
 80063ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7ff ffb8 	bl	8006346 <prvInitialiseMutex>

		return xNewQueue;
 80063d6:	68fb      	ldr	r3, [r7, #12]
	}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	@ 0x38
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063ee:	2300      	movs	r3, #0
 80063f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10b      	bne.n	8006414 <xQueueGenericSend+0x34>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	e7fd      	b.n	8006410 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <xQueueGenericSend+0x42>
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <xQueueGenericSend+0x46>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueGenericSend+0x48>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xQueueGenericSend+0x64>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d103      	bne.n	8006452 <xQueueGenericSend+0x72>
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <xQueueGenericSend+0x76>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <xQueueGenericSend+0x78>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10b      	bne.n	8006474 <xQueueGenericSend+0x94>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	623b      	str	r3, [r7, #32]
}
 800646e:	bf00      	nop
 8006470:	bf00      	nop
 8006472:	e7fd      	b.n	8006470 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006474:	f001 fba8 	bl	8007bc8 <xTaskGetSchedulerState>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d102      	bne.n	8006484 <xQueueGenericSend+0xa4>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <xQueueGenericSend+0xa8>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <xQueueGenericSend+0xaa>
 8006488:	2300      	movs	r3, #0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	61fb      	str	r3, [r7, #28]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064a6:	f001 fee7 	bl	8008278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <xQueueGenericSend+0xdc>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d129      	bne.n	8006510 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064c2:	f000 fc49 	bl	8006d58 <prvCopyDataToQueue>
 80064c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d010      	beq.n	80064f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d2:	3324      	adds	r3, #36	@ 0x24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 f9b1 	bl	800783c <xTaskRemoveFromEventList>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d013      	beq.n	8006508 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064e0:	4b3f      	ldr	r3, [pc, #252]	@ (80065e0 <xQueueGenericSend+0x200>)
 80064e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	e00a      	b.n	8006508 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064f8:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <xQueueGenericSend+0x200>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006508:	f001 fee8 	bl	80082dc <vPortExitCritical>
				return pdPASS;
 800650c:	2301      	movs	r3, #1
 800650e:	e063      	b.n	80065d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006516:	f001 fee1 	bl	80082dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800651a:	2300      	movs	r3, #0
 800651c:	e05c      	b.n	80065d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800651e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006524:	f107 0314 	add.w	r3, r7, #20
 8006528:	4618      	mov	r0, r3
 800652a:	f001 f9eb 	bl	8007904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006532:	f001 fed3 	bl	80082dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006536:	f000 ff6f 	bl	8007418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800653a:	f001 fe9d 	bl	8008278 <vPortEnterCritical>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006544:	b25b      	sxtb	r3, r3
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d103      	bne.n	8006554 <xQueueGenericSend+0x174>
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800655a:	b25b      	sxtb	r3, r3
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d103      	bne.n	800656a <xQueueGenericSend+0x18a>
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800656a:	f001 feb7 	bl	80082dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800656e:	1d3a      	adds	r2, r7, #4
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f001 f9da 	bl	8007930 <xTaskCheckForTimeOut>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d124      	bne.n	80065cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006582:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006584:	f000 fce0 	bl	8006f48 <prvIsQueueFull>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d018      	beq.n	80065c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	3310      	adds	r3, #16
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	4611      	mov	r1, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f001 f92a 	bl	80077f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800659c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800659e:	f000 fc6b 	bl	8006e78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065a2:	f000 ff47 	bl	8007434 <xTaskResumeAll>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f af7c 	bne.w	80064a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80065ae:	4b0c      	ldr	r3, [pc, #48]	@ (80065e0 <xQueueGenericSend+0x200>)
 80065b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	e772      	b.n	80064a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065c2:	f000 fc59 	bl	8006e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065c6:	f000 ff35 	bl	8007434 <xTaskResumeAll>
 80065ca:	e76c      	b.n	80064a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ce:	f000 fc53 	bl	8006e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065d2:	f000 ff2f 	bl	8007434 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3738      	adds	r7, #56	@ 0x38
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b090      	sub	sp, #64	@ 0x40
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	e7fd      	b.n	8006610 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <xQueueGenericSendFromISR+0x3e>
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <xQueueGenericSendFromISR+0x42>
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <xQueueGenericSendFromISR+0x44>
 8006626:	2300      	movs	r3, #0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800663e:	bf00      	nop
 8006640:	bf00      	nop
 8006642:	e7fd      	b.n	8006640 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d103      	bne.n	8006652 <xQueueGenericSendFromISR+0x6e>
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <xQueueGenericSendFromISR+0x72>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <xQueueGenericSendFromISR+0x74>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	623b      	str	r3, [r7, #32]
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	e7fd      	b.n	8006670 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006674:	f001 fee0 	bl	8008438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006678:	f3ef 8211 	mrs	r2, BASEPRI
 800667c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	61fa      	str	r2, [r7, #28]
 800668e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006690:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <xQueueGenericSendFromISR+0xc2>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d12f      	bne.n	8006706 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066bc:	f000 fb4c 	bl	8006d58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d112      	bne.n	80066f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d016      	beq.n	8006700 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	3324      	adds	r3, #36	@ 0x24
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f8b0 	bl	800783c <xTaskRemoveFromEventList>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00e      	beq.n	8006700 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e007      	b.n	8006700 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066f4:	3301      	adds	r3, #1
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	b25a      	sxtb	r2, r3
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006700:	2301      	movs	r3, #1
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006704:	e001      	b.n	800670a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006706:	2300      	movs	r3, #0
 8006708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800670a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006714:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006718:	4618      	mov	r0, r3
 800671a:	3740      	adds	r7, #64	@ 0x40
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	@ 0x38
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	623b      	str	r3, [r7, #32]
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	61fb      	str	r3, [r7, #28]
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	e7fd      	b.n	8006768 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <xQueueGiveFromISR+0x5c>
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <xQueueGiveFromISR+0x60>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <xQueueGiveFromISR+0x62>
 8006780:	2300      	movs	r3, #0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	61bb      	str	r3, [r7, #24]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800679e:	f001 fe4b 	bl	8008438 <vPortValidateInterruptPriority>
	__asm volatile
 80067a2:	f3ef 8211 	mrs	r2, BASEPRI
 80067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	617a      	str	r2, [r7, #20]
 80067b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80067ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d22b      	bcs.n	8006826 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d112      	bne.n	8006810 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	3324      	adds	r3, #36	@ 0x24
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 f820 	bl	800783c <xTaskRemoveFromEventList>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00e      	beq.n	8006820 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e007      	b.n	8006820 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006814:	3301      	adds	r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	b25a      	sxtb	r2, r3
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006820:	2301      	movs	r3, #1
 8006822:	637b      	str	r3, [r7, #52]	@ 0x34
 8006824:	e001      	b.n	800682a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
 800682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f383 8811 	msr	BASEPRI, r3
}
 8006834:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006838:	4618      	mov	r0, r3
 800683a:	3738      	adds	r7, #56	@ 0x38
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08c      	sub	sp, #48	@ 0x30
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800684c:	2300      	movs	r3, #0
 800684e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <xQueueReceive+0x32>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	623b      	str	r3, [r7, #32]
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	e7fd      	b.n	800686e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <xQueueReceive+0x40>
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <xQueueReceive+0x44>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <xQueueReceive+0x46>
 8006884:	2300      	movs	r3, #0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <xQueueReceive+0x62>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	61fb      	str	r3, [r7, #28]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068a2:	f001 f991 	bl	8007bc8 <xTaskGetSchedulerState>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <xQueueReceive+0x72>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <xQueueReceive+0x76>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <xQueueReceive+0x78>
 80068b6:	2300      	movs	r3, #0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <xQueueReceive+0x94>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	61bb      	str	r3, [r7, #24]
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068d4:	f001 fcd0 	bl	8008278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01f      	beq.n	8006924 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068e8:	f000 faa0 	bl	8006e2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	1e5a      	subs	r2, r3, #1
 80068f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00f      	beq.n	800691c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	3310      	adds	r3, #16
 8006900:	4618      	mov	r0, r3
 8006902:	f000 ff9b 	bl	800783c <xTaskRemoveFromEventList>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800690c:	4b3c      	ldr	r3, [pc, #240]	@ (8006a00 <xQueueReceive+0x1c0>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800691c:	f001 fcde 	bl	80082dc <vPortExitCritical>
				return pdPASS;
 8006920:	2301      	movs	r3, #1
 8006922:	e069      	b.n	80069f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800692a:	f001 fcd7 	bl	80082dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800692e:	2300      	movs	r3, #0
 8006930:	e062      	b.n	80069f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d106      	bne.n	8006946 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006938:	f107 0310 	add.w	r3, r7, #16
 800693c:	4618      	mov	r0, r3
 800693e:	f000 ffe1 	bl	8007904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006942:	2301      	movs	r3, #1
 8006944:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006946:	f001 fcc9 	bl	80082dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800694a:	f000 fd65 	bl	8007418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800694e:	f001 fc93 	bl	8008278 <vPortEnterCritical>
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006958:	b25b      	sxtb	r3, r3
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d103      	bne.n	8006968 <xQueueReceive+0x128>
 8006960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800696e:	b25b      	sxtb	r3, r3
 8006970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006974:	d103      	bne.n	800697e <xQueueReceive+0x13e>
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800697e:	f001 fcad 	bl	80082dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006982:	1d3a      	adds	r2, r7, #4
 8006984:	f107 0310 	add.w	r3, r7, #16
 8006988:	4611      	mov	r1, r2
 800698a:	4618      	mov	r0, r3
 800698c:	f000 ffd0 	bl	8007930 <xTaskCheckForTimeOut>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d123      	bne.n	80069de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006998:	f000 fac0 	bl	8006f1c <prvIsQueueEmpty>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d017      	beq.n	80069d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	3324      	adds	r3, #36	@ 0x24
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 ff20 	bl	80077f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069b2:	f000 fa61 	bl	8006e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069b6:	f000 fd3d 	bl	8007434 <xTaskResumeAll>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d189      	bne.n	80068d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80069c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a00 <xQueueReceive+0x1c0>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	e780      	b.n	80068d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069d4:	f000 fa50 	bl	8006e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069d8:	f000 fd2c 	bl	8007434 <xTaskResumeAll>
 80069dc:	e77a      	b.n	80068d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069e0:	f000 fa4a 	bl	8006e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069e4:	f000 fd26 	bl	8007434 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069ea:	f000 fa97 	bl	8006f1c <prvIsQueueEmpty>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f43f af6f 	beq.w	80068d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3730      	adds	r7, #48	@ 0x30
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08e      	sub	sp, #56	@ 0x38
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10b      	bne.n	8006a38 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	623b      	str	r3, [r7, #32]
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	e7fd      	b.n	8006a34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61fb      	str	r3, [r7, #28]
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a58:	f001 f8b6 	bl	8007bc8 <xTaskGetSchedulerState>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <xQueueSemaphoreTake+0x64>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <xQueueSemaphoreTake+0x68>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <xQueueSemaphoreTake+0x6a>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10b      	bne.n	8006a8a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	61bb      	str	r3, [r7, #24]
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	e7fd      	b.n	8006a86 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a8a:	f001 fbf5 	bl	8008278 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a92:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d024      	beq.n	8006ae4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	1e5a      	subs	r2, r3, #1
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006aaa:	f001 fa39 	bl	8007f20 <pvTaskIncrementMutexHeldCount>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00f      	beq.n	8006adc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	3310      	adds	r3, #16
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 febb 	bl	800783c <xTaskRemoveFromEventList>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006acc:	4b54      	ldr	r3, [pc, #336]	@ (8006c20 <xQueueSemaphoreTake+0x21c>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006adc:	f001 fbfe 	bl	80082dc <vPortExitCritical>
				return pdPASS;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e098      	b.n	8006c16 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d112      	bne.n	8006b10 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	617b      	str	r3, [r7, #20]
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	e7fd      	b.n	8006b04 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b08:	f001 fbe8 	bl	80082dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	e082      	b.n	8006c16 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fef2 	bl	8007904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b24:	f001 fbda 	bl	80082dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b28:	f000 fc76 	bl	8007418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b2c:	f001 fba4 	bl	8008278 <vPortEnterCritical>
 8006b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d103      	bne.n	8006b46 <xQueueSemaphoreTake+0x142>
 8006b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b4c:	b25b      	sxtb	r3, r3
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d103      	bne.n	8006b5c <xQueueSemaphoreTake+0x158>
 8006b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b5c:	f001 fbbe 	bl	80082dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b60:	463a      	mov	r2, r7
 8006b62:	f107 030c 	add.w	r3, r7, #12
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fee1 	bl	8007930 <xTaskCheckForTimeOut>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d132      	bne.n	8006bda <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b76:	f000 f9d1 	bl	8006f1c <prvIsQueueEmpty>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d026      	beq.n	8006bce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b88:	f001 fb76 	bl	8008278 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f837 	bl	8007c04 <xTaskPriorityInherit>
 8006b96:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b98:	f001 fba0 	bl	80082dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9e:	3324      	adds	r3, #36	@ 0x24
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fe23 	bl	80077f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bac:	f000 f964 	bl	8006e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bb0:	f000 fc40 	bl	8007434 <xTaskResumeAll>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f47f af67 	bne.w	8006a8a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006bbc:	4b18      	ldr	r3, [pc, #96]	@ (8006c20 <xQueueSemaphoreTake+0x21c>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	e75d      	b.n	8006a8a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006bce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bd0:	f000 f952 	bl	8006e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bd4:	f000 fc2e 	bl	8007434 <xTaskResumeAll>
 8006bd8:	e757      	b.n	8006a8a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006bda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bdc:	f000 f94c 	bl	8006e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006be0:	f000 fc28 	bl	8007434 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006be4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006be6:	f000 f999 	bl	8006f1c <prvIsQueueEmpty>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f43f af4c 	beq.w	8006a8a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00d      	beq.n	8006c14 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006bf8:	f001 fb3e 	bl	8008278 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006bfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bfe:	f000 f893 	bl	8006d28 <prvGetDisinheritPriorityAfterTimeout>
 8006c02:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 f8f8 	bl	8007e00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c10:	f001 fb64 	bl	80082dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3738      	adds	r7, #56	@ 0x38
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	e000ed04 	.word	0xe000ed04

08006c24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08e      	sub	sp, #56	@ 0x38
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	623b      	str	r3, [r7, #32]
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	e7fd      	b.n	8006c4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <xQueueReceiveFromISR+0x3c>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <xQueueReceiveFromISR+0x40>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <xQueueReceiveFromISR+0x42>
 8006c64:	2300      	movs	r3, #0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	61fb      	str	r3, [r7, #28]
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	e7fd      	b.n	8006c7e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c82:	f001 fbd9 	bl	8008438 <vPortValidateInterruptPriority>
	__asm volatile
 8006c86:	f3ef 8211 	mrs	r2, BASEPRI
 8006c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	61ba      	str	r2, [r7, #24]
 8006c9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d02f      	beq.n	8006d0e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cbc:	f000 f8b6 	bl	8006e2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc2:	1e5a      	subs	r2, r3, #1
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d112      	bne.n	8006cf8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d016      	beq.n	8006d08 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	3310      	adds	r3, #16
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fdac 	bl	800783c <xTaskRemoveFromEventList>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00e      	beq.n	8006d08 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e007      	b.n	8006d08 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	b25a      	sxtb	r2, r3
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0c:	e001      	b.n	8006d12 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f383 8811 	msr	BASEPRI, r3
}
 8006d1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3738      	adds	r7, #56	@ 0x38
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d006      	beq.n	8006d46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f1c3 0307 	rsb	r3, r3, #7
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e001      	b.n	8006d4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10d      	bne.n	8006d92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d14d      	bne.n	8006e1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 ffb4 	bl	8007cf0 <xTaskPriorityDisinherit>
 8006d88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	609a      	str	r2, [r3, #8]
 8006d90:	e043      	b.n	8006e1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d119      	bne.n	8006dcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6858      	ldr	r0, [r3, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da0:	461a      	mov	r2, r3
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	f00e fd4d 	bl	8015842 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db0:	441a      	add	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d32b      	bcc.n	8006e1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	605a      	str	r2, [r3, #4]
 8006dca:	e026      	b.n	8006e1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	68d8      	ldr	r0, [r3, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	f00e fd33 	bl	8015842 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de4:	425b      	negs	r3, r3
 8006de6:	441a      	add	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d207      	bcs.n	8006e08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	425b      	negs	r3, r3
 8006e02:	441a      	add	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d105      	bne.n	8006e1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e22:	697b      	ldr	r3, [r7, #20]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d018      	beq.n	8006e70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	441a      	add	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d303      	bcc.n	8006e60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68d9      	ldr	r1, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6838      	ldr	r0, [r7, #0]
 8006e6c:	f00e fce9 	bl	8015842 <memcpy>
	}
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e80:	f001 f9fa 	bl	8008278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e8c:	e011      	b.n	8006eb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d012      	beq.n	8006ebc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3324      	adds	r3, #36	@ 0x24
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fcce 	bl	800783c <xTaskRemoveFromEventList>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ea6:	f000 fda7 	bl	80079f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dce9      	bgt.n	8006e8e <prvUnlockQueue+0x16>
 8006eba:	e000      	b.n	8006ebe <prvUnlockQueue+0x46>
					break;
 8006ebc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	22ff      	movs	r2, #255	@ 0xff
 8006ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ec6:	f001 fa09 	bl	80082dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006eca:	f001 f9d5 	bl	8008278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ed4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ed6:	e011      	b.n	8006efc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d012      	beq.n	8006f06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3310      	adds	r3, #16
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fca9 	bl	800783c <xTaskRemoveFromEventList>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ef0:	f000 fd82 	bl	80079f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	dce9      	bgt.n	8006ed8 <prvUnlockQueue+0x60>
 8006f04:	e000      	b.n	8006f08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	22ff      	movs	r2, #255	@ 0xff
 8006f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f10:	f001 f9e4 	bl	80082dc <vPortExitCritical>
}
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f24:	f001 f9a8 	bl	8008278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f30:	2301      	movs	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e001      	b.n	8006f3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f3a:	f001 f9cf 	bl	80082dc <vPortExitCritical>

	return xReturn;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f50:	f001 f992 	bl	8008278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d102      	bne.n	8006f66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e001      	b.n	8006f6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f6a:	f001 f9b7 	bl	80082dc <vPortExitCritical>

	return xReturn;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08e      	sub	sp, #56	@ 0x38
 8006f7c:	af04      	add	r7, sp, #16
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	623b      	str	r3, [r7, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	61fb      	str	r3, [r7, #28]
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	e7fd      	b.n	8006fbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fc2:	23a0      	movs	r3, #160	@ 0xa0
 8006fc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2ba0      	cmp	r3, #160	@ 0xa0
 8006fca:	d00b      	beq.n	8006fe4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	61bb      	str	r3, [r7, #24]
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fe4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01e      	beq.n	800702a <xTaskCreateStatic+0xb2>
 8006fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01b      	beq.n	800702a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ffa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007004:	2300      	movs	r3, #0
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	9302      	str	r3, [sp, #8]
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f851 	bl	80070c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007022:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007024:	f000 f8ee 	bl	8007204 <prvAddNewTaskToReadyList>
 8007028:	e001      	b.n	800702e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800702e:	697b      	ldr	r3, [r7, #20]
	}
 8007030:	4618      	mov	r0, r3
 8007032:	3728      	adds	r7, #40	@ 0x28
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08c      	sub	sp, #48	@ 0x30
 800703c:	af04      	add	r7, sp, #16
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4618      	mov	r0, r3
 800704e:	f001 fa35 	bl	80084bc <pvPortMalloc>
 8007052:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800705a:	20a0      	movs	r0, #160	@ 0xa0
 800705c:	f001 fa2e 	bl	80084bc <pvPortMalloc>
 8007060:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	631a      	str	r2, [r3, #48]	@ 0x30
 800706e:	e005      	b.n	800707c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007070:	6978      	ldr	r0, [r7, #20]
 8007072:	f001 faf1 	bl	8008658 <vPortFree>
 8007076:	e001      	b.n	800707c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007078:	2300      	movs	r3, #0
 800707a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d017      	beq.n	80070b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800708a:	88fa      	ldrh	r2, [r7, #6]
 800708c:	2300      	movs	r3, #0
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	9302      	str	r3, [sp, #8]
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f80f 	bl	80070c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070a6:	69f8      	ldr	r0, [r7, #28]
 80070a8:	f000 f8ac 	bl	8007204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070ac:	2301      	movs	r3, #1
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	e002      	b.n	80070b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070b8:	69bb      	ldr	r3, [r7, #24]
	}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070dc:	3b01      	subs	r3, #1
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f023 0307 	bic.w	r3, r3, #7
 80070ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	617b      	str	r3, [r7, #20]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01f      	beq.n	8007154 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007114:	2300      	movs	r3, #0
 8007116:	61fb      	str	r3, [r7, #28]
 8007118:	e012      	b.n	8007140 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	4413      	add	r3, r2
 8007120:	7819      	ldrb	r1, [r3, #0]
 8007122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	4413      	add	r3, r2
 8007128:	3334      	adds	r3, #52	@ 0x34
 800712a:	460a      	mov	r2, r1
 800712c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d006      	beq.n	8007148 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	3301      	adds	r3, #1
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b0f      	cmp	r3, #15
 8007144:	d9e9      	bls.n	800711a <prvInitialiseNewTask+0x56>
 8007146:	e000      	b.n	800714a <prvInitialiseNewTask+0x86>
			{
				break;
 8007148:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007152:	e003      	b.n	800715c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	2b06      	cmp	r3, #6
 8007160:	d901      	bls.n	8007166 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007162:	2306      	movs	r3, #6
 8007164:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800716a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007170:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	2200      	movs	r2, #0
 8007176:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	3304      	adds	r3, #4
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe ff0d 	bl	8005f9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	3318      	adds	r3, #24
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe ff08 	bl	8005f9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007190:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	f1c3 0207 	rsb	r2, r3, #7
 8007198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	334c      	adds	r3, #76	@ 0x4c
 80071b6:	224c      	movs	r2, #76	@ 0x4c
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f00e fa40 	bl	8015640 <memset>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	4a0d      	ldr	r2, [pc, #52]	@ (80071f8 <prvInitialiseNewTask+0x134>)
 80071c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	4a0c      	ldr	r2, [pc, #48]	@ (80071fc <prvInitialiseNewTask+0x138>)
 80071ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007200 <prvInitialiseNewTask+0x13c>)
 80071d0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	69b8      	ldr	r0, [r7, #24]
 80071d8:	f000 ff1c 	bl	8008014 <pxPortInitialiseStack>
 80071dc:	4602      	mov	r2, r0
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071ee:	bf00      	nop
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20017314 	.word	0x20017314
 80071fc:	2001737c 	.word	0x2001737c
 8007200:	200173e4 	.word	0x200173e4

08007204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800720c:	f001 f834 	bl	8008278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007210:	4b2a      	ldr	r3, [pc, #168]	@ (80072bc <prvAddNewTaskToReadyList+0xb8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3301      	adds	r3, #1
 8007216:	4a29      	ldr	r2, [pc, #164]	@ (80072bc <prvAddNewTaskToReadyList+0xb8>)
 8007218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800721a:	4b29      	ldr	r3, [pc, #164]	@ (80072c0 <prvAddNewTaskToReadyList+0xbc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007222:	4a27      	ldr	r2, [pc, #156]	@ (80072c0 <prvAddNewTaskToReadyList+0xbc>)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007228:	4b24      	ldr	r3, [pc, #144]	@ (80072bc <prvAddNewTaskToReadyList+0xb8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d110      	bne.n	8007252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007230:	f000 fc06 	bl	8007a40 <prvInitialiseTaskLists>
 8007234:	e00d      	b.n	8007252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007236:	4b23      	ldr	r3, [pc, #140]	@ (80072c4 <prvAddNewTaskToReadyList+0xc0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800723e:	4b20      	ldr	r3, [pc, #128]	@ (80072c0 <prvAddNewTaskToReadyList+0xbc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007248:	429a      	cmp	r2, r3
 800724a:	d802      	bhi.n	8007252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800724c:	4a1c      	ldr	r2, [pc, #112]	@ (80072c0 <prvAddNewTaskToReadyList+0xbc>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007252:	4b1d      	ldr	r3, [pc, #116]	@ (80072c8 <prvAddNewTaskToReadyList+0xc4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3301      	adds	r3, #1
 8007258:	4a1b      	ldr	r2, [pc, #108]	@ (80072c8 <prvAddNewTaskToReadyList+0xc4>)
 800725a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	4b19      	ldr	r3, [pc, #100]	@ (80072cc <prvAddNewTaskToReadyList+0xc8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	4a18      	ldr	r2, [pc, #96]	@ (80072cc <prvAddNewTaskToReadyList+0xc8>)
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a15      	ldr	r2, [pc, #84]	@ (80072d0 <prvAddNewTaskToReadyList+0xcc>)
 800727c:	441a      	add	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3304      	adds	r3, #4
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f7fe fe96 	bl	8005fb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800728a:	f001 f827 	bl	80082dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800728e:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <prvAddNewTaskToReadyList+0xc0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007296:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <prvAddNewTaskToReadyList+0xbc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d207      	bcs.n	80072b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072a4:	4b0b      	ldr	r3, [pc, #44]	@ (80072d4 <prvAddNewTaskToReadyList+0xd0>)
 80072a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20005184 	.word	0x20005184
 80072c0:	20005084 	.word	0x20005084
 80072c4:	20005190 	.word	0x20005190
 80072c8:	200051a0 	.word	0x200051a0
 80072cc:	2000518c 	.word	0x2000518c
 80072d0:	20005088 	.word	0x20005088
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d018      	beq.n	800731c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072ea:	4b14      	ldr	r3, [pc, #80]	@ (800733c <vTaskDelay+0x64>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00b      	beq.n	800730a <vTaskDelay+0x32>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60bb      	str	r3, [r7, #8]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800730a:	f000 f885 	bl	8007418 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800730e:	2100      	movs	r1, #0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fe19 	bl	8007f48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007316:	f000 f88d 	bl	8007434 <xTaskResumeAll>
 800731a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007322:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <vTaskDelay+0x68>)
 8007324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	200051ac 	.word	0x200051ac
 8007340:	e000ed04 	.word	0xe000ed04

08007344 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08a      	sub	sp, #40	@ 0x28
 8007348:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800734e:	2300      	movs	r3, #0
 8007350:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007352:	463a      	mov	r2, r7
 8007354:	1d39      	adds	r1, r7, #4
 8007356:	f107 0308 	add.w	r3, r7, #8
 800735a:	4618      	mov	r0, r3
 800735c:	f7f9 f946 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	9202      	str	r2, [sp, #8]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	2300      	movs	r3, #0
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	2300      	movs	r3, #0
 8007370:	460a      	mov	r2, r1
 8007372:	4921      	ldr	r1, [pc, #132]	@ (80073f8 <vTaskStartScheduler+0xb4>)
 8007374:	4821      	ldr	r0, [pc, #132]	@ (80073fc <vTaskStartScheduler+0xb8>)
 8007376:	f7ff fdff 	bl	8006f78 <xTaskCreateStatic>
 800737a:	4603      	mov	r3, r0
 800737c:	4a20      	ldr	r2, [pc, #128]	@ (8007400 <vTaskStartScheduler+0xbc>)
 800737e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007380:	4b1f      	ldr	r3, [pc, #124]	@ (8007400 <vTaskStartScheduler+0xbc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007388:	2301      	movs	r3, #1
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e001      	b.n	8007392 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d11b      	bne.n	80073d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	613b      	str	r3, [r7, #16]
}
 80073aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073ac:	4b15      	ldr	r3, [pc, #84]	@ (8007404 <vTaskStartScheduler+0xc0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	334c      	adds	r3, #76	@ 0x4c
 80073b2:	4a15      	ldr	r2, [pc, #84]	@ (8007408 <vTaskStartScheduler+0xc4>)
 80073b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073b6:	4b15      	ldr	r3, [pc, #84]	@ (800740c <vTaskStartScheduler+0xc8>)
 80073b8:	f04f 32ff 	mov.w	r2, #4294967295
 80073bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073be:	4b14      	ldr	r3, [pc, #80]	@ (8007410 <vTaskStartScheduler+0xcc>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073c4:	4b13      	ldr	r3, [pc, #76]	@ (8007414 <vTaskStartScheduler+0xd0>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073ca:	f000 feb1 	bl	8008130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073ce:	e00f      	b.n	80073f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d6:	d10b      	bne.n	80073f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	60fb      	str	r3, [r7, #12]
}
 80073ea:	bf00      	nop
 80073ec:	bf00      	nop
 80073ee:	e7fd      	b.n	80073ec <vTaskStartScheduler+0xa8>
}
 80073f0:	bf00      	nop
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	08016d60 	.word	0x08016d60
 80073fc:	08007a11 	.word	0x08007a11
 8007400:	200051a8 	.word	0x200051a8
 8007404:	20005084 	.word	0x20005084
 8007408:	20000064 	.word	0x20000064
 800740c:	200051a4 	.word	0x200051a4
 8007410:	20005190 	.word	0x20005190
 8007414:	20005188 	.word	0x20005188

08007418 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800741c:	4b04      	ldr	r3, [pc, #16]	@ (8007430 <vTaskSuspendAll+0x18>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	4a03      	ldr	r2, [pc, #12]	@ (8007430 <vTaskSuspendAll+0x18>)
 8007424:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007426:	bf00      	nop
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	200051ac 	.word	0x200051ac

08007434 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007442:	4b42      	ldr	r3, [pc, #264]	@ (800754c <xTaskResumeAll+0x118>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10b      	bne.n	8007462 <xTaskResumeAll+0x2e>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	603b      	str	r3, [r7, #0]
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	e7fd      	b.n	800745e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007462:	f000 ff09 	bl	8008278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007466:	4b39      	ldr	r3, [pc, #228]	@ (800754c <xTaskResumeAll+0x118>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3b01      	subs	r3, #1
 800746c:	4a37      	ldr	r2, [pc, #220]	@ (800754c <xTaskResumeAll+0x118>)
 800746e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007470:	4b36      	ldr	r3, [pc, #216]	@ (800754c <xTaskResumeAll+0x118>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d161      	bne.n	800753c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007478:	4b35      	ldr	r3, [pc, #212]	@ (8007550 <xTaskResumeAll+0x11c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d05d      	beq.n	800753c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007480:	e02e      	b.n	80074e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007482:	4b34      	ldr	r3, [pc, #208]	@ (8007554 <xTaskResumeAll+0x120>)
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3318      	adds	r3, #24
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fdee 	bl	8006070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3304      	adds	r3, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe fde9 	bl	8006070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	2201      	movs	r2, #1
 80074a4:	409a      	lsls	r2, r3
 80074a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007558 <xTaskResumeAll+0x124>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007558 <xTaskResumeAll+0x124>)
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4a27      	ldr	r2, [pc, #156]	@ (800755c <xTaskResumeAll+0x128>)
 80074be:	441a      	add	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4619      	mov	r1, r3
 80074c6:	4610      	mov	r0, r2
 80074c8:	f7fe fd75 	bl	8005fb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	4b23      	ldr	r3, [pc, #140]	@ (8007560 <xTaskResumeAll+0x12c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074da:	4b22      	ldr	r3, [pc, #136]	@ (8007564 <xTaskResumeAll+0x130>)
 80074dc:	2201      	movs	r2, #1
 80074de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007554 <xTaskResumeAll+0x120>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1cc      	bne.n	8007482 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074ee:	f000 fb4b 	bl	8007b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007568 <xTaskResumeAll+0x134>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d010      	beq.n	8007520 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074fe:	f000 f859 	bl	80075b4 <xTaskIncrementTick>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007508:	4b16      	ldr	r3, [pc, #88]	@ (8007564 <xTaskResumeAll+0x130>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3b01      	subs	r3, #1
 8007512:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f1      	bne.n	80074fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800751a:	4b13      	ldr	r3, [pc, #76]	@ (8007568 <xTaskResumeAll+0x134>)
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007520:	4b10      	ldr	r3, [pc, #64]	@ (8007564 <xTaskResumeAll+0x130>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007528:	2301      	movs	r3, #1
 800752a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800752c:	4b0f      	ldr	r3, [pc, #60]	@ (800756c <xTaskResumeAll+0x138>)
 800752e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800753c:	f000 fece 	bl	80082dc <vPortExitCritical>

	return xAlreadyYielded;
 8007540:	68bb      	ldr	r3, [r7, #8]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200051ac 	.word	0x200051ac
 8007550:	20005184 	.word	0x20005184
 8007554:	20005144 	.word	0x20005144
 8007558:	2000518c 	.word	0x2000518c
 800755c:	20005088 	.word	0x20005088
 8007560:	20005084 	.word	0x20005084
 8007564:	20005198 	.word	0x20005198
 8007568:	20005194 	.word	0x20005194
 800756c:	e000ed04 	.word	0xe000ed04

08007570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007576:	4b05      	ldr	r3, [pc, #20]	@ (800758c <xTaskGetTickCount+0x1c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800757c:	687b      	ldr	r3, [r7, #4]
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	20005188 	.word	0x20005188

08007590 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007596:	f000 ff4f 	bl	8008438 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800759a:	2300      	movs	r3, #0
 800759c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800759e:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <xTaskGetTickCountFromISR+0x20>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075a4:	683b      	ldr	r3, [r7, #0]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20005188 	.word	0x20005188

080075b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075be:	4b4f      	ldr	r3, [pc, #316]	@ (80076fc <xTaskIncrementTick+0x148>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f040 808f 	bne.w	80076e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007700 <xTaskIncrementTick+0x14c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3301      	adds	r3, #1
 80075ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075d0:	4a4b      	ldr	r2, [pc, #300]	@ (8007700 <xTaskIncrementTick+0x14c>)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d121      	bne.n	8007620 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80075dc:	4b49      	ldr	r3, [pc, #292]	@ (8007704 <xTaskIncrementTick+0x150>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	603b      	str	r3, [r7, #0]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <xTaskIncrementTick+0x46>
 80075fe:	4b41      	ldr	r3, [pc, #260]	@ (8007704 <xTaskIncrementTick+0x150>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	4b40      	ldr	r3, [pc, #256]	@ (8007708 <xTaskIncrementTick+0x154>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a3e      	ldr	r2, [pc, #248]	@ (8007704 <xTaskIncrementTick+0x150>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	4a3e      	ldr	r2, [pc, #248]	@ (8007708 <xTaskIncrementTick+0x154>)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4b3e      	ldr	r3, [pc, #248]	@ (800770c <xTaskIncrementTick+0x158>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3301      	adds	r3, #1
 8007618:	4a3c      	ldr	r2, [pc, #240]	@ (800770c <xTaskIncrementTick+0x158>)
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	f000 fab4 	bl	8007b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007620:	4b3b      	ldr	r3, [pc, #236]	@ (8007710 <xTaskIncrementTick+0x15c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	429a      	cmp	r2, r3
 8007628:	d348      	bcc.n	80076bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800762a:	4b36      	ldr	r3, [pc, #216]	@ (8007704 <xTaskIncrementTick+0x150>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d104      	bne.n	800763e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007634:	4b36      	ldr	r3, [pc, #216]	@ (8007710 <xTaskIncrementTick+0x15c>)
 8007636:	f04f 32ff 	mov.w	r2, #4294967295
 800763a:	601a      	str	r2, [r3, #0]
					break;
 800763c:	e03e      	b.n	80076bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800763e:	4b31      	ldr	r3, [pc, #196]	@ (8007704 <xTaskIncrementTick+0x150>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d203      	bcs.n	800765e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007656:	4a2e      	ldr	r2, [pc, #184]	@ (8007710 <xTaskIncrementTick+0x15c>)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800765c:	e02e      	b.n	80076bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3304      	adds	r3, #4
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fd04 	bl	8006070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3318      	adds	r3, #24
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe fcfb 	bl	8006070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	2201      	movs	r2, #1
 8007680:	409a      	lsls	r2, r3
 8007682:	4b24      	ldr	r3, [pc, #144]	@ (8007714 <xTaskIncrementTick+0x160>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4313      	orrs	r3, r2
 8007688:	4a22      	ldr	r2, [pc, #136]	@ (8007714 <xTaskIncrementTick+0x160>)
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4a1f      	ldr	r2, [pc, #124]	@ (8007718 <xTaskIncrementTick+0x164>)
 800769a:	441a      	add	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f7fe fc87 	bl	8005fb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ac:	4b1b      	ldr	r3, [pc, #108]	@ (800771c <xTaskIncrementTick+0x168>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d3b9      	bcc.n	800762a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076b6:	2301      	movs	r3, #1
 80076b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ba:	e7b6      	b.n	800762a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076bc:	4b17      	ldr	r3, [pc, #92]	@ (800771c <xTaskIncrementTick+0x168>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c2:	4915      	ldr	r1, [pc, #84]	@ (8007718 <xTaskIncrementTick+0x164>)
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d901      	bls.n	80076d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076d8:	4b11      	ldr	r3, [pc, #68]	@ (8007720 <xTaskIncrementTick+0x16c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	e004      	b.n	80076f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007724 <xTaskIncrementTick+0x170>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007724 <xTaskIncrementTick+0x170>)
 80076ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076f0:	697b      	ldr	r3, [r7, #20]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	200051ac 	.word	0x200051ac
 8007700:	20005188 	.word	0x20005188
 8007704:	2000513c 	.word	0x2000513c
 8007708:	20005140 	.word	0x20005140
 800770c:	2000519c 	.word	0x2000519c
 8007710:	200051a4 	.word	0x200051a4
 8007714:	2000518c 	.word	0x2000518c
 8007718:	20005088 	.word	0x20005088
 800771c:	20005084 	.word	0x20005084
 8007720:	20005198 	.word	0x20005198
 8007724:	20005194 	.word	0x20005194

08007728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800772e:	4b2a      	ldr	r3, [pc, #168]	@ (80077d8 <vTaskSwitchContext+0xb0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007736:	4b29      	ldr	r3, [pc, #164]	@ (80077dc <vTaskSwitchContext+0xb4>)
 8007738:	2201      	movs	r2, #1
 800773a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800773c:	e045      	b.n	80077ca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800773e:	4b27      	ldr	r3, [pc, #156]	@ (80077dc <vTaskSwitchContext+0xb4>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007744:	4b26      	ldr	r3, [pc, #152]	@ (80077e0 <vTaskSwitchContext+0xb8>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	fab3 f383 	clz	r3, r3
 8007750:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	f1c3 031f 	rsb	r3, r3, #31
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	4922      	ldr	r1, [pc, #136]	@ (80077e4 <vTaskSwitchContext+0xbc>)
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <vTaskSwitchContext+0x5e>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	e7fd      	b.n	8007782 <vTaskSwitchContext+0x5a>
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4a14      	ldr	r2, [pc, #80]	@ (80077e4 <vTaskSwitchContext+0xbc>)
 8007792:	4413      	add	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	605a      	str	r2, [r3, #4]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	3308      	adds	r3, #8
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d104      	bne.n	80077b6 <vTaskSwitchContext+0x8e>
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	605a      	str	r2, [r3, #4]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	4a0a      	ldr	r2, [pc, #40]	@ (80077e8 <vTaskSwitchContext+0xc0>)
 80077be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077c0:	4b09      	ldr	r3, [pc, #36]	@ (80077e8 <vTaskSwitchContext+0xc0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	334c      	adds	r3, #76	@ 0x4c
 80077c6:	4a09      	ldr	r2, [pc, #36]	@ (80077ec <vTaskSwitchContext+0xc4>)
 80077c8:	6013      	str	r3, [r2, #0]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	200051ac 	.word	0x200051ac
 80077dc:	20005198 	.word	0x20005198
 80077e0:	2000518c 	.word	0x2000518c
 80077e4:	20005088 	.word	0x20005088
 80077e8:	20005084 	.word	0x20005084
 80077ec:	20000064 	.word	0x20000064

080077f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60fb      	str	r3, [r7, #12]
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	e7fd      	b.n	8007814 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007818:	4b07      	ldr	r3, [pc, #28]	@ (8007838 <vTaskPlaceOnEventList+0x48>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3318      	adds	r3, #24
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7fe fbec 	bl	8005ffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007826:	2101      	movs	r1, #1
 8007828:	6838      	ldr	r0, [r7, #0]
 800782a:	f000 fb8d 	bl	8007f48 <prvAddCurrentTaskToDelayedList>
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20005084 	.word	0x20005084

0800783c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	60fb      	str	r3, [r7, #12]
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	e7fd      	b.n	8007866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	3318      	adds	r3, #24
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fbfe 	bl	8006070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007874:	4b1d      	ldr	r3, [pc, #116]	@ (80078ec <xTaskRemoveFromEventList+0xb0>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11c      	bne.n	80078b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	3304      	adds	r3, #4
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fbf5 	bl	8006070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	2201      	movs	r2, #1
 800788c:	409a      	lsls	r2, r3
 800788e:	4b18      	ldr	r3, [pc, #96]	@ (80078f0 <xTaskRemoveFromEventList+0xb4>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4313      	orrs	r3, r2
 8007894:	4a16      	ldr	r2, [pc, #88]	@ (80078f0 <xTaskRemoveFromEventList+0xb4>)
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4a13      	ldr	r2, [pc, #76]	@ (80078f4 <xTaskRemoveFromEventList+0xb8>)
 80078a6:	441a      	add	r2, r3
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe fb81 	bl	8005fb6 <vListInsertEnd>
 80078b4:	e005      	b.n	80078c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3318      	adds	r3, #24
 80078ba:	4619      	mov	r1, r3
 80078bc:	480e      	ldr	r0, [pc, #56]	@ (80078f8 <xTaskRemoveFromEventList+0xbc>)
 80078be:	f7fe fb7a 	bl	8005fb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c6:	4b0d      	ldr	r3, [pc, #52]	@ (80078fc <xTaskRemoveFromEventList+0xc0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d905      	bls.n	80078dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078d0:	2301      	movs	r3, #1
 80078d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007900 <xTaskRemoveFromEventList+0xc4>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	e001      	b.n	80078e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078dc:	2300      	movs	r3, #0
 80078de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078e0:	697b      	ldr	r3, [r7, #20]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	200051ac 	.word	0x200051ac
 80078f0:	2000518c 	.word	0x2000518c
 80078f4:	20005088 	.word	0x20005088
 80078f8:	20005144 	.word	0x20005144
 80078fc:	20005084 	.word	0x20005084
 8007900:	20005198 	.word	0x20005198

08007904 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800790c:	4b06      	ldr	r3, [pc, #24]	@ (8007928 <vTaskInternalSetTimeOutState+0x24>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007914:	4b05      	ldr	r3, [pc, #20]	@ (800792c <vTaskInternalSetTimeOutState+0x28>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	605a      	str	r2, [r3, #4]
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	2000519c 	.word	0x2000519c
 800792c:	20005188 	.word	0x20005188

08007930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10b      	bne.n	8007958 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	e7fd      	b.n	8007954 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60fb      	str	r3, [r7, #12]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007976:	f000 fc7f 	bl	8008278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800797a:	4b1d      	ldr	r3, [pc, #116]	@ (80079f0 <xTaskCheckForTimeOut+0xc0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007992:	d102      	bne.n	800799a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	e023      	b.n	80079e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4b15      	ldr	r3, [pc, #84]	@ (80079f4 <xTaskCheckForTimeOut+0xc4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d007      	beq.n	80079b6 <xTaskCheckForTimeOut+0x86>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d302      	bcc.n	80079b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	e015      	b.n	80079e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d20b      	bcs.n	80079d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ff99 	bl	8007904 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	e004      	b.n	80079e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079de:	2301      	movs	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079e2:	f000 fc7b 	bl	80082dc <vPortExitCritical>

	return xReturn;
 80079e6:	69fb      	ldr	r3, [r7, #28]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3720      	adds	r7, #32
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20005188 	.word	0x20005188
 80079f4:	2000519c 	.word	0x2000519c

080079f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079fc:	4b03      	ldr	r3, [pc, #12]	@ (8007a0c <vTaskMissedYield+0x14>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
}
 8007a02:	bf00      	nop
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20005198 	.word	0x20005198

08007a10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a18:	f000 f852 	bl	8007ac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a1c:	4b06      	ldr	r3, [pc, #24]	@ (8007a38 <prvIdleTask+0x28>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d9f9      	bls.n	8007a18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a24:	4b05      	ldr	r3, [pc, #20]	@ (8007a3c <prvIdleTask+0x2c>)
 8007a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a34:	e7f0      	b.n	8007a18 <prvIdleTask+0x8>
 8007a36:	bf00      	nop
 8007a38:	20005088 	.word	0x20005088
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a46:	2300      	movs	r3, #0
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	e00c      	b.n	8007a66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4a12      	ldr	r2, [pc, #72]	@ (8007aa0 <prvInitialiseTaskLists+0x60>)
 8007a58:	4413      	add	r3, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fa7e 	bl	8005f5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3301      	adds	r3, #1
 8007a64:	607b      	str	r3, [r7, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b06      	cmp	r3, #6
 8007a6a:	d9ef      	bls.n	8007a4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a6c:	480d      	ldr	r0, [pc, #52]	@ (8007aa4 <prvInitialiseTaskLists+0x64>)
 8007a6e:	f7fe fa75 	bl	8005f5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a72:	480d      	ldr	r0, [pc, #52]	@ (8007aa8 <prvInitialiseTaskLists+0x68>)
 8007a74:	f7fe fa72 	bl	8005f5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a78:	480c      	ldr	r0, [pc, #48]	@ (8007aac <prvInitialiseTaskLists+0x6c>)
 8007a7a:	f7fe fa6f 	bl	8005f5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a7e:	480c      	ldr	r0, [pc, #48]	@ (8007ab0 <prvInitialiseTaskLists+0x70>)
 8007a80:	f7fe fa6c 	bl	8005f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a84:	480b      	ldr	r0, [pc, #44]	@ (8007ab4 <prvInitialiseTaskLists+0x74>)
 8007a86:	f7fe fa69 	bl	8005f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab8 <prvInitialiseTaskLists+0x78>)
 8007a8c:	4a05      	ldr	r2, [pc, #20]	@ (8007aa4 <prvInitialiseTaskLists+0x64>)
 8007a8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a90:	4b0a      	ldr	r3, [pc, #40]	@ (8007abc <prvInitialiseTaskLists+0x7c>)
 8007a92:	4a05      	ldr	r2, [pc, #20]	@ (8007aa8 <prvInitialiseTaskLists+0x68>)
 8007a94:	601a      	str	r2, [r3, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20005088 	.word	0x20005088
 8007aa4:	20005114 	.word	0x20005114
 8007aa8:	20005128 	.word	0x20005128
 8007aac:	20005144 	.word	0x20005144
 8007ab0:	20005158 	.word	0x20005158
 8007ab4:	20005170 	.word	0x20005170
 8007ab8:	2000513c 	.word	0x2000513c
 8007abc:	20005140 	.word	0x20005140

08007ac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
	while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ac6:	e019      	b.n	8007afc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ac8:	f000 fbd6 	bl	8008278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007acc:	4b10      	ldr	r3, [pc, #64]	@ (8007b10 <prvCheckTasksWaitingTermination+0x50>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe fac9 	bl	8006070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <prvCheckTasksWaitingTermination+0x54>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8007b14 <prvCheckTasksWaitingTermination+0x54>)
 8007ae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b18 <prvCheckTasksWaitingTermination+0x58>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4a0a      	ldr	r2, [pc, #40]	@ (8007b18 <prvCheckTasksWaitingTermination+0x58>)
 8007af0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007af2:	f000 fbf3 	bl	80082dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f810 	bl	8007b1c <prvDeleteTCB>
	while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007afc:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <prvCheckTasksWaitingTermination+0x58>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e1      	bne.n	8007ac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20005158 	.word	0x20005158
 8007b14:	20005184 	.word	0x20005184
 8007b18:	2000516c 	.word	0x2000516c

08007b1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	334c      	adds	r3, #76	@ 0x4c
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f00d fdc1 	bl	80156b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d108      	bne.n	8007b4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fd8b 	bl	8008658 <vPortFree>
				vPortFree( pxTCB );
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fd88 	bl	8008658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b48:	e019      	b.n	8007b7e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d103      	bne.n	8007b5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fd7f 	bl	8008658 <vPortFree>
	}
 8007b5a:	e010      	b.n	8007b7e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d00b      	beq.n	8007b7e <prvDeleteTCB+0x62>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	60fb      	str	r3, [r7, #12]
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	e7fd      	b.n	8007b7a <prvDeleteTCB+0x5e>
	}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc0 <prvResetNextTaskUnblockTime+0x38>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b98:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ba0:	e008      	b.n	8007bb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba2:	4b07      	ldr	r3, [pc, #28]	@ (8007bc0 <prvResetNextTaskUnblockTime+0x38>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4a04      	ldr	r2, [pc, #16]	@ (8007bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007bb2:	6013      	str	r3, [r2, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	2000513c 	.word	0x2000513c
 8007bc4:	200051a4 	.word	0x200051a4

08007bc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bce:	4b0b      	ldr	r3, [pc, #44]	@ (8007bfc <xTaskGetSchedulerState+0x34>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d102      	bne.n	8007bdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	607b      	str	r3, [r7, #4]
 8007bda:	e008      	b.n	8007bee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bdc:	4b08      	ldr	r3, [pc, #32]	@ (8007c00 <xTaskGetSchedulerState+0x38>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d102      	bne.n	8007bea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007be4:	2302      	movs	r3, #2
 8007be6:	607b      	str	r3, [r7, #4]
 8007be8:	e001      	b.n	8007bee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bea:	2300      	movs	r3, #0
 8007bec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bee:	687b      	ldr	r3, [r7, #4]
	}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	20005190 	.word	0x20005190
 8007c00:	200051ac 	.word	0x200051ac

08007c04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d05e      	beq.n	8007cd8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1e:	4b31      	ldr	r3, [pc, #196]	@ (8007ce4 <xTaskPriorityInherit+0xe0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d24e      	bcs.n	8007cc6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	db06      	blt.n	8007c3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c30:	4b2c      	ldr	r3, [pc, #176]	@ (8007ce4 <xTaskPriorityInherit+0xe0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	f1c3 0207 	rsb	r2, r3, #7
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	6959      	ldr	r1, [r3, #20]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4a26      	ldr	r2, [pc, #152]	@ (8007ce8 <xTaskPriorityInherit+0xe4>)
 8007c50:	4413      	add	r3, r2
 8007c52:	4299      	cmp	r1, r3
 8007c54:	d12f      	bne.n	8007cb6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fa08 	bl	8006070 <uxListRemove>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	43da      	mvns	r2, r3
 8007c72:	4b1e      	ldr	r3, [pc, #120]	@ (8007cec <xTaskPriorityInherit+0xe8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4013      	ands	r3, r2
 8007c78:	4a1c      	ldr	r2, [pc, #112]	@ (8007cec <xTaskPriorityInherit+0xe8>)
 8007c7a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c7c:	4b19      	ldr	r3, [pc, #100]	@ (8007ce4 <xTaskPriorityInherit+0xe0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	409a      	lsls	r2, r3
 8007c8e:	4b17      	ldr	r3, [pc, #92]	@ (8007cec <xTaskPriorityInherit+0xe8>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	4a15      	ldr	r2, [pc, #84]	@ (8007cec <xTaskPriorityInherit+0xe8>)
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4a10      	ldr	r2, [pc, #64]	@ (8007ce8 <xTaskPriorityInherit+0xe4>)
 8007ca6:	441a      	add	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f7fe f981 	bl	8005fb6 <vListInsertEnd>
 8007cb4:	e004      	b.n	8007cc0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce4 <xTaskPriorityInherit+0xe0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e008      	b.n	8007cd8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cca:	4b06      	ldr	r3, [pc, #24]	@ (8007ce4 <xTaskPriorityInherit+0xe0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d201      	bcs.n	8007cd8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
	}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20005084 	.word	0x20005084
 8007ce8:	20005088 	.word	0x20005088
 8007cec:	2000518c 	.word	0x2000518c

08007cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d070      	beq.n	8007de8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d06:	4b3b      	ldr	r3, [pc, #236]	@ (8007df4 <xTaskPriorityDisinherit+0x104>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d00b      	beq.n	8007d28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	60fb      	str	r3, [r7, #12]
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	e7fd      	b.n	8007d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10b      	bne.n	8007d48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	60bb      	str	r3, [r7, #8]
}
 8007d42:	bf00      	nop
 8007d44:	bf00      	nop
 8007d46:	e7fd      	b.n	8007d44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d4c:	1e5a      	subs	r2, r3, #1
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d044      	beq.n	8007de8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d140      	bne.n	8007de8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe f980 	bl	8006070 <uxListRemove>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d115      	bne.n	8007da2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7a:	491f      	ldr	r1, [pc, #124]	@ (8007df8 <xTaskPriorityDisinherit+0x108>)
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <xTaskPriorityDisinherit+0xb2>
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d90:	2201      	movs	r2, #1
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	43da      	mvns	r2, r3
 8007d98:	4b18      	ldr	r3, [pc, #96]	@ (8007dfc <xTaskPriorityDisinherit+0x10c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	4a17      	ldr	r2, [pc, #92]	@ (8007dfc <xTaskPriorityDisinherit+0x10c>)
 8007da0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dae:	f1c3 0207 	rsb	r2, r3, #7
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dba:	2201      	movs	r2, #1
 8007dbc:	409a      	lsls	r2, r3
 8007dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007dfc <xTaskPriorityDisinherit+0x10c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8007dfc <xTaskPriorityDisinherit+0x10c>)
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4a08      	ldr	r2, [pc, #32]	@ (8007df8 <xTaskPriorityDisinherit+0x108>)
 8007dd6:	441a      	add	r2, r3
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fe f8e9 	bl	8005fb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007de4:	2301      	movs	r3, #1
 8007de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007de8:	697b      	ldr	r3, [r7, #20]
	}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20005084 	.word	0x20005084
 8007df8:	20005088 	.word	0x20005088
 8007dfc:	2000518c 	.word	0x2000518c

08007e00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d079      	beq.n	8007f0c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	60fb      	str	r3, [r7, #12]
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d902      	bls.n	8007e48 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	e002      	b.n	8007e4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d059      	beq.n	8007f0c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d154      	bne.n	8007f0c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e62:	4b2c      	ldr	r3, [pc, #176]	@ (8007f14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d10b      	bne.n	8007e84 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	60bb      	str	r3, [r7, #8]
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	e7fd      	b.n	8007e80 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	db04      	blt.n	8007ea2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f1c3 0207 	rsb	r2, r3, #7
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	6959      	ldr	r1, [r3, #20]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4a19      	ldr	r2, [pc, #100]	@ (8007f18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007eb2:	4413      	add	r3, r2
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	d129      	bne.n	8007f0c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe f8d7 	bl	8006070 <uxListRemove>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ecc:	2201      	movs	r2, #1
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	43da      	mvns	r2, r3
 8007ed4:	4b11      	ldr	r3, [pc, #68]	@ (8007f1c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4013      	ands	r3, r2
 8007eda:	4a10      	ldr	r2, [pc, #64]	@ (8007f1c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007edc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	409a      	lsls	r2, r3
 8007ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f1c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	4a0b      	ldr	r2, [pc, #44]	@ (8007f1c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4a06      	ldr	r2, [pc, #24]	@ (8007f18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007efe:	441a      	add	r2, r3
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4619      	mov	r1, r3
 8007f06:	4610      	mov	r0, r2
 8007f08:	f7fe f855 	bl	8005fb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f0c:	bf00      	nop
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20005084 	.word	0x20005084
 8007f18:	20005088 	.word	0x20005088
 8007f1c:	2000518c 	.word	0x2000518c

08007f20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f24:	4b07      	ldr	r3, [pc, #28]	@ (8007f44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f32:	3201      	adds	r2, #1
 8007f34:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007f36:	4b03      	ldr	r3, [pc, #12]	@ (8007f44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f38:	681b      	ldr	r3, [r3, #0]
	}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	20005084 	.word	0x20005084

08007f48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f52:	4b29      	ldr	r3, [pc, #164]	@ (8007ff8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f58:	4b28      	ldr	r3, [pc, #160]	@ (8007ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe f886 	bl	8006070 <uxListRemove>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10b      	bne.n	8007f82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f6a:	4b24      	ldr	r3, [pc, #144]	@ (8007ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f70:	2201      	movs	r2, #1
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	43da      	mvns	r2, r3
 8007f78:	4b21      	ldr	r3, [pc, #132]	@ (8008000 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	4a20      	ldr	r2, [pc, #128]	@ (8008000 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f88:	d10a      	bne.n	8007fa0 <prvAddCurrentTaskToDelayedList+0x58>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d007      	beq.n	8007fa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f90:	4b1a      	ldr	r3, [pc, #104]	@ (8007ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	481a      	ldr	r0, [pc, #104]	@ (8008004 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f9a:	f7fe f80c 	bl	8005fb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f9e:	e026      	b.n	8007fee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fa8:	4b14      	ldr	r3, [pc, #80]	@ (8007ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d209      	bcs.n	8007fcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fb8:	4b13      	ldr	r3, [pc, #76]	@ (8008008 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8007ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	f7fe f81a 	bl	8005ffe <vListInsert>
}
 8007fca:	e010      	b.n	8007fee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800800c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ffc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f7fe f810 	bl	8005ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fde:	4b0c      	ldr	r3, [pc, #48]	@ (8008010 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d202      	bcs.n	8007fee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007fe8:	4a09      	ldr	r2, [pc, #36]	@ (8008010 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6013      	str	r3, [r2, #0]
}
 8007fee:	bf00      	nop
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20005188 	.word	0x20005188
 8007ffc:	20005084 	.word	0x20005084
 8008000:	2000518c 	.word	0x2000518c
 8008004:	20005170 	.word	0x20005170
 8008008:	20005140 	.word	0x20005140
 800800c:	2000513c 	.word	0x2000513c
 8008010:	200051a4 	.word	0x200051a4

08008014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3b04      	subs	r3, #4
 8008024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800802c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3b04      	subs	r3, #4
 8008032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f023 0201 	bic.w	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3b04      	subs	r3, #4
 8008042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008044:	4a0c      	ldr	r2, [pc, #48]	@ (8008078 <pxPortInitialiseStack+0x64>)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3b14      	subs	r3, #20
 800804e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3b04      	subs	r3, #4
 800805a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f06f 0202 	mvn.w	r2, #2
 8008062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3b20      	subs	r3, #32
 8008068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800806a:	68fb      	ldr	r3, [r7, #12]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	0800807d 	.word	0x0800807d

0800807c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008086:	4b13      	ldr	r3, [pc, #76]	@ (80080d4 <prvTaskExitError+0x58>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d00b      	beq.n	80080a8 <prvTaskExitError+0x2c>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	60fb      	str	r3, [r7, #12]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <prvTaskExitError+0x28>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	60bb      	str	r3, [r7, #8]
}
 80080ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080bc:	bf00      	nop
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0fc      	beq.n	80080be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000048 	.word	0x20000048
	...

080080e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080e0:	4b07      	ldr	r3, [pc, #28]	@ (8008100 <pxCurrentTCBConst2>)
 80080e2:	6819      	ldr	r1, [r3, #0]
 80080e4:	6808      	ldr	r0, [r1, #0]
 80080e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ea:	f380 8809 	msr	PSP, r0
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f04f 0000 	mov.w	r0, #0
 80080f6:	f380 8811 	msr	BASEPRI, r0
 80080fa:	4770      	bx	lr
 80080fc:	f3af 8000 	nop.w

08008100 <pxCurrentTCBConst2>:
 8008100:	20005084 	.word	0x20005084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop

08008108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008108:	4808      	ldr	r0, [pc, #32]	@ (800812c <prvPortStartFirstTask+0x24>)
 800810a:	6800      	ldr	r0, [r0, #0]
 800810c:	6800      	ldr	r0, [r0, #0]
 800810e:	f380 8808 	msr	MSP, r0
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f380 8814 	msr	CONTROL, r0
 800811a:	b662      	cpsie	i
 800811c:	b661      	cpsie	f
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	df00      	svc	0
 8008128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800812a:	bf00      	nop
 800812c:	e000ed08 	.word	0xe000ed08

08008130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008136:	4b47      	ldr	r3, [pc, #284]	@ (8008254 <xPortStartScheduler+0x124>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a47      	ldr	r2, [pc, #284]	@ (8008258 <xPortStartScheduler+0x128>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d10b      	bne.n	8008158 <xPortStartScheduler+0x28>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008158:	4b3e      	ldr	r3, [pc, #248]	@ (8008254 <xPortStartScheduler+0x124>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a3f      	ldr	r2, [pc, #252]	@ (800825c <xPortStartScheduler+0x12c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d10b      	bne.n	800817a <xPortStartScheduler+0x4a>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	613b      	str	r3, [r7, #16]
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	e7fd      	b.n	8008176 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800817a:	4b39      	ldr	r3, [pc, #228]	@ (8008260 <xPortStartScheduler+0x130>)
 800817c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	22ff      	movs	r2, #255	@ 0xff
 800818a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800819c:	b2da      	uxtb	r2, r3
 800819e:	4b31      	ldr	r3, [pc, #196]	@ (8008264 <xPortStartScheduler+0x134>)
 80081a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081a2:	4b31      	ldr	r3, [pc, #196]	@ (8008268 <xPortStartScheduler+0x138>)
 80081a4:	2207      	movs	r2, #7
 80081a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081a8:	e009      	b.n	80081be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80081aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008268 <xPortStartScheduler+0x138>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008268 <xPortStartScheduler+0x138>)
 80081b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c6:	2b80      	cmp	r3, #128	@ 0x80
 80081c8:	d0ef      	beq.n	80081aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081ca:	4b27      	ldr	r3, [pc, #156]	@ (8008268 <xPortStartScheduler+0x138>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f1c3 0307 	rsb	r3, r3, #7
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d00b      	beq.n	80081ee <xPortStartScheduler+0xbe>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60bb      	str	r3, [r7, #8]
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	e7fd      	b.n	80081ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008268 <xPortStartScheduler+0x138>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008268 <xPortStartScheduler+0x138>)
 80081f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008268 <xPortStartScheduler+0x138>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008200:	4a19      	ldr	r2, [pc, #100]	@ (8008268 <xPortStartScheduler+0x138>)
 8008202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	b2da      	uxtb	r2, r3
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800820c:	4b17      	ldr	r3, [pc, #92]	@ (800826c <xPortStartScheduler+0x13c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a16      	ldr	r2, [pc, #88]	@ (800826c <xPortStartScheduler+0x13c>)
 8008212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008218:	4b14      	ldr	r3, [pc, #80]	@ (800826c <xPortStartScheduler+0x13c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a13      	ldr	r2, [pc, #76]	@ (800826c <xPortStartScheduler+0x13c>)
 800821e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008224:	f000 f8da 	bl	80083dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008228:	4b11      	ldr	r3, [pc, #68]	@ (8008270 <xPortStartScheduler+0x140>)
 800822a:	2200      	movs	r2, #0
 800822c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800822e:	f000 f8f9 	bl	8008424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008232:	4b10      	ldr	r3, [pc, #64]	@ (8008274 <xPortStartScheduler+0x144>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a0f      	ldr	r2, [pc, #60]	@ (8008274 <xPortStartScheduler+0x144>)
 8008238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800823c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800823e:	f7ff ff63 	bl	8008108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008242:	f7ff fa71 	bl	8007728 <vTaskSwitchContext>
	prvTaskExitError();
 8008246:	f7ff ff19 	bl	800807c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	e000ed00 	.word	0xe000ed00
 8008258:	410fc271 	.word	0x410fc271
 800825c:	410fc270 	.word	0x410fc270
 8008260:	e000e400 	.word	0xe000e400
 8008264:	200051b0 	.word	0x200051b0
 8008268:	200051b4 	.word	0x200051b4
 800826c:	e000ed20 	.word	0xe000ed20
 8008270:	20000048 	.word	0x20000048
 8008274:	e000ef34 	.word	0xe000ef34

08008278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008292:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <vPortEnterCritical+0x5c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3301      	adds	r3, #1
 8008298:	4a0e      	ldr	r2, [pc, #56]	@ (80082d4 <vPortEnterCritical+0x5c>)
 800829a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800829c:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <vPortEnterCritical+0x5c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d110      	bne.n	80082c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082a4:	4b0c      	ldr	r3, [pc, #48]	@ (80082d8 <vPortEnterCritical+0x60>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	603b      	str	r3, [r7, #0]
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	e7fd      	b.n	80082c2 <vPortEnterCritical+0x4a>
	}
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20000048 	.word	0x20000048
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082e2:	4b12      	ldr	r3, [pc, #72]	@ (800832c <vPortExitCritical+0x50>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10b      	bne.n	8008302 <vPortExitCritical+0x26>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	607b      	str	r3, [r7, #4]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008302:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <vPortExitCritical+0x50>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3b01      	subs	r3, #1
 8008308:	4a08      	ldr	r2, [pc, #32]	@ (800832c <vPortExitCritical+0x50>)
 800830a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800830c:	4b07      	ldr	r3, [pc, #28]	@ (800832c <vPortExitCritical+0x50>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <vPortExitCritical+0x44>
 8008314:	2300      	movs	r3, #0
 8008316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f383 8811 	msr	BASEPRI, r3
}
 800831e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	20000048 	.word	0x20000048

08008330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008330:	f3ef 8009 	mrs	r0, PSP
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4b15      	ldr	r3, [pc, #84]	@ (8008390 <pxCurrentTCBConst>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f01e 0f10 	tst.w	lr, #16
 8008340:	bf08      	it	eq
 8008342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	6010      	str	r0, [r2, #0]
 800834c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008354:	f380 8811 	msr	BASEPRI, r0
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f7ff f9e2 	bl	8007728 <vTaskSwitchContext>
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	f380 8811 	msr	BASEPRI, r0
 800836c:	bc09      	pop	{r0, r3}
 800836e:	6819      	ldr	r1, [r3, #0]
 8008370:	6808      	ldr	r0, [r1, #0]
 8008372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008376:	f01e 0f10 	tst.w	lr, #16
 800837a:	bf08      	it	eq
 800837c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008380:	f380 8809 	msr	PSP, r0
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w

08008390 <pxCurrentTCBConst>:
 8008390:	20005084 	.word	0x20005084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop

08008398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	607b      	str	r3, [r7, #4]
}
 80083b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083b2:	f7ff f8ff 	bl	80075b4 <xTaskIncrementTick>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083bc:	4b06      	ldr	r3, [pc, #24]	@ (80083d8 <SysTick_Handler+0x40>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	2300      	movs	r3, #0
 80083c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	f383 8811 	msr	BASEPRI, r3
}
 80083ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008410 <vPortSetupTimerInterrupt+0x34>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008414 <vPortSetupTimerInterrupt+0x38>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <vPortSetupTimerInterrupt+0x3c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0a      	ldr	r2, [pc, #40]	@ (800841c <vPortSetupTimerInterrupt+0x40>)
 80083f2:	fba2 2303 	umull	r2, r3, r2, r3
 80083f6:	099b      	lsrs	r3, r3, #6
 80083f8:	4a09      	ldr	r2, [pc, #36]	@ (8008420 <vPortSetupTimerInterrupt+0x44>)
 80083fa:	3b01      	subs	r3, #1
 80083fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083fe:	4b04      	ldr	r3, [pc, #16]	@ (8008410 <vPortSetupTimerInterrupt+0x34>)
 8008400:	2207      	movs	r2, #7
 8008402:	601a      	str	r2, [r3, #0]
}
 8008404:	bf00      	nop
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	e000e010 	.word	0xe000e010
 8008414:	e000e018 	.word	0xe000e018
 8008418:	20000028 	.word	0x20000028
 800841c:	10624dd3 	.word	0x10624dd3
 8008420:	e000e014 	.word	0xe000e014

08008424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008434 <vPortEnableVFP+0x10>
 8008428:	6801      	ldr	r1, [r0, #0]
 800842a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800842e:	6001      	str	r1, [r0, #0]
 8008430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008432:	bf00      	nop
 8008434:	e000ed88 	.word	0xe000ed88

08008438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800843e:	f3ef 8305 	mrs	r3, IPSR
 8008442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b0f      	cmp	r3, #15
 8008448:	d915      	bls.n	8008476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800844a:	4a18      	ldr	r2, [pc, #96]	@ (80084ac <vPortValidateInterruptPriority+0x74>)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4413      	add	r3, r2
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008454:	4b16      	ldr	r3, [pc, #88]	@ (80084b0 <vPortValidateInterruptPriority+0x78>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	7afa      	ldrb	r2, [r7, #11]
 800845a:	429a      	cmp	r2, r3
 800845c:	d20b      	bcs.n	8008476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	607b      	str	r3, [r7, #4]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008476:	4b0f      	ldr	r3, [pc, #60]	@ (80084b4 <vPortValidateInterruptPriority+0x7c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800847e:	4b0e      	ldr	r3, [pc, #56]	@ (80084b8 <vPortValidateInterruptPriority+0x80>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d90b      	bls.n	800849e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	603b      	str	r3, [r7, #0]
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	e7fd      	b.n	800849a <vPortValidateInterruptPriority+0x62>
	}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	e000e3f0 	.word	0xe000e3f0
 80084b0:	200051b0 	.word	0x200051b0
 80084b4:	e000ed0c 	.word	0xe000ed0c
 80084b8:	200051b4 	.word	0x200051b4

080084bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	@ 0x28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084c8:	f7fe ffa6 	bl	8007418 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008640 <pvPortMalloc+0x184>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084d4:	f000 f924 	bl	8008720 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008644 <pvPortMalloc+0x188>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4013      	ands	r3, r2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f040 8095 	bne.w	8008610 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01e      	beq.n	800852a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80084ec:	2208      	movs	r2, #8
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d015      	beq.n	800852a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f023 0307 	bic.w	r3, r3, #7
 8008504:	3308      	adds	r3, #8
 8008506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <pvPortMalloc+0x6e>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	617b      	str	r3, [r7, #20]
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d06f      	beq.n	8008610 <pvPortMalloc+0x154>
 8008530:	4b45      	ldr	r3, [pc, #276]	@ (8008648 <pvPortMalloc+0x18c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	429a      	cmp	r2, r3
 8008538:	d86a      	bhi.n	8008610 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800853a:	4b44      	ldr	r3, [pc, #272]	@ (800864c <pvPortMalloc+0x190>)
 800853c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800853e:	4b43      	ldr	r3, [pc, #268]	@ (800864c <pvPortMalloc+0x190>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008544:	e004      	b.n	8008550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d903      	bls.n	8008562 <pvPortMalloc+0xa6>
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1f1      	bne.n	8008546 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008562:	4b37      	ldr	r3, [pc, #220]	@ (8008640 <pvPortMalloc+0x184>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008568:	429a      	cmp	r2, r3
 800856a:	d051      	beq.n	8008610 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2208      	movs	r2, #8
 8008572:	4413      	add	r3, r2
 8008574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	1ad2      	subs	r2, r2, r3
 8008586:	2308      	movs	r3, #8
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	429a      	cmp	r2, r3
 800858c:	d920      	bls.n	80085d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800858e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <pvPortMalloc+0xfc>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085ca:	69b8      	ldr	r0, [r7, #24]
 80085cc:	f000 f90a 	bl	80087e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008648 <pvPortMalloc+0x18c>)
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	4a1b      	ldr	r2, [pc, #108]	@ (8008648 <pvPortMalloc+0x18c>)
 80085dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085de:	4b1a      	ldr	r3, [pc, #104]	@ (8008648 <pvPortMalloc+0x18c>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008650 <pvPortMalloc+0x194>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d203      	bcs.n	80085f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085ea:	4b17      	ldr	r3, [pc, #92]	@ (8008648 <pvPortMalloc+0x18c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <pvPortMalloc+0x194>)
 80085f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	4b13      	ldr	r3, [pc, #76]	@ (8008644 <pvPortMalloc+0x188>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008606:	4b13      	ldr	r3, [pc, #76]	@ (8008654 <pvPortMalloc+0x198>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3301      	adds	r3, #1
 800860c:	4a11      	ldr	r2, [pc, #68]	@ (8008654 <pvPortMalloc+0x198>)
 800860e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008610:	f7fe ff10 	bl	8007434 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00b      	beq.n	8008636 <pvPortMalloc+0x17a>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60fb      	str	r3, [r7, #12]
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	e7fd      	b.n	8008632 <pvPortMalloc+0x176>
	return pvReturn;
 8008636:	69fb      	ldr	r3, [r7, #28]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3728      	adds	r7, #40	@ 0x28
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	2000ee00 	.word	0x2000ee00
 8008644:	2000ee14 	.word	0x2000ee14
 8008648:	2000ee04 	.word	0x2000ee04
 800864c:	2000edf8 	.word	0x2000edf8
 8008650:	2000ee08 	.word	0x2000ee08
 8008654:	2000ee0c 	.word	0x2000ee0c

08008658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d04f      	beq.n	800870a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800866a:	2308      	movs	r3, #8
 800866c:	425b      	negs	r3, r3
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4413      	add	r3, r2
 8008672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	4b25      	ldr	r3, [pc, #148]	@ (8008714 <vPortFree+0xbc>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4013      	ands	r3, r2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10b      	bne.n	800869e <vPortFree+0x46>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	60fb      	str	r3, [r7, #12]
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	e7fd      	b.n	800869a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <vPortFree+0x66>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	60bb      	str	r3, [r7, #8]
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	e7fd      	b.n	80086ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	4b14      	ldr	r3, [pc, #80]	@ (8008714 <vPortFree+0xbc>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4013      	ands	r3, r2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01e      	beq.n	800870a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11a      	bne.n	800870a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008714 <vPortFree+0xbc>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	43db      	mvns	r3, r3
 80086de:	401a      	ands	r2, r3
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086e4:	f7fe fe98 	bl	8007418 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <vPortFree+0xc0>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4413      	add	r3, r2
 80086f2:	4a09      	ldr	r2, [pc, #36]	@ (8008718 <vPortFree+0xc0>)
 80086f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086f6:	6938      	ldr	r0, [r7, #16]
 80086f8:	f000 f874 	bl	80087e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086fc:	4b07      	ldr	r3, [pc, #28]	@ (800871c <vPortFree+0xc4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3301      	adds	r3, #1
 8008702:	4a06      	ldr	r2, [pc, #24]	@ (800871c <vPortFree+0xc4>)
 8008704:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008706:	f7fe fe95 	bl	8007434 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800870a:	bf00      	nop
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	2000ee14 	.word	0x2000ee14
 8008718:	2000ee04 	.word	0x2000ee04
 800871c:	2000ee10 	.word	0x2000ee10

08008720 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008726:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800872a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800872c:	4b27      	ldr	r3, [pc, #156]	@ (80087cc <prvHeapInit+0xac>)
 800872e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00c      	beq.n	8008754 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3307      	adds	r3, #7
 800873e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0307 	bic.w	r3, r3, #7
 8008746:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	4a1f      	ldr	r2, [pc, #124]	@ (80087cc <prvHeapInit+0xac>)
 8008750:	4413      	add	r3, r2
 8008752:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008758:	4a1d      	ldr	r2, [pc, #116]	@ (80087d0 <prvHeapInit+0xb0>)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800875e:	4b1c      	ldr	r3, [pc, #112]	@ (80087d0 <prvHeapInit+0xb0>)
 8008760:	2200      	movs	r2, #0
 8008762:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	4413      	add	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800876c:	2208      	movs	r2, #8
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1a9b      	subs	r3, r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0307 	bic.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a15      	ldr	r2, [pc, #84]	@ (80087d4 <prvHeapInit+0xb4>)
 8008780:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008782:	4b14      	ldr	r3, [pc, #80]	@ (80087d4 <prvHeapInit+0xb4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2200      	movs	r2, #0
 8008788:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800878a:	4b12      	ldr	r3, [pc, #72]	@ (80087d4 <prvHeapInit+0xb4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	1ad2      	subs	r2, r2, r3
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087a0:	4b0c      	ldr	r3, [pc, #48]	@ (80087d4 <prvHeapInit+0xb4>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	4a0a      	ldr	r2, [pc, #40]	@ (80087d8 <prvHeapInit+0xb8>)
 80087ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	4a09      	ldr	r2, [pc, #36]	@ (80087dc <prvHeapInit+0xbc>)
 80087b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087b8:	4b09      	ldr	r3, [pc, #36]	@ (80087e0 <prvHeapInit+0xc0>)
 80087ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80087be:	601a      	str	r2, [r3, #0]
}
 80087c0:	bf00      	nop
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	200051b8 	.word	0x200051b8
 80087d0:	2000edf8 	.word	0x2000edf8
 80087d4:	2000ee00 	.word	0x2000ee00
 80087d8:	2000ee08 	.word	0x2000ee08
 80087dc:	2000ee04 	.word	0x2000ee04
 80087e0:	2000ee14 	.word	0x2000ee14

080087e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087ec:	4b28      	ldr	r3, [pc, #160]	@ (8008890 <prvInsertBlockIntoFreeList+0xac>)
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	e002      	b.n	80087f8 <prvInsertBlockIntoFreeList+0x14>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d8f7      	bhi.n	80087f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	4413      	add	r3, r2
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d108      	bne.n	8008826 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	441a      	add	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	441a      	add	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d118      	bne.n	800886c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4b15      	ldr	r3, [pc, #84]	@ (8008894 <prvInsertBlockIntoFreeList+0xb0>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	429a      	cmp	r2, r3
 8008844:	d00d      	beq.n	8008862 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	441a      	add	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	e008      	b.n	8008874 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008862:	4b0c      	ldr	r3, [pc, #48]	@ (8008894 <prvInsertBlockIntoFreeList+0xb0>)
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	e003      	b.n	8008874 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	429a      	cmp	r2, r3
 800887a:	d002      	beq.n	8008882 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	2000edf8 	.word	0x2000edf8
 8008894:	2000ee00 	.word	0x2000ee00

08008898 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80088a2:	f009 fdcf 	bl	8012444 <sys_timeouts_sleeptime>
 80088a6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ae:	d10b      	bne.n	80088c8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80088b0:	4813      	ldr	r0, [pc, #76]	@ (8008900 <tcpip_timeouts_mbox_fetch+0x68>)
 80088b2:	f00c fb44 	bl	8014f3e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80088b6:	2200      	movs	r2, #0
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f00c fab6 	bl	8014e2c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80088c0:	480f      	ldr	r0, [pc, #60]	@ (8008900 <tcpip_timeouts_mbox_fetch+0x68>)
 80088c2:	f00c fb2d 	bl	8014f20 <sys_mutex_lock>
    return;
 80088c6:	e018      	b.n	80088fa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d102      	bne.n	80088d4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80088ce:	f009 fd7f 	bl	80123d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80088d2:	e7e6      	b.n	80088a2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80088d4:	480a      	ldr	r0, [pc, #40]	@ (8008900 <tcpip_timeouts_mbox_fetch+0x68>)
 80088d6:	f00c fb32 	bl	8014f3e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f00c faa4 	bl	8014e2c <sys_arch_mbox_fetch>
 80088e4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80088e6:	4806      	ldr	r0, [pc, #24]	@ (8008900 <tcpip_timeouts_mbox_fetch+0x68>)
 80088e8:	f00c fb1a 	bl	8014f20 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f2:	d102      	bne.n	80088fa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80088f4:	f009 fd6c 	bl	80123d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80088f8:	e7d3      	b.n	80088a2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	2000ee24 	.word	0x2000ee24

08008904 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800890c:	4810      	ldr	r0, [pc, #64]	@ (8008950 <tcpip_thread+0x4c>)
 800890e:	f00c fb07 	bl	8014f20 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008912:	4b10      	ldr	r3, [pc, #64]	@ (8008954 <tcpip_thread+0x50>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800891a:	4b0e      	ldr	r3, [pc, #56]	@ (8008954 <tcpip_thread+0x50>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a0e      	ldr	r2, [pc, #56]	@ (8008958 <tcpip_thread+0x54>)
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	4610      	mov	r0, r2
 8008924:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	4619      	mov	r1, r3
 800892c:	480b      	ldr	r0, [pc, #44]	@ (800895c <tcpip_thread+0x58>)
 800892e:	f7ff ffb3 	bl	8008898 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008938:	4b09      	ldr	r3, [pc, #36]	@ (8008960 <tcpip_thread+0x5c>)
 800893a:	2291      	movs	r2, #145	@ 0x91
 800893c:	4909      	ldr	r1, [pc, #36]	@ (8008964 <tcpip_thread+0x60>)
 800893e:	480a      	ldr	r0, [pc, #40]	@ (8008968 <tcpip_thread+0x64>)
 8008940:	f00c fcd6 	bl	80152f0 <iprintf>
      continue;
 8008944:	e003      	b.n	800894e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f80f 	bl	800896c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800894e:	e7ea      	b.n	8008926 <tcpip_thread+0x22>
 8008950:	2000ee24 	.word	0x2000ee24
 8008954:	2000ee18 	.word	0x2000ee18
 8008958:	2000ee1c 	.word	0x2000ee1c
 800895c:	2000ee20 	.word	0x2000ee20
 8008960:	08016d68 	.word	0x08016d68
 8008964:	08016d98 	.word	0x08016d98
 8008968:	08016db8 	.word	0x08016db8

0800896c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d026      	beq.n	80089ca <tcpip_thread_handle_msg+0x5e>
 800897c:	2b02      	cmp	r3, #2
 800897e:	dc2b      	bgt.n	80089d8 <tcpip_thread_handle_msg+0x6c>
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <tcpip_thread_handle_msg+0x1e>
 8008984:	2b01      	cmp	r3, #1
 8008986:	d015      	beq.n	80089b4 <tcpip_thread_handle_msg+0x48>
 8008988:	e026      	b.n	80089d8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6850      	ldr	r0, [r2, #4]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6892      	ldr	r2, [r2, #8]
 8008996:	4611      	mov	r1, r2
 8008998:	4798      	blx	r3
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f003 f91b 	bl	800bbe0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	2009      	movs	r0, #9
 80089ae:	f002 fa73 	bl	800ae98 <memp_free>
      break;
 80089b2:	e018      	b.n	80089e6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6892      	ldr	r2, [r2, #8]
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	2008      	movs	r0, #8
 80089c4:	f002 fa68 	bl	800ae98 <memp_free>
      break;
 80089c8:	e00d      	b.n	80089e6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	6892      	ldr	r2, [r2, #8]
 80089d2:	4610      	mov	r0, r2
 80089d4:	4798      	blx	r3
      break;
 80089d6:	e006      	b.n	80089e6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80089d8:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <tcpip_thread_handle_msg+0x84>)
 80089da:	22cf      	movs	r2, #207	@ 0xcf
 80089dc:	4905      	ldr	r1, [pc, #20]	@ (80089f4 <tcpip_thread_handle_msg+0x88>)
 80089de:	4806      	ldr	r0, [pc, #24]	@ (80089f8 <tcpip_thread_handle_msg+0x8c>)
 80089e0:	f00c fc86 	bl	80152f0 <iprintf>
      break;
 80089e4:	bf00      	nop
  }
}
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	08016d68 	.word	0x08016d68
 80089f4:	08016d98 	.word	0x08016d98
 80089f8:	08016db8 	.word	0x08016db8

080089fc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008a08:	481a      	ldr	r0, [pc, #104]	@ (8008a74 <tcpip_inpkt+0x78>)
 8008a0a:	f00c fa4e 	bl	8014eaa <sys_mbox_valid>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <tcpip_inpkt+0x24>
 8008a14:	4b18      	ldr	r3, [pc, #96]	@ (8008a78 <tcpip_inpkt+0x7c>)
 8008a16:	22fc      	movs	r2, #252	@ 0xfc
 8008a18:	4918      	ldr	r1, [pc, #96]	@ (8008a7c <tcpip_inpkt+0x80>)
 8008a1a:	4819      	ldr	r0, [pc, #100]	@ (8008a80 <tcpip_inpkt+0x84>)
 8008a1c:	f00c fc68 	bl	80152f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008a20:	2009      	movs	r0, #9
 8008a22:	f002 f9c3 	bl	800adac <memp_malloc>
 8008a26:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d102      	bne.n	8008a34 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a32:	e01a      	b.n	8008a6a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008a4c:	6979      	ldr	r1, [r7, #20]
 8008a4e:	4809      	ldr	r0, [pc, #36]	@ (8008a74 <tcpip_inpkt+0x78>)
 8008a50:	f00c f9d2 	bl	8014df8 <sys_mbox_trypost>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d006      	beq.n	8008a68 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008a5a:	6979      	ldr	r1, [r7, #20]
 8008a5c:	2009      	movs	r0, #9
 8008a5e:	f002 fa1b 	bl	800ae98 <memp_free>
    return ERR_MEM;
 8008a62:	f04f 33ff 	mov.w	r3, #4294967295
 8008a66:	e000      	b.n	8008a6a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008a68:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	2000ee20 	.word	0x2000ee20
 8008a78:	08016d68 	.word	0x08016d68
 8008a7c:	08016de0 	.word	0x08016de0
 8008a80:	08016db8 	.word	0x08016db8

08008a84 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008a94:	f003 0318 	and.w	r3, r3, #24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d006      	beq.n	8008aaa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008a9c:	4a08      	ldr	r2, [pc, #32]	@ (8008ac0 <tcpip_input+0x3c>)
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff ffab 	bl	80089fc <tcpip_inpkt>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	e005      	b.n	8008ab6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008aaa:	4a06      	ldr	r2, [pc, #24]	@ (8008ac4 <tcpip_input+0x40>)
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff ffa4 	bl	80089fc <tcpip_inpkt>
 8008ab4:	4603      	mov	r3, r0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	08014c09 	.word	0x08014c09
 8008ac4:	08013b11 	.word	0x08013b11

08008ac8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008ad2:	4819      	ldr	r0, [pc, #100]	@ (8008b38 <tcpip_try_callback+0x70>)
 8008ad4:	f00c f9e9 	bl	8014eaa <sys_mbox_valid>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <tcpip_try_callback+0x24>
 8008ade:	4b17      	ldr	r3, [pc, #92]	@ (8008b3c <tcpip_try_callback+0x74>)
 8008ae0:	f240 125d 	movw	r2, #349	@ 0x15d
 8008ae4:	4916      	ldr	r1, [pc, #88]	@ (8008b40 <tcpip_try_callback+0x78>)
 8008ae6:	4817      	ldr	r0, [pc, #92]	@ (8008b44 <tcpip_try_callback+0x7c>)
 8008ae8:	f00c fc02 	bl	80152f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008aec:	2008      	movs	r0, #8
 8008aee:	f002 f95d 	bl	800adac <memp_malloc>
 8008af2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008afa:	f04f 33ff 	mov.w	r3, #4294967295
 8008afe:	e017      	b.n	8008b30 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2201      	movs	r2, #1
 8008b04:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	4808      	ldr	r0, [pc, #32]	@ (8008b38 <tcpip_try_callback+0x70>)
 8008b16:	f00c f96f 	bl	8014df8 <sys_mbox_trypost>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d006      	beq.n	8008b2e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008b20:	68f9      	ldr	r1, [r7, #12]
 8008b22:	2008      	movs	r0, #8
 8008b24:	f002 f9b8 	bl	800ae98 <memp_free>
    return ERR_MEM;
 8008b28:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2c:	e000      	b.n	8008b30 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	2000ee20 	.word	0x2000ee20
 8008b3c:	08016d68 	.word	0x08016d68
 8008b40:	08016de0 	.word	0x08016de0
 8008b44:	08016db8 	.word	0x08016db8

08008b48 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af02      	add	r7, sp, #8
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008b52:	f001 fc72 	bl	800a43a <lwip_init>

  tcpip_init_done = initfunc;
 8008b56:	4a17      	ldr	r2, [pc, #92]	@ (8008bb4 <tcpip_init+0x6c>)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008b5c:	4a16      	ldr	r2, [pc, #88]	@ (8008bb8 <tcpip_init+0x70>)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008b62:	2106      	movs	r1, #6
 8008b64:	4815      	ldr	r0, [pc, #84]	@ (8008bbc <tcpip_init+0x74>)
 8008b66:	f00c f925 	bl	8014db4 <sys_mbox_new>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d006      	beq.n	8008b7e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008b70:	4b13      	ldr	r3, [pc, #76]	@ (8008bc0 <tcpip_init+0x78>)
 8008b72:	f240 2261 	movw	r2, #609	@ 0x261
 8008b76:	4913      	ldr	r1, [pc, #76]	@ (8008bc4 <tcpip_init+0x7c>)
 8008b78:	4813      	ldr	r0, [pc, #76]	@ (8008bc8 <tcpip_init+0x80>)
 8008b7a:	f00c fbb9 	bl	80152f0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008b7e:	4813      	ldr	r0, [pc, #76]	@ (8008bcc <tcpip_init+0x84>)
 8008b80:	f00c f9b2 	bl	8014ee8 <sys_mutex_new>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d006      	beq.n	8008b98 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc0 <tcpip_init+0x78>)
 8008b8c:	f240 2265 	movw	r2, #613	@ 0x265
 8008b90:	490f      	ldr	r1, [pc, #60]	@ (8008bd0 <tcpip_init+0x88>)
 8008b92:	480d      	ldr	r0, [pc, #52]	@ (8008bc8 <tcpip_init+0x80>)
 8008b94:	f00c fbac 	bl	80152f0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	490c      	ldr	r1, [pc, #48]	@ (8008bd4 <tcpip_init+0x8c>)
 8008ba4:	480c      	ldr	r0, [pc, #48]	@ (8008bd8 <tcpip_init+0x90>)
 8008ba6:	f00c f9d7 	bl	8014f58 <sys_thread_new>
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	2000ee18 	.word	0x2000ee18
 8008bb8:	2000ee1c 	.word	0x2000ee1c
 8008bbc:	2000ee20 	.word	0x2000ee20
 8008bc0:	08016d68 	.word	0x08016d68
 8008bc4:	08016df0 	.word	0x08016df0
 8008bc8:	08016db8 	.word	0x08016db8
 8008bcc:	2000ee24 	.word	0x2000ee24
 8008bd0:	08016e14 	.word	0x08016e14
 8008bd4:	08008905 	.word	0x08008905
 8008bd8:	08016e38 	.word	0x08016e38

08008bdc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <fs_open+0x16>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <fs_open+0x1c>
    return ERR_ARG;
 8008bf2:	f06f 030f 	mvn.w	r3, #15
 8008bf6:	e028      	b.n	8008c4a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008bf8:	4b16      	ldr	r3, [pc, #88]	@ (8008c54 <fs_open+0x78>)
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	e020      	b.n	8008c40 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6838      	ldr	r0, [r7, #0]
 8008c06:	f7f7 faf3 	bl	80001f0 <strcmp>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d114      	bne.n	8008c3a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	7c1a      	ldrb	r2, [r3, #16]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	e007      	b.n	8008c4a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1db      	bne.n	8008bfe <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8008c46:	f06f 0305 	mvn.w	r3, #5
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	0801a238 	.word	0x0801a238

08008c58 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	1ad3      	subs	r3, r2, r3
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8008c90:	20e0      	movs	r0, #224	@ 0xe0
 8008c92:	f001 fee3 	bl	800aa5c <mem_malloc>
 8008c96:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d004      	beq.n	8008ca8 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8008c9e:	22e0      	movs	r2, #224	@ 0xe0
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f00c fccc 	bl	8015640 <memset>
  }
  return ret;
 8008ca8:	687b      	ldr	r3, [r7, #4]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 fd2b 	bl	800a71c <mem_free>
  }
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8008cd6:	22b0      	movs	r2, #176	@ 0xb0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f00c fcb0 	bl	8015640 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8008cee:	20b0      	movs	r0, #176	@ 0xb0
 8008cf0:	f001 feb4 	bl	800aa5c <mem_malloc>
 8008cf4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <http_state_alloc+0x1a>
    http_state_init(ret);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff ffe6 	bl	8008cce <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8008d02:	687b      	ldr	r3, [r7, #4]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d007      	beq.n	8008d2c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff ff99 	bl	8008c58 <fs_close>
    hs->handle = NULL;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d007      	beq.n	8008d44 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff ffba 	bl	8008cb2 <http_ssi_state_free>
    hs->ssi = NULL;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d007      	beq.n	8008d5c <http_state_eof+0x50>
    pbuf_free(hs->req);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f002 ff45 	bl	800bbe0 <pbuf_free>
    hs->req = NULL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <http_state_free+0x1a>
    http_state_eof(hs);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff ffca 	bl	8008d0c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 fccf 	bl	800a71c <mem_free>
  }
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <http_write+0x22>
 8008d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8008e50 <http_write+0xc8>)
 8008d9e:	f240 2219 	movw	r2, #537	@ 0x219
 8008da2:	492c      	ldr	r1, [pc, #176]	@ (8008e54 <http_write+0xcc>)
 8008da4:	482c      	ldr	r0, [pc, #176]	@ (8008e58 <http_write+0xd0>)
 8008da6:	f00c faa3 	bl	80152f0 <iprintf>
  len = *length;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008db0:	8afb      	ldrh	r3, [r7, #22]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <http_write+0x32>
    return ERR_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e045      	b.n	8008e46 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8008dc0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8008dc2:	8aba      	ldrh	r2, [r7, #20]
 8008dc4:	8afb      	ldrh	r3, [r7, #22]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d201      	bcs.n	8008dce <http_write+0x46>
    len = max_len;
 8008dca:	8abb      	ldrh	r3, [r7, #20]
 8008dcc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8008dd6:	8afa      	ldrh	r2, [r7, #22]
 8008dd8:	8abb      	ldrh	r3, [r7, #20]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d901      	bls.n	8008de2 <http_write+0x5a>
    len = max_len;
 8008dde:	8abb      	ldrh	r3, [r7, #20]
 8008de0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	8afa      	ldrh	r2, [r7, #22]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f007 fc89 	bl	8010700 <tcp_write>
 8008dee:	4603      	mov	r3, r0
 8008df0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8008df2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfa:	d10f      	bne.n	8008e1c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d902      	bls.n	8008e16 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	82fb      	strh	r3, [r7, #22]
 8008e14:	e002      	b.n	8008e1c <http_write+0x94>
      } else {
        len /= 2;
 8008e16:	8afb      	ldrh	r3, [r7, #22]
 8008e18:	085b      	lsrs	r3, r3, #1
 8008e1a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008e1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d102      	bne.n	8008e2c <http_write+0xa4>
 8008e26:	8afb      	ldrh	r3, [r7, #22]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d8da      	bhi.n	8008de2 <http_write+0x5a>

  if (err == ERR_OK) {
 8008e2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	8afa      	ldrh	r2, [r7, #22]
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	e002      	b.n	8008e42 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008e42:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	08016ec4 	.word	0x08016ec4
 8008e54:	08016efc 	.word	0x08016efc
 8008e58:	08016f0c 	.word	0x08016f0c

08008e5c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4613      	mov	r3, r2
 8008e68:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f004 fd0b 	bl	800d888 <tcp_arg>
  altcp_recv(pcb, NULL);
 8008e72:	2100      	movs	r1, #0
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f004 fd19 	bl	800d8ac <tcp_recv>
  altcp_err(pcb, NULL);
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f004 fd59 	bl	800d934 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008e82:	2200      	movs	r2, #0
 8008e84:	2100      	movs	r1, #0
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f004 fd8e 	bl	800d9a8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f004 fd2e 	bl	800d8f0 <tcp_sent>
  if (hs != NULL) {
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8008e9a:	68b8      	ldr	r0, [r7, #8]
 8008e9c:	f7ff ff62 	bl	8008d64 <http_state_free>
  }

  if (abort_conn) {
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d004      	beq.n	8008eb0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f003 fc2e 	bl	800c708 <tcp_abort>
    return ERR_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	e00f      	b.n	8008ed0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f003 fb3f 	bl	800c534 <tcp_close>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8008eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	4904      	ldr	r1, [pc, #16]	@ (8008ed8 <http_close_or_abort_conn+0x7c>)
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f004 fd6e 	bl	800d9a8 <tcp_poll>
  }
  return err;
 8008ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	08009f57 	.word	0x08009f57

08008edc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ffb6 	bl	8008e5c <http_close_or_abort_conn>
 8008ef0:	4603      	mov	r3, r0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ffe8 	bl	8008edc <http_close_conn>
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <extract_uri_parameters+0x18>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <extract_uri_parameters+0x1c>
    return (0);
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e04b      	b.n	8008fc8 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008f34:	2300      	movs	r3, #0
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	e03f      	b.n	8008fba <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	320c      	adds	r2, #12
 8008f40:	6979      	ldr	r1, [r7, #20]
 8008f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8008f4a:	2126      	movs	r1, #38	@ 0x26
 8008f4c:	6978      	ldr	r0, [r7, #20]
 8008f4e:	f00c fb7f 	bl	8015650 <strchr>
 8008f52:	6178      	str	r0, [r7, #20]
    if (pair) {
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d006      	beq.n	8008f68 <extract_uri_parameters+0x54>
      *pair = '\0';
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	701a      	strb	r2, [r3, #0]
      pair++;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	3301      	adds	r3, #1
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	e00c      	b.n	8008f82 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8008f68:	2120      	movs	r1, #32
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f00c fb70 	bl	8015650 <strchr>
 8008f70:	6178      	str	r0, [r7, #20]
      if (pair) {
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <extract_uri_parameters+0x6a>
        *pair = '\0';
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8008f82:	213d      	movs	r1, #61	@ 0x3d
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f00c fb63 	bl	8015650 <strchr>
 8008f8a:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00a      	beq.n	8008fa8 <extract_uri_parameters+0x94>
      *equals = '\0';
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	1c59      	adds	r1, r3, #1
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	321c      	adds	r2, #28
 8008fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008fa6:	e005      	b.n	8008fb4 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	321c      	adds	r2, #28
 8008fae:	2100      	movs	r1, #0
 8008fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	613b      	str	r3, [r7, #16]
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	2b0f      	cmp	r3, #15
 8008fbe:	dc02      	bgt.n	8008fc6 <extract_uri_parameters+0xb2>
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1b9      	bne.n	8008f3a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8008fc6:	693b      	ldr	r3, [r7, #16]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d106      	bne.n	8008fec <get_tag_insert+0x1c>
 8008fde:	4b51      	ldr	r3, [pc, #324]	@ (8009124 <get_tag_insert+0x154>)
 8008fe0:	f44f 7241 	mov.w	r2, #772	@ 0x304
 8008fe4:	4950      	ldr	r1, [pc, #320]	@ (8009128 <get_tag_insert+0x158>)
 8008fe6:	4851      	ldr	r0, [pc, #324]	@ (800912c <get_tag_insert+0x15c>)
 8008fe8:	f00c f982 	bl	80152f0 <iprintf>
  ssi = hs->ssi;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff0:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d106      	bne.n	8009006 <get_tag_insert+0x36>
 8008ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8009124 <get_tag_insert+0x154>)
 8008ffa:	f240 3206 	movw	r2, #774	@ 0x306
 8008ffe:	494c      	ldr	r1, [pc, #304]	@ (8009130 <get_tag_insert+0x160>)
 8009000:	484a      	ldr	r0, [pc, #296]	@ (800912c <get_tag_insert+0x15c>)
 8009002:	f00c f975 	bl	80152f0 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8009006:	4b4b      	ldr	r3, [pc, #300]	@ (8009134 <get_tag_insert+0x164>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d02e      	beq.n	800906c <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800900e:	4b4a      	ldr	r3, [pc, #296]	@ (8009138 <get_tag_insert+0x168>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d02a      	beq.n	800906c <get_tag_insert+0x9c>
 8009016:	4b49      	ldr	r3, [pc, #292]	@ (800913c <get_tag_insert+0x16c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d026      	beq.n	800906c <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	e01e      	b.n	8009062 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f103 0012 	add.w	r0, r3, #18
 800902a:	4b43      	ldr	r3, [pc, #268]	@ (8009138 <get_tag_insert+0x168>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4619      	mov	r1, r3
 8009038:	f7f7 f8da 	bl	80001f0 <strcmp>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10c      	bne.n	800905c <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8009042:	4b3c      	ldr	r3, [pc, #240]	@ (8009134 <get_tag_insert+0x164>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	f102 011b 	add.w	r1, r2, #27
 800904c:	22c0      	movs	r2, #192	@ 0xc0
 800904e:	6978      	ldr	r0, [r7, #20]
 8009050:	4798      	blx	r3
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800905a:	e060      	b.n	800911e <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	3301      	adds	r3, #1
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	4b36      	ldr	r3, [pc, #216]	@ (800913c <get_tag_insert+0x16c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	429a      	cmp	r2, r3
 800906a:	dbdb      	blt.n	8009024 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	3312      	adds	r3, #18
 8009070:	4618      	mov	r0, r3
 8009072:	f7f7 f8c7 	bl	8000204 <strlen>
 8009076:	4603      	mov	r3, r0
 8009078:	2ba6      	cmp	r3, #166	@ 0xa6
 800907a:	d818      	bhi.n	80090ae <get_tag_insert+0xde>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	3312      	adds	r3, #18
 8009080:	4618      	mov	r0, r3
 8009082:	f7f7 f8bf 	bl	8000204 <strlen>
 8009086:	4603      	mov	r3, r0
 8009088:	2b09      	cmp	r3, #9
 800908a:	d810      	bhi.n	80090ae <get_tag_insert+0xde>
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	3312      	adds	r3, #18
 8009090:	4618      	mov	r0, r3
 8009092:	f7f7 f8b7 	bl	8000204 <strlen>
 8009096:	4603      	mov	r3, r0
 8009098:	2ba6      	cmp	r3, #166	@ 0xa6
 800909a:	d806      	bhi.n	80090aa <get_tag_insert+0xda>
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	3312      	adds	r3, #18
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f7 f8af 	bl	8000204 <strlen>
 80090a6:	4603      	mov	r3, r0
 80090a8:	e002      	b.n	80090b0 <get_tag_insert+0xe0>
 80090aa:	23a7      	movs	r3, #167	@ 0xa7
 80090ac:	e000      	b.n	80090b0 <get_tag_insert+0xe0>
 80090ae:	2309      	movs	r3, #9
 80090b0:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	331b      	adds	r3, #27
 80090b6:	2212      	movs	r2, #18
 80090b8:	4921      	ldr	r1, [pc, #132]	@ (8009140 <get_tag_insert+0x170>)
 80090ba:	4618      	mov	r0, r3
 80090bc:	f00c fbc1 	bl	8015842 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	3312      	adds	r3, #18
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4619      	mov	r1, r3
 80090ce:	f00c fbb8 	bl	8015842 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3312      	adds	r3, #18
 80090d6:	3318      	adds	r3, #24
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	4413      	add	r3, r2
 80090dc:	3303      	adds	r3, #3
 80090de:	2207      	movs	r2, #7
 80090e0:	4918      	ldr	r1, [pc, #96]	@ (8009144 <get_tag_insert+0x174>)
 80090e2:	4618      	mov	r0, r3
 80090e4:	f00c fbad 	bl	8015842 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3319      	adds	r3, #25
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	4413      	add	r3, r2
 80090f0:	2200      	movs	r2, #0
 80090f2:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	331b      	adds	r3, #27
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f7 f883 	bl	8000204 <strlen>
 80090fe:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009106:	d306      	bcc.n	8009116 <get_tag_insert+0x146>
 8009108:	4b06      	ldr	r3, [pc, #24]	@ (8009124 <get_tag_insert+0x154>)
 800910a:	f240 323f 	movw	r2, #831	@ 0x33f
 800910e:	490e      	ldr	r1, [pc, #56]	@ (8009148 <get_tag_insert+0x178>)
 8009110:	4806      	ldr	r0, [pc, #24]	@ (800912c <get_tag_insert+0x15c>)
 8009112:	f00c f8ed 	bl	80152f0 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	b29a      	uxth	r2, r3
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	81da      	strh	r2, [r3, #14]
}
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	08016ec4 	.word	0x08016ec4
 8009128:	08016f34 	.word	0x08016f34
 800912c:	08016f0c 	.word	0x08016f0c
 8009130:	08016f40 	.word	0x08016f40
 8009134:	2000f268 	.word	0x2000f268
 8009138:	2000f270 	.word	0x2000f270
 800913c:	2000f26c 	.word	0x2000f26c
 8009140:	08016f4c 	.word	0x08016f4c
 8009144:	08016f60 	.word	0x08016f60
 8009148:	08016f68 	.word	0x08016f68

0800914c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d105      	bne.n	800916a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff feca 	bl	8008efa <http_eof>
    return 0;
 8009166:	2300      	movs	r3, #0
 8009168:	e016      	b.n	8009198 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff fd7c 	bl	8008c6c <fs_bytes_left>
 8009174:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	dc05      	bgt.n	8009188 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff febb 	bl	8008efa <http_eof>
    return 0;
 8009184:	2300      	movs	r3, #0
 8009186:	e007      	b.n	8009198 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <http_check_eof+0x54>)
 800918a:	f240 429d 	movw	r2, #1181	@ 0x49d
 800918e:	4905      	ldr	r1, [pc, #20]	@ (80091a4 <http_check_eof+0x58>)
 8009190:	4805      	ldr	r0, [pc, #20]	@ (80091a8 <http_check_eof+0x5c>)
 8009192:	f00c f8ad 	bl	80152f0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8009196:	2301      	movs	r3, #1
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	08016ec4 	.word	0x08016ec4
 80091a4:	08016f78 	.word	0x08016f78
 80091a8:	08016f0c 	.word	0x08016f0c

080091ac <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d803      	bhi.n	80091ce <http_send_data_nonssi+0x22>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	e001      	b.n	80091d2 <http_send_data_nonssi+0x26>
 80091ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80091d2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	6999      	ldr	r1, [r3, #24]
 80091d8:	f107 020c 	add.w	r2, r7, #12
 80091dc:	2300      	movs	r3, #0
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff fdd2 	bl	8008d88 <http_write>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80091e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10d      	bne.n	800920c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80091f0:	2301      	movs	r3, #1
 80091f2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	89ba      	ldrh	r2, [r7, #12]
 80091fa:	441a      	add	r2, r3
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009204:	89ba      	ldrh	r2, [r7, #12]
 8009206:	1a9a      	subs	r2, r3, r2
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <http_send_data_ssi+0x2c>
 8009236:	4b87      	ldr	r3, [pc, #540]	@ (8009454 <http_send_data_ssi+0x23c>)
 8009238:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 800923c:	4986      	ldr	r1, [pc, #536]	@ (8009458 <http_send_data_ssi+0x240>)
 800923e:	4887      	ldr	r0, [pc, #540]	@ (800945c <http_send_data_ssi+0x244>)
 8009240:	f00c f856 	bl	80152f0 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800924a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	429a      	cmp	r2, r3
 8009256:	f240 8273 	bls.w	8009740 <http_send_data_ssi+0x528>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009268:	4293      	cmp	r3, r2
 800926a:	dc06      	bgt.n	800927a <http_send_data_ssi+0x62>
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	b29b      	uxth	r3, r3
 8009278:	e001      	b.n	800927e <http_send_data_ssi+0x66>
 800927a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800927e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	6999      	ldr	r1, [r3, #24]
 8009284:	f107 020e 	add.w	r2, r7, #14
 8009288:	2300      	movs	r3, #0
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff fd7c 	bl	8008d88 <http_write>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10d      	bne.n	80092b8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800929c:	2301      	movs	r3, #1
 800929e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	89fa      	ldrh	r2, [r7, #14]
 80092a6:	441a      	add	r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b0:	89fa      	ldrh	r2, [r7, #14]
 80092b2:	1a9a      	subs	r2, r3, r2
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f040 823e 	bne.w	8009740 <http_send_data_ssi+0x528>
      return data_to_send;
 80092c4:	7dbb      	ldrb	r3, [r7, #22]
 80092c6:	e284      	b.n	80097d2 <http_send_data_ssi+0x5ba>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80092c8:	89fb      	ldrh	r3, [r7, #14]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <http_send_data_ssi+0xba>
      return data_to_send;
 80092ce:	7dbb      	ldrb	r3, [r7, #22]
 80092d0:	e27f      	b.n	80097d2 <http_send_data_ssi+0x5ba>
    }
    switch (ssi->tag_state) {
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80092d8:	2b04      	cmp	r3, #4
 80092da:	f200 822c 	bhi.w	8009736 <http_send_data_ssi+0x51e>
 80092de:	a201      	add	r2, pc, #4	@ (adr r2, 80092e4 <http_send_data_ssi+0xcc>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	080092f9 	.word	0x080092f9
 80092e8:	0800934b 	.word	0x0800934b
 80092ec:	080093bd 	.word	0x080093bd
 80092f0:	08009505 	.word	0x08009505
 80092f4:	0800964d 	.word	0x0800964d
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80092f8:	2300      	movs	r3, #0
 80092fa:	757b      	strb	r3, [r7, #21]
 80092fc:	e017      	b.n	800932e <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	781a      	ldrb	r2, [r3, #0]
 8009304:	7d7b      	ldrb	r3, [r7, #21]
 8009306:	4956      	ldr	r1, [pc, #344]	@ (8009460 <http_send_data_ssi+0x248>)
 8009308:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	429a      	cmp	r2, r3
 8009310:	d10a      	bne.n	8009328 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	7d7a      	ldrb	r2, [r7, #21]
 8009316:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            ssi->tag_index = 1;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	2201      	movs	r2, #1
 8009324:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8009326:	e005      	b.n	8009334 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8009328:	7d7b      	ldrb	r3, [r7, #21]
 800932a:	3301      	adds	r3, #1
 800932c:	757b      	strb	r3, [r7, #21]
 800932e:	7d7b      	ldrb	r3, [r7, #21]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d9e4      	bls.n	80092fe <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	1e5a      	subs	r2, r3, #1
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	601a      	str	r2, [r3, #0]
        break;
 8009348:	e1fa      	b.n	8009740 <http_send_data_ssi+0x528>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	7c1b      	ldrb	r3, [r3, #16]
 800934e:	461a      	mov	r2, r3
 8009350:	4b43      	ldr	r3, [pc, #268]	@ (8009460 <http_send_data_ssi+0x248>)
 8009352:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	8992      	ldrh	r2, [r2, #12]
 800935a:	4413      	add	r3, r2
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d107      	bne.n	8009372 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2200      	movs	r2, #0
 8009366:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 8009370:	e1e6      	b.n	8009740 <http_send_data_ssi+0x528>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	781a      	ldrb	r2, [r3, #0]
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	7c1b      	ldrb	r3, [r3, #16]
 800937c:	4619      	mov	r1, r3
 800937e:	4b38      	ldr	r3, [pc, #224]	@ (8009460 <http_send_data_ssi+0x248>)
 8009380:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8009384:	6939      	ldr	r1, [r7, #16]
 8009386:	8989      	ldrh	r1, [r1, #12]
 8009388:	440b      	add	r3, r1
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d106      	bne.n	800939e <http_send_data_ssi+0x186>
            ssi->tag_index++;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	899b      	ldrh	r3, [r3, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	b29a      	uxth	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	819a      	strh	r2, [r3, #12]
 800939c:	e003      	b.n	80093a6 <http_send_data_ssi+0x18e>
            ssi->tag_state = TAG_NONE;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          ssi->parse_left--;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	1e5a      	subs	r2, r3, #1
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	601a      	str	r2, [r3, #0]
        break;
 80093ba:	e1c1      	b.n	8009740 <http_send_data_ssi+0x528>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	899b      	ldrh	r3, [r3, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d11e      	bne.n	8009402 <http_send_data_ssi+0x1ea>
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d00e      	beq.n	80093ec <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80093d4:	2b09      	cmp	r3, #9
 80093d6:	d009      	beq.n	80093ec <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b0a      	cmp	r3, #10
 80093e0:	d004      	beq.n	80093ec <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80093e8:	2b0d      	cmp	r3, #13
 80093ea:	d10a      	bne.n	8009402 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	1e5a      	subs	r2, r3, #1
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	601a      	str	r2, [r3, #0]
          break;
 8009400:	e19e      	b.n	8009740 <http_send_data_ssi+0x528>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	781a      	ldrb	r2, [r3, #0]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	7c1b      	ldrb	r3, [r3, #16]
 800940c:	4914      	ldr	r1, [pc, #80]	@ (8009460 <http_send_data_ssi+0x248>)
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	440b      	add	r3, r1
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d013      	beq.n	8009442 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009420:	2b20      	cmp	r3, #32
 8009422:	d00e      	beq.n	8009442 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b09      	cmp	r3, #9
 800942c:	d009      	beq.n	8009442 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009434:	2b0a      	cmp	r3, #10
 8009436:	d004      	beq.n	8009442 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b0d      	cmp	r3, #13
 8009440:	d13f      	bne.n	80094c2 <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	899b      	ldrh	r3, [r3, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10c      	bne.n	8009464 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          if (ssi->tag_index == 0) {
 8009452:	e04c      	b.n	80094ee <http_send_data_ssi+0x2d6>
 8009454:	08016ec4 	.word	0x08016ec4
 8009458:	08016f40 	.word	0x08016f40
 800945c:	08016f0c 	.word	0x08016f0c
 8009460:	0801a288 	.word	0x0801a288
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	2203      	movs	r2, #3
 8009468:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	899b      	ldrh	r3, [r3, #12]
 8009470:	2bff      	cmp	r3, #255	@ 0xff
 8009472:	d906      	bls.n	8009482 <http_send_data_ssi+0x26a>
 8009474:	4b93      	ldr	r3, [pc, #588]	@ (80096c4 <http_send_data_ssi+0x4ac>)
 8009476:	f240 523a 	movw	r2, #1338	@ 0x53a
 800947a:	4993      	ldr	r1, [pc, #588]	@ (80096c8 <http_send_data_ssi+0x4b0>)
 800947c:	4893      	ldr	r0, [pc, #588]	@ (80096cc <http_send_data_ssi+0x4b4>)
 800947e:	f00b ff37 	bl	80152f0 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	899b      	ldrh	r3, [r3, #12]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	899b      	ldrh	r3, [r3, #12]
 8009490:	461a      	mov	r2, r3
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	4413      	add	r3, r2
 8009496:	2200      	movs	r2, #0
 8009498:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	7c1b      	ldrb	r3, [r3, #16]
 80094a4:	498a      	ldr	r1, [pc, #552]	@ (80096d0 <http_send_data_ssi+0x4b8>)
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	440b      	add	r3, r1
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d103      	bne.n	80094ba <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	2201      	movs	r2, #1
 80094b6:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80094b8:	e019      	b.n	80094ee <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2200      	movs	r2, #0
 80094be:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80094c0:	e015      	b.n	80094ee <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	899b      	ldrh	r3, [r3, #12]
 80094c6:	2b07      	cmp	r3, #7
 80094c8:	d80d      	bhi.n	80094e6 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	899b      	ldrh	r3, [r3, #12]
 80094d2:	1c59      	adds	r1, r3, #1
 80094d4:	b288      	uxth	r0, r1
 80094d6:	6939      	ldr	r1, [r7, #16]
 80094d8:	8188      	strh	r0, [r1, #12]
 80094da:	4619      	mov	r1, r3
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	440b      	add	r3, r1
 80094e2:	749a      	strb	r2, [r3, #18]
 80094e4:	e003      	b.n	80094ee <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	1e5a      	subs	r2, r3, #1
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	601a      	str	r2, [r3, #0]

        break;
 8009502:	e11d      	b.n	8009740 <http_send_data_ssi+0x528>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	899b      	ldrh	r3, [r3, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d11e      	bne.n	800954a <http_send_data_ssi+0x332>
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2b20      	cmp	r3, #32
 8009514:	d00e      	beq.n	8009534 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800951c:	2b09      	cmp	r3, #9
 800951e:	d009      	beq.n	8009534 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b0a      	cmp	r3, #10
 8009528:	d004      	beq.n	8009534 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009530:	2b0d      	cmp	r3, #13
 8009532:	d10a      	bne.n	800954a <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	1e5a      	subs	r2, r3, #1
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	601a      	str	r2, [r3, #0]
          break;
 8009548:	e0fa      	b.n	8009740 <http_send_data_ssi+0x528>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	7c1b      	ldrb	r3, [r3, #16]
 8009554:	495e      	ldr	r1, [pc, #376]	@ (80096d0 <http_send_data_ssi+0x4b8>)
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	440b      	add	r3, r1
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	6939      	ldr	r1, [r7, #16]
 800955e:	8989      	ldrh	r1, [r1, #12]
 8009560:	440b      	add	r3, r1
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	429a      	cmp	r2, r3
 8009566:	d162      	bne.n	800962e <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	1e5a      	subs	r2, r3, #1
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	899b      	ldrh	r3, [r3, #12]
 8009580:	3301      	adds	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	7c1b      	ldrb	r3, [r3, #16]
 800958c:	4a50      	ldr	r2, [pc, #320]	@ (80096d0 <http_send_data_ssi+0x4b8>)
 800958e:	00db      	lsls	r3, r3, #3
 8009590:	4413      	add	r3, r2
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	8992      	ldrh	r2, [r2, #12]
 8009598:	4413      	add	r3, r2
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 80cc 	bne.w	800973a <http_send_data_ssi+0x522>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80095a2:	6838      	ldr	r0, [r7, #0]
 80095a4:	f7ff fd14 	bl	8008fd0 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	2200      	movs	r2, #0
 80095ac:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2204      	movs	r2, #4
 80095b2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            ssi->tag_end = ssi->parsed;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	f240 80b7 	bls.w	800973a <http_send_data_ssi+0x522>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80095da:	4293      	cmp	r3, r2
 80095dc:	dc06      	bgt.n	80095ec <http_send_data_ssi+0x3d4>
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	e001      	b.n	80095f0 <http_send_data_ssi+0x3d8>
 80095ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80095f0:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	6999      	ldr	r1, [r3, #24]
 80095f6:	f107 020e 	add.w	r2, r7, #14
 80095fa:	2300      	movs	r3, #0
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff fbc3 	bl	8008d88 <http_write>
 8009602:	4603      	mov	r3, r0
 8009604:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8009606:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 8095 	bne.w	800973a <http_send_data_ssi+0x522>
                data_to_send = 1;
 8009610:	2301      	movs	r3, #1
 8009612:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	89fa      	ldrh	r2, [r7, #14]
 800961a:	441a      	add	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009624:	89fa      	ldrh	r2, [r7, #14]
 8009626:	1a9a      	subs	r2, r3, r2
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 800962c:	e085      	b.n	800973a <http_send_data_ssi+0x522>
          ssi->parse_left--;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	1e5a      	subs	r2, r3, #1
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
        break;
 800964a:	e076      	b.n	800973a <http_send_data_ssi+0x522>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	429a      	cmp	r2, r3
 8009656:	d93d      	bls.n	80096d4 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009666:	4293      	cmp	r3, r2
 8009668:	dc06      	bgt.n	8009678 <http_send_data_ssi+0x460>
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	b29b      	uxth	r3, r3
 8009676:	e001      	b.n	800967c <http_send_data_ssi+0x464>
 8009678:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800967c:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800967e:	89fb      	ldrh	r3, [r7, #14]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	6999      	ldr	r1, [r3, #24]
 8009688:	f107 020e 	add.w	r2, r7, #14
 800968c:	2300      	movs	r3, #0
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff fb7a 	bl	8008d88 <http_write>
 8009694:	4603      	mov	r3, r0
 8009696:	75fb      	strb	r3, [r7, #23]
 8009698:	e001      	b.n	800969e <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800969e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d14c      	bne.n	8009740 <http_send_data_ssi+0x528>
            data_to_send = 1;
 80096a6:	2301      	movs	r3, #1
 80096a8:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	89fa      	ldrh	r2, [r7, #14]
 80096b0:	441a      	add	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ba:	89fa      	ldrh	r2, [r7, #14]
 80096bc:	1a9a      	subs	r2, r3, r2
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80096c2:	e03d      	b.n	8009740 <http_send_data_ssi+0x528>
 80096c4:	08016ec4 	.word	0x08016ec4
 80096c8:	08016fb0 	.word	0x08016fb0
 80096cc:	08016f0c 	.word	0x08016f0c
 80096d0:	0801a288 	.word	0x0801a288
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	899a      	ldrh	r2, [r3, #12]
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	89db      	ldrh	r3, [r3, #14]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d222      	bcs.n	8009726 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	89da      	ldrh	r2, [r3, #14]
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	899b      	ldrh	r3, [r3, #12]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	899b      	ldrh	r3, [r3, #12]
 80096f2:	3318      	adds	r3, #24
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	4413      	add	r3, r2
 80096f8:	1cd9      	adds	r1, r3, #3
 80096fa:	f107 020e 	add.w	r2, r7, #14
 80096fe:	2301      	movs	r3, #1
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff fb41 	bl	8008d88 <http_write>
 8009706:	4603      	mov	r3, r0
 8009708:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800970a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d115      	bne.n	800973e <http_send_data_ssi+0x526>
              data_to_send = 1;
 8009712:	2301      	movs	r3, #1
 8009714:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	899a      	ldrh	r2, [r3, #12]
 800971a:	89fb      	ldrh	r3, [r7, #14]
 800971c:	4413      	add	r3, r2
 800971e:	b29a      	uxth	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8009724:	e00b      	b.n	800973e <http_send_data_ssi+0x526>
              ssi->tag_index = 0;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2200      	movs	r2, #0
 800972a:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          break;
 8009734:	e003      	b.n	800973e <http_send_data_ssi+0x526>
        default:
          break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <http_send_data_ssi+0x528>
        break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <http_send_data_ssi+0x528>
          break;
 800973e:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8009746:	2b04      	cmp	r3, #4
 8009748:	d003      	beq.n	8009752 <http_send_data_ssi+0x53a>
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d004      	beq.n	800975c <http_send_data_ssi+0x544>
 8009752:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f43f adb6 	beq.w	80092c8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8009762:	2b04      	cmp	r3, #4
 8009764:	d034      	beq.n	80097d0 <http_send_data_ssi+0x5b8>
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	429a      	cmp	r2, r3
 8009770:	d92e      	bls.n	80097d0 <http_send_data_ssi+0x5b8>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009780:	4293      	cmp	r3, r2
 8009782:	dc06      	bgt.n	8009792 <http_send_data_ssi+0x57a>
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	b29b      	uxth	r3, r3
 8009790:	e001      	b.n	8009796 <http_send_data_ssi+0x57e>
 8009792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009796:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	6999      	ldr	r1, [r3, #24]
 800979c:	f107 020e 	add.w	r2, r7, #14
 80097a0:	2300      	movs	r3, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff faf0 	bl	8008d88 <http_write>
 80097a8:	4603      	mov	r3, r0
 80097aa:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80097ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10d      	bne.n	80097d0 <http_send_data_ssi+0x5b8>
      data_to_send = 1;
 80097b4:	2301      	movs	r3, #1
 80097b6:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	89fa      	ldrh	r2, [r7, #14]
 80097be:	441a      	add	r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c8:	89fa      	ldrh	r2, [r7, #14]
 80097ca:	1a9a      	subs	r2, r3, r2
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 80097d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop

080097dc <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <http_send+0x18>
    return 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	e030      	b.n	8009856 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d108      	bne.n	800980e <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff fca4 	bl	800914c <http_check_eof>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <http_send+0x32>
      return 0;
 800980a:	2300      	movs	r3, #0
 800980c:	e023      	b.n	8009856 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d006      	beq.n	8009824 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff fcfd 	bl	8009218 <http_send_data_ssi>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]
 8009822:	e005      	b.n	8009830 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff fcc0 	bl	80091ac <http_send_data_nonssi>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10d      	bne.n	8009854 <http_send+0x78>
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff fa15 	bl	8008c6c <fs_bytes_left>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	dc05      	bgt.n	8009854 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fb55 	bl	8008efa <http_eof>
    return 0;
 8009850:	2300      	movs	r3, #0
 8009852:	e000      	b.n	8009856 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
	...

08009860 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	4a1c      	ldr	r2, [pc, #112]	@ (80098e0 <http_get_404_file+0x80>)
 800986e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7ff f9af 	bl	8008bdc <fs_open>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d024      	beq.n	80098d4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	4a15      	ldr	r2, [pc, #84]	@ (80098e4 <http_get_404_file+0x84>)
 800988e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7ff f99f 	bl	8008bdc <fs_open>
 800989e:	4603      	mov	r3, r0
 80098a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80098a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d014      	beq.n	80098d4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	4a0e      	ldr	r2, [pc, #56]	@ (80098e8 <http_get_404_file+0x88>)
 80098ae:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4619      	mov	r1, r3
 80098b8:	4610      	mov	r0, r2
 80098ba:	f7ff f98f 	bl	8008bdc <fs_open>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80098c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
        return NULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	e000      	b.n	80098d6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80098d4:	687b      	ldr	r3, [r7, #4]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	08016fc8 	.word	0x08016fc8
 80098e4:	08016fd4 	.word	0x08016fd4
 80098e8:	08016fe0 	.word	0x08016fe0

080098ec <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08e      	sub	sp, #56	@ 0x38
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80098fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d106      	bne.n	8009910 <http_parse_request+0x24>
 8009902:	4b65      	ldr	r3, [pc, #404]	@ (8009a98 <http_parse_request+0x1ac>)
 8009904:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8009908:	4964      	ldr	r1, [pc, #400]	@ (8009a9c <http_parse_request+0x1b0>)
 800990a:	4865      	ldr	r0, [pc, #404]	@ (8009aa0 <http_parse_request+0x1b4>)
 800990c:	f00b fcf0 	bl	80152f0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d106      	bne.n	8009924 <http_parse_request+0x38>
 8009916:	4b60      	ldr	r3, [pc, #384]	@ (8009a98 <http_parse_request+0x1ac>)
 8009918:	f240 72af 	movw	r2, #1967	@ 0x7af
 800991c:	4961      	ldr	r1, [pc, #388]	@ (8009aa4 <http_parse_request+0x1b8>)
 800991e:	4860      	ldr	r0, [pc, #384]	@ (8009aa0 <http_parse_request+0x1b4>)
 8009920:	f00b fce6 	bl	80152f0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d103      	bne.n	8009934 <http_parse_request+0x48>
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8009934:	f06f 0307 	mvn.w	r3, #7
 8009938:	e0a9      	b.n	8009a8e <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d103      	bne.n	800994a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009946:	621a      	str	r2, [r3, #32]
 8009948:	e005      	b.n	8009956 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009950:	4618      	mov	r0, r3
 8009952:	f002 fa13 	bl	800bd7c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8009956:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009958:	f002 f9e8 	bl	800bd2c <pbuf_ref>

  if (hs->req->next != NULL) {
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d012      	beq.n	800998c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	891b      	ldrh	r3, [r3, #8]
 800996c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8009970:	4293      	cmp	r3, r2
 8009972:	bf28      	it	cs
 8009974:	4613      	movcs	r3, r2
 8009976:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	6a18      	ldr	r0, [r3, #32]
 800997c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800997e:	2300      	movs	r3, #0
 8009980:	4949      	ldr	r1, [pc, #292]	@ (8009aa8 <http_parse_request+0x1bc>)
 8009982:	f002 fb23 	bl	800bfcc <pbuf_copy_partial>
    data = httpd_req_buf;
 8009986:	4b48      	ldr	r3, [pc, #288]	@ (8009aa8 <http_parse_request+0x1bc>)
 8009988:	637b      	str	r3, [r7, #52]	@ 0x34
 800998a:	e005      	b.n	8009998 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800998c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8009992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009994:	895b      	ldrh	r3, [r3, #10]
 8009996:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009998:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800999a:	2b06      	cmp	r3, #6
 800999c:	d962      	bls.n	8009a64 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800999e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80099a0:	461a      	mov	r2, r3
 80099a2:	4942      	ldr	r1, [pc, #264]	@ (8009aac <http_parse_request+0x1c0>)
 80099a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80099a6:	f000 fcde 	bl	800a366 <lwip_strnstr>
 80099aa:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d058      	beq.n	8009a64 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80099b6:	2204      	movs	r2, #4
 80099b8:	493d      	ldr	r1, [pc, #244]	@ (8009ab0 <http_parse_request+0x1c4>)
 80099ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80099bc:	f00b fe55 	bl	801566a <strncmp>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d116      	bne.n	80099f4 <http_parse_request+0x108>
        sp1 = data + 3;
 80099c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c8:	3303      	adds	r3, #3
 80099ca:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	3301      	adds	r3, #1
 80099e0:	8b7a      	ldrh	r2, [r7, #26]
 80099e2:	4934      	ldr	r1, [pc, #208]	@ (8009ab4 <http_parse_request+0x1c8>)
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fcbe 	bl	800a366 <lwip_strnstr>
 80099ea:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80099ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d111      	bne.n	8009a16 <http_parse_request+0x12a>
 80099f2:	e006      	b.n	8009a02 <http_parse_request+0x116>
        data[4] = 0;
 80099f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f6:	3304      	adds	r3, #4
 80099f8:	2200      	movs	r2, #0
 80099fa:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80099fc:	f06f 030f 	mvn.w	r3, #15
 8009a00:	e045      	b.n	8009a8e <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	3301      	adds	r3, #1
 8009a06:	8b7a      	ldrh	r2, [r7, #26]
 8009a08:	4928      	ldr	r1, [pc, #160]	@ (8009aac <http_parse_request+0x1c0>)
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 fcab 	bl	800a366 <lwip_strnstr>
 8009a10:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8009a12:	2301      	movs	r3, #1
 8009a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8009a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d01e      	beq.n	8009a64 <http_parse_request+0x178>
 8009a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d91a      	bls.n	8009a64 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009a2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009a30:	461a      	mov	r2, r3
 8009a32:	4921      	ldr	r1, [pc, #132]	@ (8009ab8 <http_parse_request+0x1cc>)
 8009a34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009a36:	f000 fc96 	bl	800a366 <lwip_strnstr>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d011      	beq.n	8009a64 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	3301      	adds	r3, #1
 8009a44:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8009a4c:	8b3b      	ldrh	r3, [r7, #24]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8009a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a58:	6979      	ldr	r1, [r7, #20]
 8009a5a:	68b8      	ldr	r0, [r7, #8]
 8009a5c:	f000 f880 	bl	8009b60 <http_find_file>
 8009a60:	4603      	mov	r3, r0
 8009a62:	e014      	b.n	8009a8e <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f002 f947 	bl	800bcfc <pbuf_clen>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	891b      	ldrh	r3, [r3, #8]
 8009a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a7c:	d205      	bcs.n	8009a8a <http_parse_request+0x19e>
 8009a7e:	8a7b      	ldrh	r3, [r7, #18]
 8009a80:	2b05      	cmp	r3, #5
 8009a82:	d802      	bhi.n	8009a8a <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8009a84:	f06f 0304 	mvn.w	r3, #4
 8009a88:	e001      	b.n	8009a8e <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8009a8a:	f06f 030f 	mvn.w	r3, #15
  }
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3738      	adds	r7, #56	@ 0x38
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	08016ec4 	.word	0x08016ec4
 8009a9c:	08016fec 	.word	0x08016fec
 8009aa0:	08016f0c 	.word	0x08016f0c
 8009aa4:	08016f34 	.word	0x08016f34
 8009aa8:	2000ee28 	.word	0x2000ee28
 8009aac:	08016ff8 	.word	0x08016ff8
 8009ab0:	08016ffc 	.word	0x08016ffc
 8009ab4:	08017004 	.word	0x08017004
 8009ab8:	08017008 	.word	0x08017008

08009abc <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d040      	beq.n	8009b52 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8009ad4:	213f      	movs	r1, #63	@ 0x3f
 8009ad6:	6838      	ldr	r0, [r7, #0]
 8009ad8:	f00b fdba 	bl	8015650 <strchr>
 8009adc:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	613b      	str	r3, [r7, #16]
    ext = uri;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8009af2:	212e      	movs	r1, #46	@ 0x2e
 8009af4:	6938      	ldr	r0, [r7, #16]
 8009af6:	f00b fdab 	bl	8015650 <strchr>
 8009afa:	6138      	str	r0, [r7, #16]
 8009afc:	e009      	b.n	8009b12 <http_uri_is_ssi+0x56>
      ext = sub;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	617b      	str	r3, [r7, #20]
      sub++;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	3301      	adds	r3, #1
 8009b06:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8009b08:	212e      	movs	r1, #46	@ 0x2e
 8009b0a:	6938      	ldr	r0, [r7, #16]
 8009b0c:	f00b fda0 	bl	8015650 <strchr>
 8009b10:	6138      	str	r0, [r7, #16]
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1f2      	bne.n	8009afe <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61fb      	str	r3, [r7, #28]
 8009b1c:	e010      	b.n	8009b40 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8009b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8009b5c <http_uri_is_ssi+0xa0>)
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b26:	4619      	mov	r1, r3
 8009b28:	6978      	ldr	r0, [r7, #20]
 8009b2a:	f000 fc52 	bl	800a3d2 <lwip_stricmp>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8009b34:	2301      	movs	r3, #1
 8009b36:	76fb      	strb	r3, [r7, #27]
        break;
 8009b38:	e005      	b.n	8009b46 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	61fb      	str	r3, [r7, #28]
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d9eb      	bls.n	8009b1e <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <http_uri_is_ssi+0x96>
      *param = '?';
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	223f      	movs	r2, #63	@ 0x3f
 8009b50:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8009b52:	7efb      	ldrb	r3, [r7, #27]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	0801a24c 	.word	0x0801a24c

08009b60 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8009b60:	b590      	push	{r4, r7, lr}
 8009b62:	b093      	sub	sp, #76	@ 0x4c
 8009b64:	af02      	add	r7, sp, #8
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7f6 fb41 	bl	8000204 <strlen>
 8009b82:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d072      	beq.n	8009c70 <http_find_file+0x110>
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	4413      	add	r3, r2
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b96:	d16b      	bne.n	8009c70 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009b98:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009b9a:	4a80      	ldr	r2, [pc, #512]	@ (8009d9c <http_find_file+0x23c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d102      	bne.n	8009ba6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d164      	bne.n	8009c70 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	2b3f      	cmp	r3, #63	@ 0x3f
 8009bac:	bf28      	it	cs
 8009bae:	233f      	movcs	r3, #63	@ 0x3f
 8009bb0:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00a      	beq.n	8009bce <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	6a3a      	ldr	r2, [r7, #32]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4877      	ldr	r0, [pc, #476]	@ (8009d9c <http_find_file+0x23c>)
 8009bc0:	f00b fe3f 	bl	8015842 <memcpy>
      http_uri_buf[copy_len] = 0;
 8009bc4:	4a75      	ldr	r2, [pc, #468]	@ (8009d9c <http_find_file+0x23c>)
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	4413      	add	r3, r2
 8009bca:	2200      	movs	r2, #0
 8009bcc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009bce:	2300      	movs	r3, #0
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bd2:	e04a      	b.n	8009c6a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d028      	beq.n	8009c2c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8009be0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d01e      	beq.n	8009c26 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8009be8:	4a6d      	ldr	r2, [pc, #436]	@ (8009da0 <http_find_file+0x240>)
 8009bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7f6 fb07 	bl	8000204 <strlen>
 8009bf6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	bf28      	it	cs
 8009c00:	4613      	movcs	r3, r2
 8009c02:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	4a65      	ldr	r2, [pc, #404]	@ (8009d9c <http_find_file+0x23c>)
 8009c08:	1898      	adds	r0, r3, r2
 8009c0a:	4a65      	ldr	r2, [pc, #404]	@ (8009da0 <http_find_file+0x240>)
 8009c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	4619      	mov	r1, r3
 8009c16:	f00b fe14 	bl	8015842 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8009c1a:	6a3a      	ldr	r2, [r7, #32]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	4413      	add	r3, r2
 8009c20:	4a5e      	ldr	r2, [pc, #376]	@ (8009d9c <http_find_file+0x23c>)
 8009c22:	2100      	movs	r1, #0
 8009c24:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8009c26:	4b5d      	ldr	r3, [pc, #372]	@ (8009d9c <http_find_file+0x23c>)
 8009c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c2a:	e004      	b.n	8009c36 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8009c2c:	4a5c      	ldr	r2, [pc, #368]	@ (8009da0 <http_find_file+0x240>)
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c34:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe ffce 	bl	8008bdc <fs_open>
 8009c40:	4603      	mov	r3, r0
 8009c42:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8009c44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10b      	bne.n	8009c64 <http_find_file+0x104>
        uri = file_name;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8009c54:	4a52      	ldr	r2, [pc, #328]	@ (8009da0 <http_find_file+0x240>)
 8009c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	4413      	add	r3, r2
 8009c5c:	791b      	ldrb	r3, [r3, #4]
 8009c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8009c62:	e005      	b.n	8009c70 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c66:	3301      	adds	r3, #1
 8009c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d9b1      	bls.n	8009bd4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8009c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d176      	bne.n	8009d64 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	213f      	movs	r1, #63	@ 0x3f
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f00b fce8 	bl	8015650 <strchr>
 8009c80:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8009c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d005      	beq.n	8009c94 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8009c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]
      params++;
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c90:	3301      	adds	r3, #1
 8009c92:	637b      	str	r3, [r7, #52]	@ 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8009c94:	4b43      	ldr	r3, [pc, #268]	@ (8009da4 <http_find_file+0x244>)
 8009c96:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9a:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8009c9c:	4b42      	ldr	r3, [pc, #264]	@ (8009da8 <http_find_file+0x248>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d034      	beq.n	8009d0e <http_find_file+0x1ae>
 8009ca4:	4b41      	ldr	r3, [pc, #260]	@ (8009dac <http_find_file+0x24c>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d030      	beq.n	8009d0e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009cac:	2300      	movs	r3, #0
 8009cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cb0:	e028      	b.n	8009d04 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8009cb2:	68b8      	ldr	r0, [r7, #8]
 8009cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8009dac <http_find_file+0x24c>)
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	4413      	add	r3, r2
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f7f6 fa95 	bl	80001f0 <strcmp>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d118      	bne.n	8009cfe <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8009ccc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff f920 	bl	8008f14 <extract_uri_parameters>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	4a33      	ldr	r2, [pc, #204]	@ (8009da4 <http_find_file+0x244>)
 8009cd8:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009cda:	4b34      	ldr	r3, [pc, #208]	@ (8009dac <http_find_file+0x24c>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce0:	00db      	lsls	r3, r3, #3
 8009ce2:	4413      	add	r3, r2
 8009ce4:	685c      	ldr	r4, [r3, #4]
 8009ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8009da4 <http_find_file+0x244>)
 8009ce8:	6819      	ldr	r1, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                         hs->param_vals);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3370      	adds	r3, #112	@ 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cf6:	47a0      	blx	r4
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	60bb      	str	r3, [r7, #8]
          break;
 8009cfc:	e007      	b.n	8009d0e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d00:	3301      	adds	r3, #1
 8009d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d04:	4b28      	ldr	r3, [pc, #160]	@ (8009da8 <http_find_file+0x248>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	dbd1      	blt.n	8009cb2 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	4611      	mov	r1, r2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe ff61 	bl	8008bdc <fs_open>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8009d1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <http_find_file+0x1cc>
      file = &hs->file_handle;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d2a:	e006      	b.n	8009d3a <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8009d2c:	f107 0308 	add.w	r3, r7, #8
 8009d30:	4619      	mov	r1, r3
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7ff fd94 	bl	8009860 <http_get_404_file>
 8009d38:	63b8      	str	r0, [r7, #56]	@ 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d011      	beq.n	8009d64 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8009d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d42:	7c1b      	ldrb	r3, [r3, #16]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <http_find_file+0x1f4>
        tag_check = 1;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009d52:	e007      	b.n	8009d64 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d5a:	f7ff feaf 	bl	8009abc <http_uri_is_ssi>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d106      	bne.n	8009d78 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8009d6a:	f107 0308 	add.w	r3, r7, #8
 8009d6e:	4619      	mov	r1, r3
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f7ff fd75 	bl	8009860 <http_get_404_file>
 8009d76:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	4613      	mov	r3, r2
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 f810 	bl	8009db0 <http_init_file>
 8009d90:	4603      	mov	r3, r0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3744      	adds	r7, #68	@ 0x44
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd90      	pop	{r4, r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	2000f228 	.word	0x2000f228
 8009da0:	0801a260 	.word	0x0801a260
 8009da4:	2000f27c 	.word	0x2000f27c
 8009da8:	2000f278 	.word	0x2000f278
 8009dac:	2000f274 	.word	0x2000f274

08009db0 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d07d      	beq.n	8009ec0 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <http_init_file+0x2a>
 8009dcc:	4b45      	ldr	r3, [pc, #276]	@ (8009ee4 <http_init_file+0x134>)
 8009dce:	f640 120b 	movw	r2, #2315	@ 0x90b
 8009dd2:	4945      	ldr	r1, [pc, #276]	@ (8009ee8 <http_init_file+0x138>)
 8009dd4:	4845      	ldr	r0, [pc, #276]	@ (8009eec <http_init_file+0x13c>)
 8009dd6:	f00b fa8b 	bl	80152f0 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8009dda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d01c      	beq.n	8009e1c <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8009de2:	f7fe ff52 	bl	8008c8a <http_ssi_state_alloc>
 8009de6:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d016      	beq.n	8009e1c <http_init_file+0x6c>
        ssi->tag_index = 0;
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	2200      	movs	r2, #0
 8009df2:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
        ssi->parsed = file->data;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	69fa      	ldr	r2, [r7, #28]
 8009e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	da06      	bge.n	8009e40 <http_init_file+0x90>
 8009e32:	4b2c      	ldr	r3, [pc, #176]	@ (8009ee4 <http_init_file+0x134>)
 8009e34:	f640 1234 	movw	r2, #2356	@ 0x934
 8009e38:	492d      	ldr	r1, [pc, #180]	@ (8009ef0 <http_init_file+0x140>)
 8009e3a:	482c      	ldr	r0, [pc, #176]	@ (8009eec <http_init_file+0x13c>)
 8009e3c:	f00b fa58 	bl	80152f0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	461a      	mov	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	7c1b      	ldrb	r3, [r3, #16]
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d106      	bne.n	8009e6e <http_init_file+0xbe>
 8009e60:	4b20      	ldr	r3, [pc, #128]	@ (8009ee4 <http_init_file+0x134>)
 8009e62:	f640 1243 	movw	r2, #2371	@ 0x943
 8009e66:	4923      	ldr	r1, [pc, #140]	@ (8009ef4 <http_init_file+0x144>)
 8009e68:	4820      	ldr	r0, [pc, #128]	@ (8009eec <http_init_file+0x13c>)
 8009e6a:	f00b fa41 	bl	80152f0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d032      	beq.n	8009eda <http_init_file+0x12a>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	7c1b      	ldrb	r3, [r3, #16]
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d02b      	beq.n	8009eda <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6998      	ldr	r0, [r3, #24]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	491a      	ldr	r1, [pc, #104]	@ (8009ef8 <http_init_file+0x148>)
 8009e8e:	f000 fa6a 	bl	800a366 <lwip_strnstr>
 8009e92:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01f      	beq.n	8009eda <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	1d1a      	adds	r2, r3, #4
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	699a      	ldr	r2, [r3, #24]
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	441a      	add	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	1ad2      	subs	r2, r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ebe:	e00c      	b.n	8009eda <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3720      	adds	r7, #32
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	08016ec4 	.word	0x08016ec4
 8009ee8:	08017010 	.word	0x08017010
 8009eec:	08016f0c 	.word	0x08016f0c
 8009ef0:	08017024 	.word	0x08017024
 8009ef4:	08017044 	.word	0x08017044
 8009ef8:	08017008 	.word	0x08017008

08009efc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <http_err+0x1c>
    http_state_free(hs);
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f7fe ff26 	bl	8008d64 <http_state_free>
  }
}
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <http_sent+0x1c>
    return ERR_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e008      	b.n	8009f4e <http_sent+0x2e>
  }

  hs->retries = 0;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8009f44:	6979      	ldr	r1, [r7, #20]
 8009f46:	68b8      	ldr	r0, [r7, #8]
 8009f48:	f7ff fc48 	bl	80097dc <http_send>

  return ERR_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d107      	bne.n	8009f7a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6838      	ldr	r0, [r7, #0]
 8009f6e:	f7fe ffb5 	bl	8008edc <http_close_conn>
 8009f72:	4603      	mov	r3, r0
 8009f74:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	e021      	b.n	8009fbe <http_poll+0x68>
  } else {
    hs->retries++;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f80:	3301      	adds	r3, #1
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d105      	bne.n	8009fa0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8009f94:	68f9      	ldr	r1, [r7, #12]
 8009f96:	6838      	ldr	r0, [r7, #0]
 8009f98:	f7fe ffa0 	bl	8008edc <http_close_conn>
      return ERR_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e00e      	b.n	8009fbe <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d009      	beq.n	8009fbc <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009fa8:	68f9      	ldr	r1, [r7, #12]
 8009faa:	6838      	ldr	r0, [r7, #0]
 8009fac:	f7ff fc16 	bl	80097dc <http_send>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009fb6:	6838      	ldr	r0, [r7, #0]
 8009fb8:	f007 f98c 	bl	80112d4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8009fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <http_recv+0x26>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <http_recv+0x26>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d111      	bne.n	800a012 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d008      	beq.n	800a006 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	891b      	ldrh	r3, [r3, #8]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	68b8      	ldr	r0, [r7, #8]
 8009ffc:	f002 fd5e 	bl	800cabc <tcp_recved>
      pbuf_free(p);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 fded 	bl	800bbe0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a006:	6979      	ldr	r1, [r7, #20]
 800a008:	68b8      	ldr	r0, [r7, #8]
 800a00a:	f7fe ff67 	bl	8008edc <http_close_conn>
    return ERR_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	e055      	b.n	800a0be <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	891b      	ldrh	r3, [r3, #8]
 800a016:	4619      	mov	r1, r3
 800a018:	68b8      	ldr	r0, [r7, #8]
 800a01a:	f002 fd4f 	bl	800cabc <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d147      	bne.n	800a0b6 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	6979      	ldr	r1, [r7, #20]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff fc5e 	bl	80098ec <http_parse_request>
 800a030:	4603      	mov	r3, r0
 800a032:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a034:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d015      	beq.n	800a068 <http_recv+0xa0>
 800a03c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a040:	f113 0f05 	cmn.w	r3, #5
 800a044:	d010      	beq.n	800a068 <http_recv+0xa0>
 800a046:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a04a:	f113 0f10 	cmn.w	r3, #16
 800a04e:	d00b      	beq.n	800a068 <http_recv+0xa0>
 800a050:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a054:	f113 0f08 	cmn.w	r3, #8
 800a058:	d006      	beq.n	800a068 <http_recv+0xa0>
 800a05a:	4b1b      	ldr	r3, [pc, #108]	@ (800a0c8 <http_recv+0x100>)
 800a05c:	f640 2204 	movw	r2, #2564	@ 0xa04
 800a060:	491a      	ldr	r1, [pc, #104]	@ (800a0cc <http_recv+0x104>)
 800a062:	481b      	ldr	r0, [pc, #108]	@ (800a0d0 <http_recv+0x108>)
 800a064:	f00b f944 	bl	80152f0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a068:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a06c:	f113 0f05 	cmn.w	r3, #5
 800a070:	d00b      	beq.n	800a08a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d007      	beq.n	800a08a <http_recv+0xc2>
          pbuf_free(hs->req);
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 fdae 	bl	800bbe0 <pbuf_free>
          hs->req = NULL;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2200      	movs	r2, #0
 800a088:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f001 fda8 	bl	800bbe0 <pbuf_free>
      if (parsed == ERR_OK) {
 800a090:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d104      	bne.n	800a0a2 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800a098:	6979      	ldr	r1, [r7, #20]
 800a09a:	68b8      	ldr	r0, [r7, #8]
 800a09c:	f7ff fb9e 	bl	80097dc <http_send>
 800a0a0:	e00c      	b.n	800a0bc <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800a0a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0a6:	f113 0f10 	cmn.w	r3, #16
 800a0aa:	d107      	bne.n	800a0bc <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a0ac:	6979      	ldr	r1, [r7, #20]
 800a0ae:	68b8      	ldr	r0, [r7, #8]
 800a0b0:	f7fe ff14 	bl	8008edc <http_close_conn>
 800a0b4:	e002      	b.n	800a0bc <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f001 fd92 	bl	800bbe0 <pbuf_free>
    }
  }
  return ERR_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	08016ec4 	.word	0x08016ec4
 800a0cc:	08017070 	.word	0x08017070
 800a0d0:	08016f0c 	.word	0x08016f0c

0800a0d4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a0e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d102      	bne.n	800a0f0 <http_accept+0x1c>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <http_accept+0x22>
    return ERR_VAL;
 800a0f0:	f06f 0305 	mvn.w	r3, #5
 800a0f4:	e025      	b.n	800a142 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	68b8      	ldr	r0, [r7, #8]
 800a0fa:	f003 f9c5 	bl	800d488 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a0fe:	f7fe fdf3 	bl	8008ce8 <http_state_alloc>
 800a102:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a10a:	f04f 33ff 	mov.w	r3, #4294967295
 800a10e:	e018      	b.n	800a142 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a116:	6979      	ldr	r1, [r7, #20]
 800a118:	68b8      	ldr	r0, [r7, #8]
 800a11a:	f003 fbb5 	bl	800d888 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a11e:	490b      	ldr	r1, [pc, #44]	@ (800a14c <http_accept+0x78>)
 800a120:	68b8      	ldr	r0, [r7, #8]
 800a122:	f003 fbc3 	bl	800d8ac <tcp_recv>
  altcp_err(pcb, http_err);
 800a126:	490a      	ldr	r1, [pc, #40]	@ (800a150 <http_accept+0x7c>)
 800a128:	68b8      	ldr	r0, [r7, #8]
 800a12a:	f003 fc03 	bl	800d934 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a12e:	2204      	movs	r2, #4
 800a130:	4908      	ldr	r1, [pc, #32]	@ (800a154 <http_accept+0x80>)
 800a132:	68b8      	ldr	r0, [r7, #8]
 800a134:	f003 fc38 	bl	800d9a8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800a138:	4907      	ldr	r1, [pc, #28]	@ (800a158 <http_accept+0x84>)
 800a13a:	68b8      	ldr	r0, [r7, #8]
 800a13c:	f003 fbd8 	bl	800d8f0 <tcp_sent>

  return ERR_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	08009fc9 	.word	0x08009fc9
 800a150:	08009efd 	.word	0x08009efd
 800a154:	08009f57 	.word	0x08009f57
 800a158:	08009f21 	.word	0x08009f21

0800a15c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d029      	beq.n	800a1c2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a16e:	2101      	movs	r1, #1
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f003 f989 	bl	800d488 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800a176:	887b      	ldrh	r3, [r7, #2]
 800a178:	461a      	mov	r2, r3
 800a17a:	4914      	ldr	r1, [pc, #80]	@ (800a1cc <httpd_init_pcb+0x70>)
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f002 facf 	bl	800c720 <tcp_bind>
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800a186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d006      	beq.n	800a19c <httpd_init_pcb+0x40>
 800a18e:	4b10      	ldr	r3, [pc, #64]	@ (800a1d0 <httpd_init_pcb+0x74>)
 800a190:	f640 2257 	movw	r2, #2647	@ 0xa57
 800a194:	490f      	ldr	r1, [pc, #60]	@ (800a1d4 <httpd_init_pcb+0x78>)
 800a196:	4810      	ldr	r0, [pc, #64]	@ (800a1d8 <httpd_init_pcb+0x7c>)
 800a198:	f00b f8aa 	bl	80152f0 <iprintf>
    pcb = altcp_listen(pcb);
 800a19c:	21ff      	movs	r1, #255	@ 0xff
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f002 fb76 	bl	800c890 <tcp_listen_with_backlog>
 800a1a4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <httpd_init_pcb+0x5e>
 800a1ac:	4b08      	ldr	r3, [pc, #32]	@ (800a1d0 <httpd_init_pcb+0x74>)
 800a1ae:	f640 2259 	movw	r2, #2649	@ 0xa59
 800a1b2:	490a      	ldr	r1, [pc, #40]	@ (800a1dc <httpd_init_pcb+0x80>)
 800a1b4:	4808      	ldr	r0, [pc, #32]	@ (800a1d8 <httpd_init_pcb+0x7c>)
 800a1b6:	f00b f89b 	bl	80152f0 <iprintf>
    altcp_accept(pcb, http_accept);
 800a1ba:	4909      	ldr	r1, [pc, #36]	@ (800a1e0 <httpd_init_pcb+0x84>)
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f003 fbdb 	bl	800d978 <tcp_accept>
  }
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	0801a3a8 	.word	0x0801a3a8
 800a1d0:	08016ec4 	.word	0x08016ec4
 800a1d4:	0801709c 	.word	0x0801709c
 800a1d8:	08016f0c 	.word	0x08016f0c
 800a1dc:	080170b8 	.word	0x080170b8
 800a1e0:	0800a0d5 	.word	0x0800a0d5

0800a1e4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800a1ea:	202e      	movs	r0, #46	@ 0x2e
 800a1ec:	f003 fb3e 	bl	800d86c <tcp_new_ip_type>
 800a1f0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <httpd_init+0x22>
 800a1f8:	4b07      	ldr	r3, [pc, #28]	@ (800a218 <httpd_init+0x34>)
 800a1fa:	f640 2272 	movw	r2, #2674	@ 0xa72
 800a1fe:	4907      	ldr	r1, [pc, #28]	@ (800a21c <httpd_init+0x38>)
 800a200:	4807      	ldr	r0, [pc, #28]	@ (800a220 <httpd_init+0x3c>)
 800a202:	f00b f875 	bl	80152f0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800a206:	2150      	movs	r1, #80	@ 0x50
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff ffa7 	bl	800a15c <httpd_init_pcb>
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	08016ec4 	.word	0x08016ec4
 800a21c:	080170d8 	.word	0x080170d8
 800a220:	08016f0c 	.word	0x08016f0c

0800a224 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <http_set_ssi_handler+0x20>
 800a236:	4b14      	ldr	r3, [pc, #80]	@ (800a288 <http_set_ssi_handler+0x64>)
 800a238:	f640 2297 	movw	r2, #2711	@ 0xa97
 800a23c:	4913      	ldr	r1, [pc, #76]	@ (800a28c <http_set_ssi_handler+0x68>)
 800a23e:	4814      	ldr	r0, [pc, #80]	@ (800a290 <http_set_ssi_handler+0x6c>)
 800a240:	f00b f856 	bl	80152f0 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800a244:	4a13      	ldr	r2, [pc, #76]	@ (800a294 <http_set_ssi_handler+0x70>)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <http_set_ssi_handler+0x3a>
 800a250:	4b0d      	ldr	r3, [pc, #52]	@ (800a288 <http_set_ssi_handler+0x64>)
 800a252:	f640 229e 	movw	r2, #2718	@ 0xa9e
 800a256:	4910      	ldr	r1, [pc, #64]	@ (800a298 <http_set_ssi_handler+0x74>)
 800a258:	480d      	ldr	r0, [pc, #52]	@ (800a290 <http_set_ssi_handler+0x6c>)
 800a25a:	f00b f849 	bl	80152f0 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	dc06      	bgt.n	800a272 <http_set_ssi_handler+0x4e>
 800a264:	4b08      	ldr	r3, [pc, #32]	@ (800a288 <http_set_ssi_handler+0x64>)
 800a266:	f640 229f 	movw	r2, #2719	@ 0xa9f
 800a26a:	490c      	ldr	r1, [pc, #48]	@ (800a29c <http_set_ssi_handler+0x78>)
 800a26c:	4808      	ldr	r0, [pc, #32]	@ (800a290 <http_set_ssi_handler+0x6c>)
 800a26e:	f00b f83f 	bl	80152f0 <iprintf>

  httpd_tags = tags;
 800a272:	4a0b      	ldr	r2, [pc, #44]	@ (800a2a0 <http_set_ssi_handler+0x7c>)
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800a278:	4a0a      	ldr	r2, [pc, #40]	@ (800a2a4 <http_set_ssi_handler+0x80>)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800a27e:	bf00      	nop
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	08016ec4 	.word	0x08016ec4
 800a28c:	080170f4 	.word	0x080170f4
 800a290:	08016f0c 	.word	0x08016f0c
 800a294:	2000f268 	.word	0x2000f268
 800a298:	0801710c 	.word	0x0801710c
 800a29c:	0801711c 	.word	0x0801711c
 800a2a0:	2000f270 	.word	0x2000f270
 800a2a4:	2000f26c 	.word	0x2000f26c

0800a2a8 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d106      	bne.n	800a2c6 <http_set_cgi_handlers+0x1e>
 800a2b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f0 <http_set_cgi_handlers+0x48>)
 800a2ba:	f640 22b2 	movw	r2, #2738	@ 0xab2
 800a2be:	490d      	ldr	r1, [pc, #52]	@ (800a2f4 <http_set_cgi_handlers+0x4c>)
 800a2c0:	480d      	ldr	r0, [pc, #52]	@ (800a2f8 <http_set_cgi_handlers+0x50>)
 800a2c2:	f00b f815 	bl	80152f0 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dc06      	bgt.n	800a2da <http_set_cgi_handlers+0x32>
 800a2cc:	4b08      	ldr	r3, [pc, #32]	@ (800a2f0 <http_set_cgi_handlers+0x48>)
 800a2ce:	f640 22b3 	movw	r2, #2739	@ 0xab3
 800a2d2:	490a      	ldr	r1, [pc, #40]	@ (800a2fc <http_set_cgi_handlers+0x54>)
 800a2d4:	4808      	ldr	r0, [pc, #32]	@ (800a2f8 <http_set_cgi_handlers+0x50>)
 800a2d6:	f00b f80b 	bl	80152f0 <iprintf>

  httpd_cgis = cgis;
 800a2da:	4a09      	ldr	r2, [pc, #36]	@ (800a300 <http_set_cgi_handlers+0x58>)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800a2e0:	4a08      	ldr	r2, [pc, #32]	@ (800a304 <http_set_cgi_handlers+0x5c>)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6013      	str	r3, [r2, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	08016ec4 	.word	0x08016ec4
 800a2f4:	08017134 	.word	0x08017134
 800a2f8:	08016f0c 	.word	0x08016f0c
 800a2fc:	08017144 	.word	0x08017144
 800a300:	2000f274 	.word	0x2000f274
 800a304:	2000f278 	.word	0x2000f278

0800a308 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a316:	021b      	lsls	r3, r3, #8
 800a318:	b21a      	sxth	r2, r3
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	0a1b      	lsrs	r3, r3, #8
 800a31e:	b29b      	uxth	r3, r3
 800a320:	b21b      	sxth	r3, r3
 800a322:	4313      	orrs	r3, r2
 800a324:	b21b      	sxth	r3, r3
 800a326:	b29b      	uxth	r3, r3
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	061a      	lsls	r2, r3, #24
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	0a1b      	lsrs	r3, r3, #8
 800a34e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	0e1b      	lsrs	r3, r3, #24
 800a358:	4313      	orrs	r3, r2
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800a372:	68b8      	ldr	r0, [r7, #8]
 800a374:	f7f5 ff46 	bl	8000204 <strlen>
 800a378:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	e022      	b.n	800a3ca <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	617b      	str	r3, [r7, #20]
 800a388:	e012      	b.n	800a3b0 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	781a      	ldrb	r2, [r3, #0]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d109      	bne.n	800a3aa <lwip_strnstr+0x44>
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	6978      	ldr	r0, [r7, #20]
 800a39c:	f00b f965 	bl	801566a <strncmp>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	e00f      	b.n	800a3ca <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <lwip_strnstr+0x62>
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	441a      	add	r2, r3
 800a3be:	68f9      	ldr	r1, [r7, #12]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	440b      	add	r3, r1
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d9e0      	bls.n	800a38a <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	1c5a      	adds	r2, r3, #1
 800a3e0:	607a      	str	r2, [r7, #4]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	603a      	str	r2, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800a3f0:	7bfa      	ldrb	r2, [r7, #15]
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d016      	beq.n	800a426 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	f043 0320 	orr.w	r3, r3, #32
 800a3fe:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a400:	7b7b      	ldrb	r3, [r7, #13]
 800a402:	2b60      	cmp	r3, #96	@ 0x60
 800a404:	d90c      	bls.n	800a420 <lwip_stricmp+0x4e>
 800a406:	7b7b      	ldrb	r3, [r7, #13]
 800a408:	2b7a      	cmp	r3, #122	@ 0x7a
 800a40a:	d809      	bhi.n	800a420 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
 800a40e:	f043 0320 	orr.w	r3, r3, #32
 800a412:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800a414:	7b7a      	ldrb	r2, [r7, #13]
 800a416:	7b3b      	ldrb	r3, [r7, #12]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d003      	beq.n	800a424 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e006      	b.n	800a42e <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800a420:	2301      	movs	r3, #1
 800a422:	e004      	b.n	800a42e <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a424:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800a426:	7bfb      	ldrb	r3, [r7, #15]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1d7      	bne.n	800a3dc <lwip_stricmp+0xa>
  return 0;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a444:	f00a fd42 	bl	8014ecc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a448:	f000 f8d8 	bl	800a5fc <mem_init>
  memp_init();
 800a44c:	f000 fc40 	bl	800acd0 <memp_init>
  pbuf_init();
  netif_init();
 800a450:	f000 fd4c 	bl	800aeec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a454:	f008 f82e 	bl	80124b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a458:	f001 fe5c 	bl	800c114 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a45c:	f007 ff70 	bl	8012340 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a460:	bf00      	nop
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	4603      	mov	r3, r0
 800a470:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a472:	4b05      	ldr	r3, [pc, #20]	@ (800a488 <ptr_to_mem+0x20>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	88fb      	ldrh	r3, [r7, #6]
 800a478:	4413      	add	r3, r2
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	200140cc 	.word	0x200140cc

0800a48c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a494:	4b05      	ldr	r3, [pc, #20]	@ (800a4ac <mem_to_ptr+0x20>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	b29b      	uxth	r3, r3
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	200140cc 	.word	0x200140cc

0800a4b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a4b8:	4b47      	ldr	r3, [pc, #284]	@ (800a5d8 <plug_holes+0x128>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d206      	bcs.n	800a4d0 <plug_holes+0x20>
 800a4c2:	4b46      	ldr	r3, [pc, #280]	@ (800a5dc <plug_holes+0x12c>)
 800a4c4:	f240 12df 	movw	r2, #479	@ 0x1df
 800a4c8:	4945      	ldr	r1, [pc, #276]	@ (800a5e0 <plug_holes+0x130>)
 800a4ca:	4846      	ldr	r0, [pc, #280]	@ (800a5e4 <plug_holes+0x134>)
 800a4cc:	f00a ff10 	bl	80152f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a4d0:	4b45      	ldr	r3, [pc, #276]	@ (800a5e8 <plug_holes+0x138>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d306      	bcc.n	800a4e8 <plug_holes+0x38>
 800a4da:	4b40      	ldr	r3, [pc, #256]	@ (800a5dc <plug_holes+0x12c>)
 800a4dc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a4e0:	4942      	ldr	r1, [pc, #264]	@ (800a5ec <plug_holes+0x13c>)
 800a4e2:	4840      	ldr	r0, [pc, #256]	@ (800a5e4 <plug_holes+0x134>)
 800a4e4:	f00a ff04 	bl	80152f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	791b      	ldrb	r3, [r3, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d006      	beq.n	800a4fe <plug_holes+0x4e>
 800a4f0:	4b3a      	ldr	r3, [pc, #232]	@ (800a5dc <plug_holes+0x12c>)
 800a4f2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a4f6:	493e      	ldr	r1, [pc, #248]	@ (800a5f0 <plug_holes+0x140>)
 800a4f8:	483a      	ldr	r0, [pc, #232]	@ (800a5e4 <plug_holes+0x134>)
 800a4fa:	f00a fef9 	bl	80152f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a506:	4293      	cmp	r3, r2
 800a508:	d906      	bls.n	800a518 <plug_holes+0x68>
 800a50a:	4b34      	ldr	r3, [pc, #208]	@ (800a5dc <plug_holes+0x12c>)
 800a50c:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a510:	4938      	ldr	r1, [pc, #224]	@ (800a5f4 <plug_holes+0x144>)
 800a512:	4834      	ldr	r0, [pc, #208]	@ (800a5e4 <plug_holes+0x134>)
 800a514:	f00a feec 	bl	80152f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	881b      	ldrh	r3, [r3, #0]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7ff ffa3 	bl	800a468 <ptr_to_mem>
 800a522:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d025      	beq.n	800a578 <plug_holes+0xc8>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	791b      	ldrb	r3, [r3, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d121      	bne.n	800a578 <plug_holes+0xc8>
 800a534:	4b2c      	ldr	r3, [pc, #176]	@ (800a5e8 <plug_holes+0x138>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d01c      	beq.n	800a578 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a53e:	4b2e      	ldr	r3, [pc, #184]	@ (800a5f8 <plug_holes+0x148>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	429a      	cmp	r2, r3
 800a546:	d102      	bne.n	800a54e <plug_holes+0x9e>
      lfree = mem;
 800a548:	4a2b      	ldr	r2, [pc, #172]	@ (800a5f8 <plug_holes+0x148>)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	881a      	ldrh	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a55e:	4293      	cmp	r3, r2
 800a560:	d00a      	beq.n	800a578 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff ff7e 	bl	800a468 <ptr_to_mem>
 800a56c:	4604      	mov	r4, r0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff ff8c 	bl	800a48c <mem_to_ptr>
 800a574:	4603      	mov	r3, r0
 800a576:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	885b      	ldrh	r3, [r3, #2]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7ff ff73 	bl	800a468 <ptr_to_mem>
 800a582:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d020      	beq.n	800a5ce <plug_holes+0x11e>
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	791b      	ldrb	r3, [r3, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d11c      	bne.n	800a5ce <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a594:	4b18      	ldr	r3, [pc, #96]	@ (800a5f8 <plug_holes+0x148>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d102      	bne.n	800a5a4 <plug_holes+0xf4>
      lfree = pmem;
 800a59e:	4a16      	ldr	r2, [pc, #88]	@ (800a5f8 <plug_holes+0x148>)
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	881a      	ldrh	r2, [r3, #0]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d00a      	beq.n	800a5ce <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff ff53 	bl	800a468 <ptr_to_mem>
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	68b8      	ldr	r0, [r7, #8]
 800a5c6:	f7ff ff61 	bl	800a48c <mem_to_ptr>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a5ce:	bf00      	nop
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd90      	pop	{r4, r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	200140cc 	.word	0x200140cc
 800a5dc:	08017160 	.word	0x08017160
 800a5e0:	08017190 	.word	0x08017190
 800a5e4:	080171a8 	.word	0x080171a8
 800a5e8:	200140d0 	.word	0x200140d0
 800a5ec:	080171d0 	.word	0x080171d0
 800a5f0:	080171ec 	.word	0x080171ec
 800a5f4:	08017208 	.word	0x08017208
 800a5f8:	200140d8 	.word	0x200140d8

0800a5fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a602:	4b1f      	ldr	r3, [pc, #124]	@ (800a680 <mem_init+0x84>)
 800a604:	3303      	adds	r3, #3
 800a606:	f023 0303 	bic.w	r3, r3, #3
 800a60a:	461a      	mov	r2, r3
 800a60c:	4b1d      	ldr	r3, [pc, #116]	@ (800a684 <mem_init+0x88>)
 800a60e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a610:	4b1c      	ldr	r3, [pc, #112]	@ (800a684 <mem_init+0x88>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a61c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a62a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800a62e:	f7ff ff1b 	bl	800a468 <ptr_to_mem>
 800a632:	4603      	mov	r3, r0
 800a634:	4a14      	ldr	r2, [pc, #80]	@ (800a688 <mem_init+0x8c>)
 800a636:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a638:	4b13      	ldr	r3, [pc, #76]	@ (800a688 <mem_init+0x8c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2201      	movs	r2, #1
 800a63e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a640:	4b11      	ldr	r3, [pc, #68]	@ (800a688 <mem_init+0x8c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a648:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a64a:	4b0f      	ldr	r3, [pc, #60]	@ (800a688 <mem_init+0x8c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a652:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a654:	4b0b      	ldr	r3, [pc, #44]	@ (800a684 <mem_init+0x88>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a0c      	ldr	r2, [pc, #48]	@ (800a68c <mem_init+0x90>)
 800a65a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a65c:	480c      	ldr	r0, [pc, #48]	@ (800a690 <mem_init+0x94>)
 800a65e:	f00a fc43 	bl	8014ee8 <sys_mutex_new>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d006      	beq.n	800a676 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a668:	4b0a      	ldr	r3, [pc, #40]	@ (800a694 <mem_init+0x98>)
 800a66a:	f240 221f 	movw	r2, #543	@ 0x21f
 800a66e:	490a      	ldr	r1, [pc, #40]	@ (800a698 <mem_init+0x9c>)
 800a670:	480a      	ldr	r0, [pc, #40]	@ (800a69c <mem_init+0xa0>)
 800a672:	f00a fe3d 	bl	80152f0 <iprintf>
  }
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	2000f298 	.word	0x2000f298
 800a684:	200140cc 	.word	0x200140cc
 800a688:	200140d0 	.word	0x200140d0
 800a68c:	200140d8 	.word	0x200140d8
 800a690:	200140d4 	.word	0x200140d4
 800a694:	08017160 	.word	0x08017160
 800a698:	08017234 	.word	0x08017234
 800a69c:	080171a8 	.word	0x080171a8

0800a6a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff feef 	bl	800a48c <mem_to_ptr>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7ff fed6 	bl	800a468 <ptr_to_mem>
 800a6bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	885b      	ldrh	r3, [r3, #2]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fed0 	bl	800a468 <ptr_to_mem>
 800a6c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d819      	bhi.n	800a70a <mem_link_valid+0x6a>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	885b      	ldrh	r3, [r3, #2]
 800a6da:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d813      	bhi.n	800a70a <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a6e6:	8afa      	ldrh	r2, [r7, #22]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d004      	beq.n	800a6f6 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	8afa      	ldrh	r2, [r7, #22]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d109      	bne.n	800a70a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a6f6:	4b08      	ldr	r3, [pc, #32]	@ (800a718 <mem_link_valid+0x78>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d006      	beq.n	800a70e <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	885b      	ldrh	r3, [r3, #2]
 800a704:	8afa      	ldrh	r2, [r7, #22]
 800a706:	429a      	cmp	r2, r3
 800a708:	d001      	beq.n	800a70e <mem_link_valid+0x6e>
    return 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e000      	b.n	800a710 <mem_link_valid+0x70>
  }
  return 1;
 800a70e:	2301      	movs	r3, #1
}
 800a710:	4618      	mov	r0, r3
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	200140d0 	.word	0x200140d0

0800a71c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d070      	beq.n	800a80c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00d      	beq.n	800a750 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a734:	4b37      	ldr	r3, [pc, #220]	@ (800a814 <mem_free+0xf8>)
 800a736:	f240 2273 	movw	r2, #627	@ 0x273
 800a73a:	4937      	ldr	r1, [pc, #220]	@ (800a818 <mem_free+0xfc>)
 800a73c:	4837      	ldr	r0, [pc, #220]	@ (800a81c <mem_free+0x100>)
 800a73e:	f00a fdd7 	bl	80152f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a742:	f00a fc2f 	bl	8014fa4 <sys_arch_protect>
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f00a fc39 	bl	8014fc0 <sys_arch_unprotect>
    return;
 800a74e:	e05e      	b.n	800a80e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3b08      	subs	r3, #8
 800a754:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a756:	4b32      	ldr	r3, [pc, #200]	@ (800a820 <mem_free+0x104>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d306      	bcc.n	800a76e <mem_free+0x52>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f103 020c 	add.w	r2, r3, #12
 800a766:	4b2f      	ldr	r3, [pc, #188]	@ (800a824 <mem_free+0x108>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d90d      	bls.n	800a78a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a76e:	4b29      	ldr	r3, [pc, #164]	@ (800a814 <mem_free+0xf8>)
 800a770:	f240 227f 	movw	r2, #639	@ 0x27f
 800a774:	492c      	ldr	r1, [pc, #176]	@ (800a828 <mem_free+0x10c>)
 800a776:	4829      	ldr	r0, [pc, #164]	@ (800a81c <mem_free+0x100>)
 800a778:	f00a fdba 	bl	80152f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a77c:	f00a fc12 	bl	8014fa4 <sys_arch_protect>
 800a780:	6138      	str	r0, [r7, #16]
 800a782:	6938      	ldr	r0, [r7, #16]
 800a784:	f00a fc1c 	bl	8014fc0 <sys_arch_unprotect>
    return;
 800a788:	e041      	b.n	800a80e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a78a:	4828      	ldr	r0, [pc, #160]	@ (800a82c <mem_free+0x110>)
 800a78c:	f00a fbc8 	bl	8014f20 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	791b      	ldrb	r3, [r3, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d110      	bne.n	800a7ba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a798:	4b1e      	ldr	r3, [pc, #120]	@ (800a814 <mem_free+0xf8>)
 800a79a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a79e:	4924      	ldr	r1, [pc, #144]	@ (800a830 <mem_free+0x114>)
 800a7a0:	481e      	ldr	r0, [pc, #120]	@ (800a81c <mem_free+0x100>)
 800a7a2:	f00a fda5 	bl	80152f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a7a6:	4821      	ldr	r0, [pc, #132]	@ (800a82c <mem_free+0x110>)
 800a7a8:	f00a fbc9 	bl	8014f3e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7ac:	f00a fbfa 	bl	8014fa4 <sys_arch_protect>
 800a7b0:	6178      	str	r0, [r7, #20]
 800a7b2:	6978      	ldr	r0, [r7, #20]
 800a7b4:	f00a fc04 	bl	8014fc0 <sys_arch_unprotect>
    return;
 800a7b8:	e029      	b.n	800a80e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a7ba:	69f8      	ldr	r0, [r7, #28]
 800a7bc:	f7ff ff70 	bl	800a6a0 <mem_link_valid>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d110      	bne.n	800a7e8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a7c6:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <mem_free+0xf8>)
 800a7c8:	f240 2295 	movw	r2, #661	@ 0x295
 800a7cc:	4919      	ldr	r1, [pc, #100]	@ (800a834 <mem_free+0x118>)
 800a7ce:	4813      	ldr	r0, [pc, #76]	@ (800a81c <mem_free+0x100>)
 800a7d0:	f00a fd8e 	bl	80152f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a7d4:	4815      	ldr	r0, [pc, #84]	@ (800a82c <mem_free+0x110>)
 800a7d6:	f00a fbb2 	bl	8014f3e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7da:	f00a fbe3 	bl	8014fa4 <sys_arch_protect>
 800a7de:	61b8      	str	r0, [r7, #24]
 800a7e0:	69b8      	ldr	r0, [r7, #24]
 800a7e2:	f00a fbed 	bl	8014fc0 <sys_arch_unprotect>
    return;
 800a7e6:	e012      	b.n	800a80e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a7ee:	4b12      	ldr	r3, [pc, #72]	@ (800a838 <mem_free+0x11c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69fa      	ldr	r2, [r7, #28]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d202      	bcs.n	800a7fe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a7f8:	4a0f      	ldr	r2, [pc, #60]	@ (800a838 <mem_free+0x11c>)
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a7fe:	69f8      	ldr	r0, [r7, #28]
 800a800:	f7ff fe56 	bl	800a4b0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a804:	4809      	ldr	r0, [pc, #36]	@ (800a82c <mem_free+0x110>)
 800a806:	f00a fb9a 	bl	8014f3e <sys_mutex_unlock>
 800a80a:	e000      	b.n	800a80e <mem_free+0xf2>
    return;
 800a80c:	bf00      	nop
}
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	08017160 	.word	0x08017160
 800a818:	08017250 	.word	0x08017250
 800a81c:	080171a8 	.word	0x080171a8
 800a820:	200140cc 	.word	0x200140cc
 800a824:	200140d0 	.word	0x200140d0
 800a828:	08017274 	.word	0x08017274
 800a82c:	200140d4 	.word	0x200140d4
 800a830:	08017290 	.word	0x08017290
 800a834:	080172b8 	.word	0x080172b8
 800a838:	200140d8 	.word	0x200140d8

0800a83c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a848:	887b      	ldrh	r3, [r7, #2]
 800a84a:	3303      	adds	r3, #3
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a854:	8bfb      	ldrh	r3, [r7, #30]
 800a856:	2b0b      	cmp	r3, #11
 800a858:	d801      	bhi.n	800a85e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a85a:	230c      	movs	r3, #12
 800a85c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a85e:	8bfb      	ldrh	r3, [r7, #30]
 800a860:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a864:	4293      	cmp	r3, r2
 800a866:	d803      	bhi.n	800a870 <mem_trim+0x34>
 800a868:	8bfa      	ldrh	r2, [r7, #30]
 800a86a:	887b      	ldrh	r3, [r7, #2]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d201      	bcs.n	800a874 <mem_trim+0x38>
    return NULL;
 800a870:	2300      	movs	r3, #0
 800a872:	e0dc      	b.n	800aa2e <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a874:	4b70      	ldr	r3, [pc, #448]	@ (800aa38 <mem_trim+0x1fc>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d304      	bcc.n	800a888 <mem_trim+0x4c>
 800a87e:	4b6f      	ldr	r3, [pc, #444]	@ (800aa3c <mem_trim+0x200>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	429a      	cmp	r2, r3
 800a886:	d306      	bcc.n	800a896 <mem_trim+0x5a>
 800a888:	4b6d      	ldr	r3, [pc, #436]	@ (800aa40 <mem_trim+0x204>)
 800a88a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a88e:	496d      	ldr	r1, [pc, #436]	@ (800aa44 <mem_trim+0x208>)
 800a890:	486d      	ldr	r0, [pc, #436]	@ (800aa48 <mem_trim+0x20c>)
 800a892:	f00a fd2d 	bl	80152f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a896:	4b68      	ldr	r3, [pc, #416]	@ (800aa38 <mem_trim+0x1fc>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d304      	bcc.n	800a8aa <mem_trim+0x6e>
 800a8a0:	4b66      	ldr	r3, [pc, #408]	@ (800aa3c <mem_trim+0x200>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d307      	bcc.n	800a8ba <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a8aa:	f00a fb7b 	bl	8014fa4 <sys_arch_protect>
 800a8ae:	60b8      	str	r0, [r7, #8]
 800a8b0:	68b8      	ldr	r0, [r7, #8]
 800a8b2:	f00a fb85 	bl	8014fc0 <sys_arch_unprotect>
    return rmem;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	e0b9      	b.n	800aa2e <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3b08      	subs	r3, #8
 800a8be:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a8c0:	69b8      	ldr	r0, [r7, #24]
 800a8c2:	f7ff fde3 	bl	800a48c <mem_to_ptr>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	881a      	ldrh	r2, [r3, #0]
 800a8ce:	8afb      	ldrh	r3, [r7, #22]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	3b08      	subs	r3, #8
 800a8d6:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a8d8:	8bfa      	ldrh	r2, [r7, #30]
 800a8da:	8abb      	ldrh	r3, [r7, #20]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d906      	bls.n	800a8ee <mem_trim+0xb2>
 800a8e0:	4b57      	ldr	r3, [pc, #348]	@ (800aa40 <mem_trim+0x204>)
 800a8e2:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a8e6:	4959      	ldr	r1, [pc, #356]	@ (800aa4c <mem_trim+0x210>)
 800a8e8:	4857      	ldr	r0, [pc, #348]	@ (800aa48 <mem_trim+0x20c>)
 800a8ea:	f00a fd01 	bl	80152f0 <iprintf>
  if (newsize > size) {
 800a8ee:	8bfa      	ldrh	r2, [r7, #30]
 800a8f0:	8abb      	ldrh	r3, [r7, #20]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d901      	bls.n	800a8fa <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e099      	b.n	800aa2e <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800a8fa:	8bfa      	ldrh	r2, [r7, #30]
 800a8fc:	8abb      	ldrh	r3, [r7, #20]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d101      	bne.n	800a906 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	e093      	b.n	800aa2e <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a906:	4852      	ldr	r0, [pc, #328]	@ (800aa50 <mem_trim+0x214>)
 800a908:	f00a fb0a 	bl	8014f20 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fda9 	bl	800a468 <ptr_to_mem>
 800a916:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	791b      	ldrb	r3, [r3, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d141      	bne.n	800a9a4 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a928:	4293      	cmp	r3, r2
 800a92a:	d106      	bne.n	800a93a <mem_trim+0xfe>
 800a92c:	4b44      	ldr	r3, [pc, #272]	@ (800aa40 <mem_trim+0x204>)
 800a92e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a932:	4948      	ldr	r1, [pc, #288]	@ (800aa54 <mem_trim+0x218>)
 800a934:	4844      	ldr	r0, [pc, #272]	@ (800aa48 <mem_trim+0x20c>)
 800a936:	f00a fcdb 	bl	80152f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a940:	8afa      	ldrh	r2, [r7, #22]
 800a942:	8bfb      	ldrh	r3, [r7, #30]
 800a944:	4413      	add	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	3308      	adds	r3, #8
 800a94a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a94c:	4b42      	ldr	r3, [pc, #264]	@ (800aa58 <mem_trim+0x21c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	429a      	cmp	r2, r3
 800a954:	d106      	bne.n	800a964 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800a956:	89fb      	ldrh	r3, [r7, #14]
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff fd85 	bl	800a468 <ptr_to_mem>
 800a95e:	4603      	mov	r3, r0
 800a960:	4a3d      	ldr	r2, [pc, #244]	@ (800aa58 <mem_trim+0x21c>)
 800a962:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a964:	89fb      	ldrh	r3, [r7, #14]
 800a966:	4618      	mov	r0, r3
 800a968:	f7ff fd7e 	bl	800a468 <ptr_to_mem>
 800a96c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	2200      	movs	r2, #0
 800a972:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	89ba      	ldrh	r2, [r7, #12]
 800a978:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	8afa      	ldrh	r2, [r7, #22]
 800a97e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	89fa      	ldrh	r2, [r7, #14]
 800a984:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a98e:	4293      	cmp	r3, r2
 800a990:	d049      	beq.n	800aa26 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	881b      	ldrh	r3, [r3, #0]
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fd66 	bl	800a468 <ptr_to_mem>
 800a99c:	4602      	mov	r2, r0
 800a99e:	89fb      	ldrh	r3, [r7, #14]
 800a9a0:	8053      	strh	r3, [r2, #2]
 800a9a2:	e040      	b.n	800aa26 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a9a4:	8bfb      	ldrh	r3, [r7, #30]
 800a9a6:	f103 0214 	add.w	r2, r3, #20
 800a9aa:	8abb      	ldrh	r3, [r7, #20]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d83a      	bhi.n	800aa26 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a9b0:	8afa      	ldrh	r2, [r7, #22]
 800a9b2:	8bfb      	ldrh	r3, [r7, #30]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d106      	bne.n	800a9d6 <mem_trim+0x19a>
 800a9c8:	4b1d      	ldr	r3, [pc, #116]	@ (800aa40 <mem_trim+0x204>)
 800a9ca:	f240 3216 	movw	r2, #790	@ 0x316
 800a9ce:	4921      	ldr	r1, [pc, #132]	@ (800aa54 <mem_trim+0x218>)
 800a9d0:	481d      	ldr	r0, [pc, #116]	@ (800aa48 <mem_trim+0x20c>)
 800a9d2:	f00a fc8d 	bl	80152f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a9d6:	89fb      	ldrh	r3, [r7, #14]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff fd45 	bl	800a468 <ptr_to_mem>
 800a9de:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a9e0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa58 <mem_trim+0x21c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d202      	bcs.n	800a9f0 <mem_trim+0x1b4>
      lfree = mem2;
 800a9ea:	4a1b      	ldr	r2, [pc, #108]	@ (800aa58 <mem_trim+0x21c>)
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	881a      	ldrh	r2, [r3, #0]
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	8afa      	ldrh	r2, [r7, #22]
 800aa02:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	89fa      	ldrh	r2, [r7, #14]
 800aa08:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d007      	beq.n	800aa26 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff fd24 	bl	800a468 <ptr_to_mem>
 800aa20:	4602      	mov	r2, r0
 800aa22:	89fb      	ldrh	r3, [r7, #14]
 800aa24:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aa26:	480a      	ldr	r0, [pc, #40]	@ (800aa50 <mem_trim+0x214>)
 800aa28:	f00a fa89 	bl	8014f3e <sys_mutex_unlock>
  return rmem;
 800aa2c:	687b      	ldr	r3, [r7, #4]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	200140cc 	.word	0x200140cc
 800aa3c:	200140d0 	.word	0x200140d0
 800aa40:	08017160 	.word	0x08017160
 800aa44:	080172ec 	.word	0x080172ec
 800aa48:	080171a8 	.word	0x080171a8
 800aa4c:	08017304 	.word	0x08017304
 800aa50:	200140d4 	.word	0x200140d4
 800aa54:	08017324 	.word	0x08017324
 800aa58:	200140d8 	.word	0x200140d8

0800aa5c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b088      	sub	sp, #32
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800aa66:	88fb      	ldrh	r3, [r7, #6]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <mem_malloc+0x14>
    return NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	e0e6      	b.n	800ac3e <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800aa70:	88fb      	ldrh	r3, [r7, #6]
 800aa72:	3303      	adds	r3, #3
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	f023 0303 	bic.w	r3, r3, #3
 800aa7a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aa7c:	8bbb      	ldrh	r3, [r7, #28]
 800aa7e:	2b0b      	cmp	r3, #11
 800aa80:	d801      	bhi.n	800aa86 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aa82:	230c      	movs	r3, #12
 800aa84:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800aa86:	8bbb      	ldrh	r3, [r7, #28]
 800aa88:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d803      	bhi.n	800aa98 <mem_malloc+0x3c>
 800aa90:	8bba      	ldrh	r2, [r7, #28]
 800aa92:	88fb      	ldrh	r3, [r7, #6]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d201      	bcs.n	800aa9c <mem_malloc+0x40>
    return NULL;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	e0d0      	b.n	800ac3e <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800aa9c:	486a      	ldr	r0, [pc, #424]	@ (800ac48 <mem_malloc+0x1ec>)
 800aa9e:	f00a fa3f 	bl	8014f20 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aaa2:	4b6a      	ldr	r3, [pc, #424]	@ (800ac4c <mem_malloc+0x1f0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff fcf0 	bl	800a48c <mem_to_ptr>
 800aaac:	4603      	mov	r3, r0
 800aaae:	83fb      	strh	r3, [r7, #30]
 800aab0:	e0b9      	b.n	800ac26 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aab2:	8bfb      	ldrh	r3, [r7, #30]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff fcd7 	bl	800a468 <ptr_to_mem>
 800aaba:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	791b      	ldrb	r3, [r3, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f040 80a9 	bne.w	800ac18 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	8bfb      	ldrh	r3, [r7, #30]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	f1a3 0208 	sub.w	r2, r3, #8
 800aad4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aad6:	429a      	cmp	r2, r3
 800aad8:	f0c0 809e 	bcc.w	800ac18 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	8bfb      	ldrh	r3, [r7, #30]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	f1a3 0208 	sub.w	r2, r3, #8
 800aaea:	8bbb      	ldrh	r3, [r7, #28]
 800aaec:	3314      	adds	r3, #20
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d335      	bcc.n	800ab5e <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aaf2:	8bfa      	ldrh	r2, [r7, #30]
 800aaf4:	8bbb      	ldrh	r3, [r7, #28]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	3308      	adds	r3, #8
 800aafc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aafe:	8a7b      	ldrh	r3, [r7, #18]
 800ab00:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d106      	bne.n	800ab16 <mem_malloc+0xba>
 800ab08:	4b51      	ldr	r3, [pc, #324]	@ (800ac50 <mem_malloc+0x1f4>)
 800ab0a:	f240 3287 	movw	r2, #903	@ 0x387
 800ab0e:	4951      	ldr	r1, [pc, #324]	@ (800ac54 <mem_malloc+0x1f8>)
 800ab10:	4851      	ldr	r0, [pc, #324]	@ (800ac58 <mem_malloc+0x1fc>)
 800ab12:	f00a fbed 	bl	80152f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ab16:	8a7b      	ldrh	r3, [r7, #18]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7ff fca5 	bl	800a468 <ptr_to_mem>
 800ab1e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	881a      	ldrh	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	8bfa      	ldrh	r2, [r7, #30]
 800ab32:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	8a7a      	ldrh	r2, [r7, #18]
 800ab38:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00b      	beq.n	800ab64 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fc89 	bl	800a468 <ptr_to_mem>
 800ab56:	4602      	mov	r2, r0
 800ab58:	8a7b      	ldrh	r3, [r7, #18]
 800ab5a:	8053      	strh	r3, [r2, #2]
 800ab5c:	e002      	b.n	800ab64 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2201      	movs	r2, #1
 800ab62:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ab64:	4b39      	ldr	r3, [pc, #228]	@ (800ac4c <mem_malloc+0x1f0>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d127      	bne.n	800abbe <mem_malloc+0x162>
          struct mem *cur = lfree;
 800ab6e:	4b37      	ldr	r3, [pc, #220]	@ (800ac4c <mem_malloc+0x1f0>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ab74:	e005      	b.n	800ab82 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7ff fc74 	bl	800a468 <ptr_to_mem>
 800ab80:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d004      	beq.n	800ab94 <mem_malloc+0x138>
 800ab8a:	4b34      	ldr	r3, [pc, #208]	@ (800ac5c <mem_malloc+0x200>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d1f0      	bne.n	800ab76 <mem_malloc+0x11a>
          }
          lfree = cur;
 800ab94:	4a2d      	ldr	r2, [pc, #180]	@ (800ac4c <mem_malloc+0x1f0>)
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ab9a:	4b2c      	ldr	r3, [pc, #176]	@ (800ac4c <mem_malloc+0x1f0>)
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ac5c <mem_malloc+0x200>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d00b      	beq.n	800abbe <mem_malloc+0x162>
 800aba6:	4b29      	ldr	r3, [pc, #164]	@ (800ac4c <mem_malloc+0x1f0>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	791b      	ldrb	r3, [r3, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d006      	beq.n	800abbe <mem_malloc+0x162>
 800abb0:	4b27      	ldr	r3, [pc, #156]	@ (800ac50 <mem_malloc+0x1f4>)
 800abb2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800abb6:	492a      	ldr	r1, [pc, #168]	@ (800ac60 <mem_malloc+0x204>)
 800abb8:	4827      	ldr	r0, [pc, #156]	@ (800ac58 <mem_malloc+0x1fc>)
 800abba:	f00a fb99 	bl	80152f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800abbe:	4822      	ldr	r0, [pc, #136]	@ (800ac48 <mem_malloc+0x1ec>)
 800abc0:	f00a f9bd 	bl	8014f3e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800abc4:	8bba      	ldrh	r2, [r7, #28]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	4413      	add	r3, r2
 800abca:	3308      	adds	r3, #8
 800abcc:	4a23      	ldr	r2, [pc, #140]	@ (800ac5c <mem_malloc+0x200>)
 800abce:	6812      	ldr	r2, [r2, #0]
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d906      	bls.n	800abe2 <mem_malloc+0x186>
 800abd4:	4b1e      	ldr	r3, [pc, #120]	@ (800ac50 <mem_malloc+0x1f4>)
 800abd6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800abda:	4922      	ldr	r1, [pc, #136]	@ (800ac64 <mem_malloc+0x208>)
 800abdc:	481e      	ldr	r0, [pc, #120]	@ (800ac58 <mem_malloc+0x1fc>)
 800abde:	f00a fb87 	bl	80152f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f003 0303 	and.w	r3, r3, #3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d006      	beq.n	800abfa <mem_malloc+0x19e>
 800abec:	4b18      	ldr	r3, [pc, #96]	@ (800ac50 <mem_malloc+0x1f4>)
 800abee:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800abf2:	491d      	ldr	r1, [pc, #116]	@ (800ac68 <mem_malloc+0x20c>)
 800abf4:	4818      	ldr	r0, [pc, #96]	@ (800ac58 <mem_malloc+0x1fc>)
 800abf6:	f00a fb7b 	bl	80152f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f003 0303 	and.w	r3, r3, #3
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d006      	beq.n	800ac12 <mem_malloc+0x1b6>
 800ac04:	4b12      	ldr	r3, [pc, #72]	@ (800ac50 <mem_malloc+0x1f4>)
 800ac06:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800ac0a:	4918      	ldr	r1, [pc, #96]	@ (800ac6c <mem_malloc+0x210>)
 800ac0c:	4812      	ldr	r0, [pc, #72]	@ (800ac58 <mem_malloc+0x1fc>)
 800ac0e:	f00a fb6f 	bl	80152f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	3308      	adds	r3, #8
 800ac16:	e012      	b.n	800ac3e <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800ac18:	8bfb      	ldrh	r3, [r7, #30]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff fc24 	bl	800a468 <ptr_to_mem>
 800ac20:	4603      	mov	r3, r0
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ac26:	8bfa      	ldrh	r2, [r7, #30]
 800ac28:	8bbb      	ldrh	r3, [r7, #28]
 800ac2a:	f5c3 439c 	rsb	r3, r3, #19968	@ 0x4e00
 800ac2e:	3320      	adds	r3, #32
 800ac30:	429a      	cmp	r2, r3
 800ac32:	f4ff af3e 	bcc.w	800aab2 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ac36:	4804      	ldr	r0, [pc, #16]	@ (800ac48 <mem_malloc+0x1ec>)
 800ac38:	f00a f981 	bl	8014f3e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	200140d4 	.word	0x200140d4
 800ac4c:	200140d8 	.word	0x200140d8
 800ac50:	08017160 	.word	0x08017160
 800ac54:	08017324 	.word	0x08017324
 800ac58:	080171a8 	.word	0x080171a8
 800ac5c:	200140d0 	.word	0x200140d0
 800ac60:	08017338 	.word	0x08017338
 800ac64:	08017354 	.word	0x08017354
 800ac68:	08017384 	.word	0x08017384
 800ac6c:	080173b4 	.word	0x080173b4

0800ac70 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	3303      	adds	r3, #3
 800ac86:	f023 0303 	bic.w	r3, r3, #3
 800ac8a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]
 800ac90:	e011      	b.n	800acb6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	461a      	mov	r2, r3
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	4413      	add	r3, r2
 800acae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3301      	adds	r3, #1
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	885b      	ldrh	r3, [r3, #2]
 800acba:	461a      	mov	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	dbe7      	blt.n	800ac92 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800acc2:	bf00      	nop
 800acc4:	bf00      	nop
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800acd6:	2300      	movs	r3, #0
 800acd8:	80fb      	strh	r3, [r7, #6]
 800acda:	e009      	b.n	800acf0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800acdc:	88fb      	ldrh	r3, [r7, #6]
 800acde:	4a08      	ldr	r2, [pc, #32]	@ (800ad00 <memp_init+0x30>)
 800ace0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff ffc3 	bl	800ac70 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800acea:	88fb      	ldrh	r3, [r7, #6]
 800acec:	3301      	adds	r3, #1
 800acee:	80fb      	strh	r3, [r7, #6]
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	2b0c      	cmp	r3, #12
 800acf4:	d9f2      	bls.n	800acdc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800acf6:	bf00      	nop
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	0801a334 	.word	0x0801a334

0800ad04 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ad0c:	f00a f94a 	bl	8014fa4 <sys_arch_protect>
 800ad10:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d015      	beq.n	800ad4c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	6812      	ldr	r2, [r2, #0]
 800ad28:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f003 0303 	and.w	r3, r3, #3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d006      	beq.n	800ad42 <do_memp_malloc_pool+0x3e>
 800ad34:	4b09      	ldr	r3, [pc, #36]	@ (800ad5c <do_memp_malloc_pool+0x58>)
 800ad36:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800ad3a:	4909      	ldr	r1, [pc, #36]	@ (800ad60 <do_memp_malloc_pool+0x5c>)
 800ad3c:	4809      	ldr	r0, [pc, #36]	@ (800ad64 <do_memp_malloc_pool+0x60>)
 800ad3e:	f00a fad7 	bl	80152f0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f00a f93c 	bl	8014fc0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	e003      	b.n	800ad54 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f00a f937 	bl	8014fc0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	080173d8 	.word	0x080173d8
 800ad60:	08017408 	.word	0x08017408
 800ad64:	0801742c 	.word	0x0801742c

0800ad68 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <memp_malloc_pool+0x1c>
 800ad76:	4b0a      	ldr	r3, [pc, #40]	@ (800ada0 <memp_malloc_pool+0x38>)
 800ad78:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ad7c:	4909      	ldr	r1, [pc, #36]	@ (800ada4 <memp_malloc_pool+0x3c>)
 800ad7e:	480a      	ldr	r0, [pc, #40]	@ (800ada8 <memp_malloc_pool+0x40>)
 800ad80:	f00a fab6 	bl	80152f0 <iprintf>
  if (desc == NULL) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <memp_malloc_pool+0x26>
    return NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	e003      	b.n	800ad96 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff ffb8 	bl	800ad04 <do_memp_malloc_pool>
 800ad94:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	080173d8 	.word	0x080173d8
 800ada4:	08017454 	.word	0x08017454
 800ada8:	0801742c 	.word	0x0801742c

0800adac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	4603      	mov	r3, r0
 800adb4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	2b0c      	cmp	r3, #12
 800adba:	d908      	bls.n	800adce <memp_malloc+0x22>
 800adbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ade8 <memp_malloc+0x3c>)
 800adbe:	f240 1257 	movw	r2, #343	@ 0x157
 800adc2:	490a      	ldr	r1, [pc, #40]	@ (800adec <memp_malloc+0x40>)
 800adc4:	480a      	ldr	r0, [pc, #40]	@ (800adf0 <memp_malloc+0x44>)
 800adc6:	f00a fa93 	bl	80152f0 <iprintf>
 800adca:	2300      	movs	r3, #0
 800adcc:	e008      	b.n	800ade0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800adce:	79fb      	ldrb	r3, [r7, #7]
 800add0:	4a08      	ldr	r2, [pc, #32]	@ (800adf4 <memp_malloc+0x48>)
 800add2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff ff94 	bl	800ad04 <do_memp_malloc_pool>
 800addc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800adde:	68fb      	ldr	r3, [r7, #12]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	080173d8 	.word	0x080173d8
 800adec:	08017468 	.word	0x08017468
 800adf0:	0801742c 	.word	0x0801742c
 800adf4:	0801a334 	.word	0x0801a334

0800adf8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	f003 0303 	and.w	r3, r3, #3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d006      	beq.n	800ae1a <do_memp_free_pool+0x22>
 800ae0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ae44 <do_memp_free_pool+0x4c>)
 800ae0e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ae12:	490d      	ldr	r1, [pc, #52]	@ (800ae48 <do_memp_free_pool+0x50>)
 800ae14:	480d      	ldr	r0, [pc, #52]	@ (800ae4c <do_memp_free_pool+0x54>)
 800ae16:	f00a fa6b 	bl	80152f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ae1e:	f00a f8c1 	bl	8014fa4 <sys_arch_protect>
 800ae22:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ae36:	68b8      	ldr	r0, [r7, #8]
 800ae38:	f00a f8c2 	bl	8014fc0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ae3c:	bf00      	nop
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	080173d8 	.word	0x080173d8
 800ae48:	08017488 	.word	0x08017488
 800ae4c:	0801742c 	.word	0x0801742c

0800ae50 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <memp_free_pool+0x1e>
 800ae60:	4b0a      	ldr	r3, [pc, #40]	@ (800ae8c <memp_free_pool+0x3c>)
 800ae62:	f240 1295 	movw	r2, #405	@ 0x195
 800ae66:	490a      	ldr	r1, [pc, #40]	@ (800ae90 <memp_free_pool+0x40>)
 800ae68:	480a      	ldr	r0, [pc, #40]	@ (800ae94 <memp_free_pool+0x44>)
 800ae6a:	f00a fa41 	bl	80152f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d007      	beq.n	800ae84 <memp_free_pool+0x34>
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ffbb 	bl	800adf8 <do_memp_free_pool>
 800ae82:	e000      	b.n	800ae86 <memp_free_pool+0x36>
    return;
 800ae84:	bf00      	nop
}
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	080173d8 	.word	0x080173d8
 800ae90:	08017454 	.word	0x08017454
 800ae94:	0801742c 	.word	0x0801742c

0800ae98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	2b0c      	cmp	r3, #12
 800aea8:	d907      	bls.n	800aeba <memp_free+0x22>
 800aeaa:	4b0c      	ldr	r3, [pc, #48]	@ (800aedc <memp_free+0x44>)
 800aeac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800aeb0:	490b      	ldr	r1, [pc, #44]	@ (800aee0 <memp_free+0x48>)
 800aeb2:	480c      	ldr	r0, [pc, #48]	@ (800aee4 <memp_free+0x4c>)
 800aeb4:	f00a fa1c 	bl	80152f0 <iprintf>
 800aeb8:	e00c      	b.n	800aed4 <memp_free+0x3c>

  if (mem == NULL) {
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d008      	beq.n	800aed2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	4a09      	ldr	r2, [pc, #36]	@ (800aee8 <memp_free+0x50>)
 800aec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7ff ff94 	bl	800adf8 <do_memp_free_pool>
 800aed0:	e000      	b.n	800aed4 <memp_free+0x3c>
    return;
 800aed2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	080173d8 	.word	0x080173d8
 800aee0:	080174a8 	.word	0x080174a8
 800aee4:	0801742c 	.word	0x0801742c
 800aee8:	0801a334 	.word	0x0801a334

0800aeec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aef0:	bf00      	nop
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
	...

0800aefc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d108      	bne.n	800af22 <netif_add+0x26>
 800af10:	4b57      	ldr	r3, [pc, #348]	@ (800b070 <netif_add+0x174>)
 800af12:	f240 1227 	movw	r2, #295	@ 0x127
 800af16:	4957      	ldr	r1, [pc, #348]	@ (800b074 <netif_add+0x178>)
 800af18:	4857      	ldr	r0, [pc, #348]	@ (800b078 <netif_add+0x17c>)
 800af1a:	f00a f9e9 	bl	80152f0 <iprintf>
 800af1e:	2300      	movs	r3, #0
 800af20:	e0a2      	b.n	800b068 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800af22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	d108      	bne.n	800af3a <netif_add+0x3e>
 800af28:	4b51      	ldr	r3, [pc, #324]	@ (800b070 <netif_add+0x174>)
 800af2a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800af2e:	4953      	ldr	r1, [pc, #332]	@ (800b07c <netif_add+0x180>)
 800af30:	4851      	ldr	r0, [pc, #324]	@ (800b078 <netif_add+0x17c>)
 800af32:	f00a f9dd 	bl	80152f0 <iprintf>
 800af36:	2300      	movs	r3, #0
 800af38:	e096      	b.n	800b068 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800af40:	4b4f      	ldr	r3, [pc, #316]	@ (800b080 <netif_add+0x184>)
 800af42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800af4a:	4b4d      	ldr	r3, [pc, #308]	@ (800b080 <netif_add+0x184>)
 800af4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800af54:	4b4a      	ldr	r3, [pc, #296]	@ (800b080 <netif_add+0x184>)
 800af56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	4a45      	ldr	r2, [pc, #276]	@ (800b084 <netif_add+0x188>)
 800af6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6a3a      	ldr	r2, [r7, #32]
 800af88:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800af8a:	4b3f      	ldr	r3, [pc, #252]	@ (800b088 <netif_add+0x18c>)
 800af8c:	781a      	ldrb	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af98:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	68b9      	ldr	r1, [r7, #8]
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 f913 	bl	800b1cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800afa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	4798      	blx	r3
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <netif_add+0xba>
    return NULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	e058      	b.n	800b068 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800afbc:	2bff      	cmp	r3, #255	@ 0xff
 800afbe:	d103      	bne.n	800afc8 <netif_add+0xcc>
        netif->num = 0;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800afcc:	4b2f      	ldr	r3, [pc, #188]	@ (800b08c <netif_add+0x190>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	617b      	str	r3, [r7, #20]
 800afd2:	e02b      	b.n	800b02c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d106      	bne.n	800afea <netif_add+0xee>
 800afdc:	4b24      	ldr	r3, [pc, #144]	@ (800b070 <netif_add+0x174>)
 800afde:	f240 128b 	movw	r2, #395	@ 0x18b
 800afe2:	492b      	ldr	r1, [pc, #172]	@ (800b090 <netif_add+0x194>)
 800afe4:	4824      	ldr	r0, [pc, #144]	@ (800b078 <netif_add+0x17c>)
 800afe6:	f00a f983 	bl	80152f0 <iprintf>
        num_netifs++;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	3301      	adds	r3, #1
 800afee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2bff      	cmp	r3, #255	@ 0xff
 800aff4:	dd06      	ble.n	800b004 <netif_add+0x108>
 800aff6:	4b1e      	ldr	r3, [pc, #120]	@ (800b070 <netif_add+0x174>)
 800aff8:	f240 128d 	movw	r2, #397	@ 0x18d
 800affc:	4925      	ldr	r1, [pc, #148]	@ (800b094 <netif_add+0x198>)
 800affe:	481e      	ldr	r0, [pc, #120]	@ (800b078 <netif_add+0x17c>)
 800b000:	f00a f976 	bl	80152f0 <iprintf>
        if (netif2->num == netif->num) {
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b010:	429a      	cmp	r2, r3
 800b012:	d108      	bne.n	800b026 <netif_add+0x12a>
          netif->num++;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b01a:	3301      	adds	r3, #1
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b024:	e005      	b.n	800b032 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1d0      	bne.n	800afd4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1be      	bne.n	800afb6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b03e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b040:	d103      	bne.n	800b04a <netif_add+0x14e>
    netif_num = 0;
 800b042:	4b11      	ldr	r3, [pc, #68]	@ (800b088 <netif_add+0x18c>)
 800b044:	2200      	movs	r2, #0
 800b046:	701a      	strb	r2, [r3, #0]
 800b048:	e006      	b.n	800b058 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b050:	3301      	adds	r3, #1
 800b052:	b2da      	uxtb	r2, r3
 800b054:	4b0c      	ldr	r3, [pc, #48]	@ (800b088 <netif_add+0x18c>)
 800b056:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b058:	4b0c      	ldr	r3, [pc, #48]	@ (800b08c <netif_add+0x190>)
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b060:	4a0a      	ldr	r2, [pc, #40]	@ (800b08c <netif_add+0x190>)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b066:	68fb      	ldr	r3, [r7, #12]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	080174c4 	.word	0x080174c4
 800b074:	08017558 	.word	0x08017558
 800b078:	08017514 	.word	0x08017514
 800b07c:	08017574 	.word	0x08017574
 800b080:	0801a3a8 	.word	0x0801a3a8
 800b084:	0800b4a7 	.word	0x0800b4a7
 800b088:	200171b0 	.word	0x200171b0
 800b08c:	200171a8 	.word	0x200171a8
 800b090:	08017598 	.word	0x08017598
 800b094:	080175ac 	.word	0x080175ac

0800b098 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f002 fe25 	bl	800dcf4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f007 fb8b 	bl	80127c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b0b2:	bf00      	nop
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <netif_do_set_ipaddr+0x20>
 800b0ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b144 <netif_do_set_ipaddr+0x88>)
 800b0d0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b0d4:	491c      	ldr	r1, [pc, #112]	@ (800b148 <netif_do_set_ipaddr+0x8c>)
 800b0d6:	481d      	ldr	r0, [pc, #116]	@ (800b14c <netif_do_set_ipaddr+0x90>)
 800b0d8:	f00a f90a 	bl	80152f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <netif_do_set_ipaddr+0x34>
 800b0e2:	4b18      	ldr	r3, [pc, #96]	@ (800b144 <netif_do_set_ipaddr+0x88>)
 800b0e4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b0e8:	4917      	ldr	r1, [pc, #92]	@ (800b148 <netif_do_set_ipaddr+0x8c>)
 800b0ea:	4818      	ldr	r0, [pc, #96]	@ (800b14c <netif_do_set_ipaddr+0x90>)
 800b0ec:	f00a f900 	bl	80152f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d01c      	beq.n	800b138 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	3304      	adds	r3, #4
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b10e:	f107 0314 	add.w	r3, r7, #20
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7ff ffbf 	bl	800b098 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <netif_do_set_ipaddr+0x6a>
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	e000      	b.n	800b128 <netif_do_set_ipaddr+0x6c>
 800b126:	2300      	movs	r3, #0
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b12c:	2101      	movs	r1, #1
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f000 f8d2 	bl	800b2d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b134:	2301      	movs	r3, #1
 800b136:	e000      	b.n	800b13a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	080174c4 	.word	0x080174c4
 800b148:	080175dc 	.word	0x080175dc
 800b14c:	08017514 	.word	0x08017514

0800b150 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3308      	adds	r3, #8
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d00a      	beq.n	800b180 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <netif_do_set_netmask+0x26>
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	e000      	b.n	800b178 <netif_do_set_netmask+0x28>
 800b176:	2300      	movs	r3, #0
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b17c:	2301      	movs	r3, #1
 800b17e:	e000      	b.n	800b182 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b18e:	b480      	push	{r7}
 800b190:	b085      	sub	sp, #20
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	330c      	adds	r3, #12
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d00a      	beq.n	800b1be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <netif_do_set_gw+0x26>
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	e000      	b.n	800b1b6 <netif_do_set_gw+0x28>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e000      	b.n	800b1c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b1e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b25c <netif_set_addr+0x90>)
 800b1ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b1f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b25c <netif_set_addr+0x90>)
 800b1f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b1fc:	4b17      	ldr	r3, [pc, #92]	@ (800b25c <netif_set_addr+0x90>)
 800b1fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <netif_set_addr+0x42>
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <netif_set_addr+0x46>
 800b20e:	2301      	movs	r3, #1
 800b210:	e000      	b.n	800b214 <netif_set_addr+0x48>
 800b212:	2300      	movs	r3, #0
 800b214:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b21c:	f107 0310 	add.w	r3, r7, #16
 800b220:	461a      	mov	r2, r3
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7ff ff49 	bl	800b0bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f7ff ff8e 	bl	800b150 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f7ff ffa8 	bl	800b18e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d106      	bne.n	800b252 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b244:	f107 0310 	add.w	r3, r7, #16
 800b248:	461a      	mov	r2, r3
 800b24a:	68b9      	ldr	r1, [r7, #8]
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f7ff ff35 	bl	800b0bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b252:	bf00      	nop
 800b254:	3720      	adds	r7, #32
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	0801a3a8 	.word	0x0801a3a8

0800b260 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b268:	4a04      	ldr	r2, [pc, #16]	@ (800b27c <netif_set_default+0x1c>)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	200171ac 	.word	0x200171ac

0800b280 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d107      	bne.n	800b29e <netif_set_up+0x1e>
 800b28e:	4b0f      	ldr	r3, [pc, #60]	@ (800b2cc <netif_set_up+0x4c>)
 800b290:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b294:	490e      	ldr	r1, [pc, #56]	@ (800b2d0 <netif_set_up+0x50>)
 800b296:	480f      	ldr	r0, [pc, #60]	@ (800b2d4 <netif_set_up+0x54>)
 800b298:	f00a f82a 	bl	80152f0 <iprintf>
 800b29c:	e013      	b.n	800b2c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10c      	bne.n	800b2c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2b2:	f043 0301 	orr.w	r3, r3, #1
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b2be:	2103      	movs	r1, #3
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f809 	bl	800b2d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	080174c4 	.word	0x080174c4
 800b2d0:	0801764c 	.word	0x0801764c
 800b2d4:	08017514 	.word	0x08017514

0800b2d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d106      	bne.n	800b2f8 <netif_issue_reports+0x20>
 800b2ea:	4b18      	ldr	r3, [pc, #96]	@ (800b34c <netif_issue_reports+0x74>)
 800b2ec:	f240 326d 	movw	r2, #877	@ 0x36d
 800b2f0:	4917      	ldr	r1, [pc, #92]	@ (800b350 <netif_issue_reports+0x78>)
 800b2f2:	4818      	ldr	r0, [pc, #96]	@ (800b354 <netif_issue_reports+0x7c>)
 800b2f4:	f009 fffc 	bl	80152f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b2fe:	f003 0304 	and.w	r3, r3, #4
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01e      	beq.n	800b344 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b30c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b310:	2b00      	cmp	r3, #0
 800b312:	d017      	beq.n	800b344 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b314:	78fb      	ldrb	r3, [r7, #3]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d013      	beq.n	800b346 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3304      	adds	r3, #4
 800b322:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00e      	beq.n	800b346 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b32e:	f003 0308 	and.w	r3, r3, #8
 800b332:	2b00      	cmp	r3, #0
 800b334:	d007      	beq.n	800b346 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3304      	adds	r3, #4
 800b33a:	4619      	mov	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f008 f9ad 	bl	801369c <etharp_request>
 800b342:	e000      	b.n	800b346 <netif_issue_reports+0x6e>
    return;
 800b344:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	080174c4 	.word	0x080174c4
 800b350:	08017668 	.word	0x08017668
 800b354:	08017514 	.word	0x08017514

0800b358 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d107      	bne.n	800b376 <netif_set_down+0x1e>
 800b366:	4b12      	ldr	r3, [pc, #72]	@ (800b3b0 <netif_set_down+0x58>)
 800b368:	f240 329b 	movw	r2, #923	@ 0x39b
 800b36c:	4911      	ldr	r1, [pc, #68]	@ (800b3b4 <netif_set_down+0x5c>)
 800b36e:	4812      	ldr	r0, [pc, #72]	@ (800b3b8 <netif_set_down+0x60>)
 800b370:	f009 ffbe 	bl	80152f0 <iprintf>
 800b374:	e019      	b.n	800b3aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d012      	beq.n	800b3aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b38a:	f023 0301 	bic.w	r3, r3, #1
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b39c:	f003 0308 	and.w	r3, r3, #8
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f007 fd37 	bl	8012e18 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	080174c4 	.word	0x080174c4
 800b3b4:	0801768c 	.word	0x0801768c
 800b3b8:	08017514 	.word	0x08017514

0800b3bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d107      	bne.n	800b3da <netif_set_link_up+0x1e>
 800b3ca:	4b13      	ldr	r3, [pc, #76]	@ (800b418 <netif_set_link_up+0x5c>)
 800b3cc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b3d0:	4912      	ldr	r1, [pc, #72]	@ (800b41c <netif_set_link_up+0x60>)
 800b3d2:	4813      	ldr	r0, [pc, #76]	@ (800b420 <netif_set_link_up+0x64>)
 800b3d4:	f009 ff8c 	bl	80152f0 <iprintf>
 800b3d8:	e01b      	b.n	800b412 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d114      	bne.n	800b412 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b3ee:	f043 0304 	orr.w	r3, r3, #4
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b3fa:	2103      	movs	r1, #3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff ff6b 	bl	800b2d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <netif_set_link_up+0x56>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	080174c4 	.word	0x080174c4
 800b41c:	080176ac 	.word	0x080176ac
 800b420:	08017514 	.word	0x08017514

0800b424 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d107      	bne.n	800b442 <netif_set_link_down+0x1e>
 800b432:	4b11      	ldr	r3, [pc, #68]	@ (800b478 <netif_set_link_down+0x54>)
 800b434:	f240 4206 	movw	r2, #1030	@ 0x406
 800b438:	4910      	ldr	r1, [pc, #64]	@ (800b47c <netif_set_link_down+0x58>)
 800b43a:	4811      	ldr	r0, [pc, #68]	@ (800b480 <netif_set_link_down+0x5c>)
 800b43c:	f009 ff58 	bl	80152f0 <iprintf>
 800b440:	e017      	b.n	800b472 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d010      	beq.n	800b472 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b456:	f023 0304 	bic.w	r3, r3, #4
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <netif_set_link_down+0x4e>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	080174c4 	.word	0x080174c4
 800b47c:	080176d0 	.word	0x080176d0
 800b480:	08017514 	.word	0x08017514

0800b484 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	61da      	str	r2, [r3, #28]
  }
}
 800b49a:	bf00      	nop
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b085      	sub	sp, #20
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b4b2:	f06f 030b 	mvn.w	r3, #11
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d013      	beq.n	800b4fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b4d4:	4b0d      	ldr	r3, [pc, #52]	@ (800b50c <netif_get_by_index+0x48>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	e00c      	b.n	800b4f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	79fa      	ldrb	r2, [r7, #7]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d101      	bne.n	800b4f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	e006      	b.n	800b4fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1ef      	bne.n	800b4dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	200171a8 	.word	0x200171a8

0800b510 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b516:	f009 fd45 	bl	8014fa4 <sys_arch_protect>
 800b51a:	6038      	str	r0, [r7, #0]
 800b51c:	4b0d      	ldr	r3, [pc, #52]	@ (800b554 <pbuf_free_ooseq+0x44>)
 800b51e:	2200      	movs	r2, #0
 800b520:	701a      	strb	r2, [r3, #0]
 800b522:	6838      	ldr	r0, [r7, #0]
 800b524:	f009 fd4c 	bl	8014fc0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b528:	4b0b      	ldr	r3, [pc, #44]	@ (800b558 <pbuf_free_ooseq+0x48>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	607b      	str	r3, [r7, #4]
 800b52e:	e00a      	b.n	800b546 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f002 fc19 	bl	800dd70 <tcp_free_ooseq>
      return;
 800b53e:	e005      	b.n	800b54c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	607b      	str	r3, [r7, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1f1      	bne.n	800b530 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	200171b1 	.word	0x200171b1
 800b558:	200171c0 	.word	0x200171c0

0800b55c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b564:	f7ff ffd4 	bl	800b510 <pbuf_free_ooseq>
}
 800b568:	bf00      	nop
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b576:	f009 fd15 	bl	8014fa4 <sys_arch_protect>
 800b57a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b57c:	4b0f      	ldr	r3, [pc, #60]	@ (800b5bc <pbuf_pool_is_empty+0x4c>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b582:	4b0e      	ldr	r3, [pc, #56]	@ (800b5bc <pbuf_pool_is_empty+0x4c>)
 800b584:	2201      	movs	r2, #1
 800b586:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f009 fd19 	bl	8014fc0 <sys_arch_unprotect>

  if (!queued) {
 800b58e:	78fb      	ldrb	r3, [r7, #3]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10f      	bne.n	800b5b4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b594:	2100      	movs	r1, #0
 800b596:	480a      	ldr	r0, [pc, #40]	@ (800b5c0 <pbuf_pool_is_empty+0x50>)
 800b598:	f7fd fa96 	bl	8008ac8 <tcpip_try_callback>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d008      	beq.n	800b5b4 <pbuf_pool_is_empty+0x44>
 800b5a2:	f009 fcff 	bl	8014fa4 <sys_arch_protect>
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	4b04      	ldr	r3, [pc, #16]	@ (800b5bc <pbuf_pool_is_empty+0x4c>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f009 fd06 	bl	8014fc0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	200171b1 	.word	0x200171b1
 800b5c0:	0800b55d 	.word	0x0800b55d

0800b5c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	80fb      	strh	r3, [r7, #6]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	88fa      	ldrh	r2, [r7, #6]
 800b5ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	88ba      	ldrh	r2, [r7, #4]
 800b5f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b5f2:	8b3b      	ldrh	r3, [r7, #24]
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	7f3a      	ldrb	r2, [r7, #28]
 800b5fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2201      	movs	r2, #1
 800b604:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	73da      	strb	r2, [r3, #15]
}
 800b60c:	bf00      	nop
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08c      	sub	sp, #48	@ 0x30
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	4603      	mov	r3, r0
 800b620:	71fb      	strb	r3, [r7, #7]
 800b622:	460b      	mov	r3, r1
 800b624:	80bb      	strh	r3, [r7, #4]
 800b626:	4613      	mov	r3, r2
 800b628:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b62a:	79fb      	ldrb	r3, [r7, #7]
 800b62c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b62e:	887b      	ldrh	r3, [r7, #2]
 800b630:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b634:	d07f      	beq.n	800b736 <pbuf_alloc+0x11e>
 800b636:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b63a:	f300 80c8 	bgt.w	800b7ce <pbuf_alloc+0x1b6>
 800b63e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b642:	d010      	beq.n	800b666 <pbuf_alloc+0x4e>
 800b644:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b648:	f300 80c1 	bgt.w	800b7ce <pbuf_alloc+0x1b6>
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d002      	beq.n	800b656 <pbuf_alloc+0x3e>
 800b650:	2b41      	cmp	r3, #65	@ 0x41
 800b652:	f040 80bc 	bne.w	800b7ce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b656:	887a      	ldrh	r2, [r7, #2]
 800b658:	88bb      	ldrh	r3, [r7, #4]
 800b65a:	4619      	mov	r1, r3
 800b65c:	2000      	movs	r0, #0
 800b65e:	f000 f8d1 	bl	800b804 <pbuf_alloc_reference>
 800b662:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b664:	e0bd      	b.n	800b7e2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b666:	2300      	movs	r3, #0
 800b668:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b66e:	88bb      	ldrh	r3, [r7, #4]
 800b670:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b672:	200c      	movs	r0, #12
 800b674:	f7ff fb9a 	bl	800adac <memp_malloc>
 800b678:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d109      	bne.n	800b694 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b680:	f7ff ff76 	bl	800b570 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b686:	2b00      	cmp	r3, #0
 800b688:	d002      	beq.n	800b690 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b68a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b68c:	f000 faa8 	bl	800bbe0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	e0a7      	b.n	800b7e4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b694:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b696:	3303      	adds	r3, #3
 800b698:	b29b      	uxth	r3, r3
 800b69a:	f023 0303 	bic.w	r3, r3, #3
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	8b7a      	ldrh	r2, [r7, #26]
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	bf28      	it	cs
 800b6ac:	4613      	movcs	r3, r2
 800b6ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b6b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6b2:	3310      	adds	r3, #16
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	3303      	adds	r3, #3
 800b6ba:	f023 0303 	bic.w	r3, r3, #3
 800b6be:	4618      	mov	r0, r3
 800b6c0:	89f9      	ldrh	r1, [r7, #14]
 800b6c2:	8b7a      	ldrh	r2, [r7, #26]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	9301      	str	r3, [sp, #4]
 800b6c8:	887b      	ldrh	r3, [r7, #2]
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4601      	mov	r1, r0
 800b6d0:	6938      	ldr	r0, [r7, #16]
 800b6d2:	f7ff ff77 	bl	800b5c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f003 0303 	and.w	r3, r3, #3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d006      	beq.n	800b6f0 <pbuf_alloc+0xd8>
 800b6e2:	4b42      	ldr	r3, [pc, #264]	@ (800b7ec <pbuf_alloc+0x1d4>)
 800b6e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b6e8:	4941      	ldr	r1, [pc, #260]	@ (800b7f0 <pbuf_alloc+0x1d8>)
 800b6ea:	4842      	ldr	r0, [pc, #264]	@ (800b7f4 <pbuf_alloc+0x1dc>)
 800b6ec:	f009 fe00 	bl	80152f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b6f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6f2:	3303      	adds	r3, #3
 800b6f4:	f023 0303 	bic.w	r3, r3, #3
 800b6f8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b6fc:	d106      	bne.n	800b70c <pbuf_alloc+0xf4>
 800b6fe:	4b3b      	ldr	r3, [pc, #236]	@ (800b7ec <pbuf_alloc+0x1d4>)
 800b700:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b704:	493c      	ldr	r1, [pc, #240]	@ (800b7f8 <pbuf_alloc+0x1e0>)
 800b706:	483b      	ldr	r0, [pc, #236]	@ (800b7f4 <pbuf_alloc+0x1dc>)
 800b708:	f009 fdf2 	bl	80152f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d102      	bne.n	800b718 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	627b      	str	r3, [r7, #36]	@ 0x24
 800b716:	e002      	b.n	800b71e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b722:	8b7a      	ldrh	r2, [r7, #26]
 800b724:	89fb      	ldrh	r3, [r7, #14]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b72e:	8b7b      	ldrh	r3, [r7, #26]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d19e      	bne.n	800b672 <pbuf_alloc+0x5a>
      break;
 800b734:	e055      	b.n	800b7e2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b736:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b738:	3303      	adds	r3, #3
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	f023 0303 	bic.w	r3, r3, #3
 800b740:	b29a      	uxth	r2, r3
 800b742:	88bb      	ldrh	r3, [r7, #4]
 800b744:	3303      	adds	r3, #3
 800b746:	b29b      	uxth	r3, r3
 800b748:	f023 0303 	bic.w	r3, r3, #3
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	4413      	add	r3, r2
 800b750:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b752:	8b3b      	ldrh	r3, [r7, #24]
 800b754:	3310      	adds	r3, #16
 800b756:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b758:	8b3a      	ldrh	r2, [r7, #24]
 800b75a:	88bb      	ldrh	r3, [r7, #4]
 800b75c:	3303      	adds	r3, #3
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	429a      	cmp	r2, r3
 800b764:	d306      	bcc.n	800b774 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b766:	8afa      	ldrh	r2, [r7, #22]
 800b768:	88bb      	ldrh	r3, [r7, #4]
 800b76a:	3303      	adds	r3, #3
 800b76c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b770:	429a      	cmp	r2, r3
 800b772:	d201      	bcs.n	800b778 <pbuf_alloc+0x160>
        return NULL;
 800b774:	2300      	movs	r3, #0
 800b776:	e035      	b.n	800b7e4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b778:	8afb      	ldrh	r3, [r7, #22]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7ff f96e 	bl	800aa5c <mem_malloc>
 800b780:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <pbuf_alloc+0x174>
        return NULL;
 800b788:	2300      	movs	r3, #0
 800b78a:	e02b      	b.n	800b7e4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b78c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b78e:	3310      	adds	r3, #16
 800b790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b792:	4413      	add	r3, r2
 800b794:	3303      	adds	r3, #3
 800b796:	f023 0303 	bic.w	r3, r3, #3
 800b79a:	4618      	mov	r0, r3
 800b79c:	88b9      	ldrh	r1, [r7, #4]
 800b79e:	88ba      	ldrh	r2, [r7, #4]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	887b      	ldrh	r3, [r7, #2]
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7ae:	f7ff ff09 	bl	800b5c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	f003 0303 	and.w	r3, r3, #3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d010      	beq.n	800b7e0 <pbuf_alloc+0x1c8>
 800b7be:	4b0b      	ldr	r3, [pc, #44]	@ (800b7ec <pbuf_alloc+0x1d4>)
 800b7c0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b7c4:	490d      	ldr	r1, [pc, #52]	@ (800b7fc <pbuf_alloc+0x1e4>)
 800b7c6:	480b      	ldr	r0, [pc, #44]	@ (800b7f4 <pbuf_alloc+0x1dc>)
 800b7c8:	f009 fd92 	bl	80152f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b7cc:	e008      	b.n	800b7e0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b7ce:	4b07      	ldr	r3, [pc, #28]	@ (800b7ec <pbuf_alloc+0x1d4>)
 800b7d0:	f240 1227 	movw	r2, #295	@ 0x127
 800b7d4:	490a      	ldr	r1, [pc, #40]	@ (800b800 <pbuf_alloc+0x1e8>)
 800b7d6:	4807      	ldr	r0, [pc, #28]	@ (800b7f4 <pbuf_alloc+0x1dc>)
 800b7d8:	f009 fd8a 	bl	80152f0 <iprintf>
      return NULL;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	e001      	b.n	800b7e4 <pbuf_alloc+0x1cc>
      break;
 800b7e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3728      	adds	r7, #40	@ 0x28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	080176f4 	.word	0x080176f4
 800b7f0:	08017724 	.word	0x08017724
 800b7f4:	08017754 	.word	0x08017754
 800b7f8:	0801777c 	.word	0x0801777c
 800b7fc:	080177b0 	.word	0x080177b0
 800b800:	080177dc 	.word	0x080177dc

0800b804 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af02      	add	r7, sp, #8
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	807b      	strh	r3, [r7, #2]
 800b810:	4613      	mov	r3, r2
 800b812:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b814:	883b      	ldrh	r3, [r7, #0]
 800b816:	2b41      	cmp	r3, #65	@ 0x41
 800b818:	d009      	beq.n	800b82e <pbuf_alloc_reference+0x2a>
 800b81a:	883b      	ldrh	r3, [r7, #0]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d006      	beq.n	800b82e <pbuf_alloc_reference+0x2a>
 800b820:	4b0f      	ldr	r3, [pc, #60]	@ (800b860 <pbuf_alloc_reference+0x5c>)
 800b822:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b826:	490f      	ldr	r1, [pc, #60]	@ (800b864 <pbuf_alloc_reference+0x60>)
 800b828:	480f      	ldr	r0, [pc, #60]	@ (800b868 <pbuf_alloc_reference+0x64>)
 800b82a:	f009 fd61 	bl	80152f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b82e:	200b      	movs	r0, #11
 800b830:	f7ff fabc 	bl	800adac <memp_malloc>
 800b834:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	e00b      	b.n	800b858 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b840:	8879      	ldrh	r1, [r7, #2]
 800b842:	887a      	ldrh	r2, [r7, #2]
 800b844:	2300      	movs	r3, #0
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	883b      	ldrh	r3, [r7, #0]
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	460b      	mov	r3, r1
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f7ff feb7 	bl	800b5c4 <pbuf_init_alloced_pbuf>
  return p;
 800b856:	68fb      	ldr	r3, [r7, #12]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	080176f4 	.word	0x080176f4
 800b864:	080177f8 	.word	0x080177f8
 800b868:	08017754 	.word	0x08017754

0800b86c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b088      	sub	sp, #32
 800b870:	af02      	add	r7, sp, #8
 800b872:	607b      	str	r3, [r7, #4]
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
 800b878:	460b      	mov	r3, r1
 800b87a:	81bb      	strh	r3, [r7, #12]
 800b87c:	4613      	mov	r3, r2
 800b87e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b880:	7bfb      	ldrb	r3, [r7, #15]
 800b882:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b884:	8a7b      	ldrh	r3, [r7, #18]
 800b886:	3303      	adds	r3, #3
 800b888:	f023 0203 	bic.w	r2, r3, #3
 800b88c:	89bb      	ldrh	r3, [r7, #12]
 800b88e:	441a      	add	r2, r3
 800b890:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b892:	429a      	cmp	r2, r3
 800b894:	d901      	bls.n	800b89a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b896:	2300      	movs	r3, #0
 800b898:	e018      	b.n	800b8cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b89a:	6a3b      	ldr	r3, [r7, #32]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d007      	beq.n	800b8b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b8a0:	8a7b      	ldrh	r3, [r7, #18]
 800b8a2:	3303      	adds	r3, #3
 800b8a4:	f023 0303 	bic.w	r3, r3, #3
 800b8a8:	6a3a      	ldr	r2, [r7, #32]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	e001      	b.n	800b8b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	89b9      	ldrh	r1, [r7, #12]
 800b8b8:	89ba      	ldrh	r2, [r7, #12]
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	897b      	ldrh	r3, [r7, #10]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	6979      	ldr	r1, [r7, #20]
 800b8c6:	f7ff fe7d 	bl	800b5c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b8ca:	687b      	ldr	r3, [r7, #4]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d106      	bne.n	800b8f4 <pbuf_realloc+0x20>
 800b8e6:	4b3a      	ldr	r3, [pc, #232]	@ (800b9d0 <pbuf_realloc+0xfc>)
 800b8e8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b8ec:	4939      	ldr	r1, [pc, #228]	@ (800b9d4 <pbuf_realloc+0x100>)
 800b8ee:	483a      	ldr	r0, [pc, #232]	@ (800b9d8 <pbuf_realloc+0x104>)
 800b8f0:	f009 fcfe 	bl	80152f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	891b      	ldrh	r3, [r3, #8]
 800b8f8:	887a      	ldrh	r2, [r7, #2]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d263      	bcs.n	800b9c6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	891a      	ldrh	r2, [r3, #8]
 800b902:	887b      	ldrh	r3, [r7, #2]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b908:	887b      	ldrh	r3, [r7, #2]
 800b90a:	817b      	strh	r3, [r7, #10]
  q = p;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b910:	e018      	b.n	800b944 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	895b      	ldrh	r3, [r3, #10]
 800b916:	897a      	ldrh	r2, [r7, #10]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	891a      	ldrh	r2, [r3, #8]
 800b920:	893b      	ldrh	r3, [r7, #8]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	b29a      	uxth	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <pbuf_realloc+0x70>
 800b936:	4b26      	ldr	r3, [pc, #152]	@ (800b9d0 <pbuf_realloc+0xfc>)
 800b938:	f240 12af 	movw	r2, #431	@ 0x1af
 800b93c:	4927      	ldr	r1, [pc, #156]	@ (800b9dc <pbuf_realloc+0x108>)
 800b93e:	4826      	ldr	r0, [pc, #152]	@ (800b9d8 <pbuf_realloc+0x104>)
 800b940:	f009 fcd6 	bl	80152f0 <iprintf>
  while (rem_len > q->len) {
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	895b      	ldrh	r3, [r3, #10]
 800b948:	897a      	ldrh	r2, [r7, #10]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d8e1      	bhi.n	800b912 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	7b1b      	ldrb	r3, [r3, #12]
 800b952:	f003 030f 	and.w	r3, r3, #15
 800b956:	2b00      	cmp	r3, #0
 800b958:	d121      	bne.n	800b99e <pbuf_realloc+0xca>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	895b      	ldrh	r3, [r3, #10]
 800b95e:	897a      	ldrh	r2, [r7, #10]
 800b960:	429a      	cmp	r2, r3
 800b962:	d01c      	beq.n	800b99e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	7b5b      	ldrb	r3, [r3, #13]
 800b968:	f003 0302 	and.w	r3, r3, #2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d116      	bne.n	800b99e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	685a      	ldr	r2, [r3, #4]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	b29a      	uxth	r2, r3
 800b97a:	897b      	ldrh	r3, [r7, #10]
 800b97c:	4413      	add	r3, r2
 800b97e:	b29b      	uxth	r3, r3
 800b980:	4619      	mov	r1, r3
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7fe ff5a 	bl	800a83c <mem_trim>
 800b988:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d106      	bne.n	800b99e <pbuf_realloc+0xca>
 800b990:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d0 <pbuf_realloc+0xfc>)
 800b992:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b996:	4912      	ldr	r1, [pc, #72]	@ (800b9e0 <pbuf_realloc+0x10c>)
 800b998:	480f      	ldr	r0, [pc, #60]	@ (800b9d8 <pbuf_realloc+0x104>)
 800b99a:	f009 fca9 	bl	80152f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	897a      	ldrh	r2, [r7, #10]
 800b9a2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	895a      	ldrh	r2, [r3, #10]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d004      	beq.n	800b9be <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 f911 	bl	800bbe0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	e000      	b.n	800b9c8 <pbuf_realloc+0xf4>
    return;
 800b9c6:	bf00      	nop

}
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	080176f4 	.word	0x080176f4
 800b9d4:	0801780c 	.word	0x0801780c
 800b9d8:	08017754 	.word	0x08017754
 800b9dc:	08017824 	.word	0x08017824
 800b9e0:	0801783c 	.word	0x0801783c

0800b9e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d106      	bne.n	800ba06 <pbuf_add_header_impl+0x22>
 800b9f8:	4b2b      	ldr	r3, [pc, #172]	@ (800baa8 <pbuf_add_header_impl+0xc4>)
 800b9fa:	f240 12df 	movw	r2, #479	@ 0x1df
 800b9fe:	492b      	ldr	r1, [pc, #172]	@ (800baac <pbuf_add_header_impl+0xc8>)
 800ba00:	482b      	ldr	r0, [pc, #172]	@ (800bab0 <pbuf_add_header_impl+0xcc>)
 800ba02:	f009 fc75 	bl	80152f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <pbuf_add_header_impl+0x30>
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba12:	d301      	bcc.n	800ba18 <pbuf_add_header_impl+0x34>
    return 1;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e043      	b.n	800baa0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <pbuf_add_header_impl+0x3e>
    return 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e03e      	b.n	800baa0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	891a      	ldrh	r2, [r3, #8]
 800ba2a:	8a7b      	ldrh	r3, [r7, #18]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	8a7a      	ldrh	r2, [r7, #18]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d901      	bls.n	800ba3a <pbuf_add_header_impl+0x56>
    return 1;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e032      	b.n	800baa0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	7b1b      	ldrb	r3, [r3, #12]
 800ba3e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ba40:	8a3b      	ldrh	r3, [r7, #16]
 800ba42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00c      	beq.n	800ba64 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	425b      	negs	r3, r3
 800ba52:	4413      	add	r3, r2
 800ba54:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3310      	adds	r3, #16
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d20d      	bcs.n	800ba7c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e01d      	b.n	800baa0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d006      	beq.n	800ba78 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	425b      	negs	r3, r3
 800ba72:	4413      	add	r3, r2
 800ba74:	617b      	str	r3, [r7, #20]
 800ba76:	e001      	b.n	800ba7c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e011      	b.n	800baa0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	895a      	ldrh	r2, [r3, #10]
 800ba86:	8a7b      	ldrh	r3, [r7, #18]
 800ba88:	4413      	add	r3, r2
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	891a      	ldrh	r2, [r3, #8]
 800ba94:	8a7b      	ldrh	r3, [r7, #18]
 800ba96:	4413      	add	r3, r2
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	811a      	strh	r2, [r3, #8]


  return 0;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	080176f4 	.word	0x080176f4
 800baac:	08017858 	.word	0x08017858
 800bab0:	08017754 	.word	0x08017754

0800bab4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800babe:	2200      	movs	r2, #0
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff ff8e 	bl	800b9e4 <pbuf_add_header_impl>
 800bac8:	4603      	mov	r3, r0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d106      	bne.n	800baf2 <pbuf_remove_header+0x1e>
 800bae4:	4b20      	ldr	r3, [pc, #128]	@ (800bb68 <pbuf_remove_header+0x94>)
 800bae6:	f240 224b 	movw	r2, #587	@ 0x24b
 800baea:	4920      	ldr	r1, [pc, #128]	@ (800bb6c <pbuf_remove_header+0x98>)
 800baec:	4820      	ldr	r0, [pc, #128]	@ (800bb70 <pbuf_remove_header+0x9c>)
 800baee:	f009 fbff 	bl	80152f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <pbuf_remove_header+0x2c>
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bafe:	d301      	bcc.n	800bb04 <pbuf_remove_header+0x30>
    return 1;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e02c      	b.n	800bb5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <pbuf_remove_header+0x3a>
    return 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	e027      	b.n	800bb5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	895b      	ldrh	r3, [r3, #10]
 800bb16:	89fa      	ldrh	r2, [r7, #14]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d908      	bls.n	800bb2e <pbuf_remove_header+0x5a>
 800bb1c:	4b12      	ldr	r3, [pc, #72]	@ (800bb68 <pbuf_remove_header+0x94>)
 800bb1e:	f240 2255 	movw	r2, #597	@ 0x255
 800bb22:	4914      	ldr	r1, [pc, #80]	@ (800bb74 <pbuf_remove_header+0xa0>)
 800bb24:	4812      	ldr	r0, [pc, #72]	@ (800bb70 <pbuf_remove_header+0x9c>)
 800bb26:	f009 fbe3 	bl	80152f0 <iprintf>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e017      	b.n	800bb5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	441a      	add	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	895a      	ldrh	r2, [r3, #10]
 800bb44:	89fb      	ldrh	r3, [r7, #14]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	891a      	ldrh	r2, [r3, #8]
 800bb52:	89fb      	ldrh	r3, [r7, #14]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	080176f4 	.word	0x080176f4
 800bb6c:	08017858 	.word	0x08017858
 800bb70:	08017754 	.word	0x08017754
 800bb74:	08017864 	.word	0x08017864

0800bb78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	807b      	strh	r3, [r7, #2]
 800bb84:	4613      	mov	r3, r2
 800bb86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bb88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	da08      	bge.n	800bba2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bb90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb94:	425b      	negs	r3, r3
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7ff ff9b 	bl	800bad4 <pbuf_remove_header>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	e007      	b.n	800bbb2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bba2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bba6:	787a      	ldrb	r2, [r7, #1]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff ff1a 	bl	800b9e4 <pbuf_add_header_impl>
 800bbb0:	4603      	mov	r3, r0
  }
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b082      	sub	sp, #8
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bbc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7ff ffd2 	bl	800bb78 <pbuf_header_impl>
 800bbd4:	4603      	mov	r3, r0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b088      	sub	sp, #32
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10b      	bne.n	800bc06 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d106      	bne.n	800bc02 <pbuf_free+0x22>
 800bbf4:	4b3b      	ldr	r3, [pc, #236]	@ (800bce4 <pbuf_free+0x104>)
 800bbf6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800bbfa:	493b      	ldr	r1, [pc, #236]	@ (800bce8 <pbuf_free+0x108>)
 800bbfc:	483b      	ldr	r0, [pc, #236]	@ (800bcec <pbuf_free+0x10c>)
 800bbfe:	f009 fb77 	bl	80152f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	e069      	b.n	800bcda <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bc0a:	e062      	b.n	800bcd2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bc0c:	f009 f9ca 	bl	8014fa4 <sys_arch_protect>
 800bc10:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	7b9b      	ldrb	r3, [r3, #14]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <pbuf_free+0x48>
 800bc1a:	4b32      	ldr	r3, [pc, #200]	@ (800bce4 <pbuf_free+0x104>)
 800bc1c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bc20:	4933      	ldr	r1, [pc, #204]	@ (800bcf0 <pbuf_free+0x110>)
 800bc22:	4832      	ldr	r0, [pc, #200]	@ (800bcec <pbuf_free+0x10c>)
 800bc24:	f009 fb64 	bl	80152f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	7b9b      	ldrb	r3, [r3, #14]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	739a      	strb	r2, [r3, #14]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	7b9b      	ldrb	r3, [r3, #14]
 800bc38:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bc3a:	69b8      	ldr	r0, [r7, #24]
 800bc3c:	f009 f9c0 	bl	8014fc0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d143      	bne.n	800bcce <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7b1b      	ldrb	r3, [r3, #12]
 800bc50:	f003 030f 	and.w	r3, r3, #15
 800bc54:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	7b5b      	ldrb	r3, [r3, #13]
 800bc5a:	f003 0302 	and.w	r3, r3, #2
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d011      	beq.n	800bc86 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <pbuf_free+0x9c>
 800bc6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bce4 <pbuf_free+0x104>)
 800bc70:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bc74:	491f      	ldr	r1, [pc, #124]	@ (800bcf4 <pbuf_free+0x114>)
 800bc76:	481d      	ldr	r0, [pc, #116]	@ (800bcec <pbuf_free+0x10c>)
 800bc78:	f009 fb3a 	bl	80152f0 <iprintf>
        pc->custom_free_function(p);
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	4798      	blx	r3
 800bc84:	e01d      	b.n	800bcc2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d104      	bne.n	800bc96 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bc8c:	6879      	ldr	r1, [r7, #4]
 800bc8e:	200c      	movs	r0, #12
 800bc90:	f7ff f902 	bl	800ae98 <memp_free>
 800bc94:	e015      	b.n	800bcc2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d104      	bne.n	800bca6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	200b      	movs	r0, #11
 800bca0:	f7ff f8fa 	bl	800ae98 <memp_free>
 800bca4:	e00d      	b.n	800bcc2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d103      	bne.n	800bcb4 <pbuf_free+0xd4>
          mem_free(p);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7fe fd35 	bl	800a71c <mem_free>
 800bcb2:	e006      	b.n	800bcc2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	@ (800bce4 <pbuf_free+0x104>)
 800bcb6:	f240 320f 	movw	r2, #783	@ 0x30f
 800bcba:	490f      	ldr	r1, [pc, #60]	@ (800bcf8 <pbuf_free+0x118>)
 800bcbc:	480b      	ldr	r0, [pc, #44]	@ (800bcec <pbuf_free+0x10c>)
 800bcbe:	f009 fb17 	bl	80152f0 <iprintf>
        }
      }
      count++;
 800bcc2:	7ffb      	ldrb	r3, [r7, #31]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	607b      	str	r3, [r7, #4]
 800bccc:	e001      	b.n	800bcd2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d199      	bne.n	800bc0c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bcd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3720      	adds	r7, #32
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	080176f4 	.word	0x080176f4
 800bce8:	08017858 	.word	0x08017858
 800bcec:	08017754 	.word	0x08017754
 800bcf0:	08017884 	.word	0x08017884
 800bcf4:	0801789c 	.word	0x0801789c
 800bcf8:	080178c0 	.word	0x080178c0

0800bcfc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bd08:	e005      	b.n	800bd16 <pbuf_clen+0x1a>
    ++len;
 800bd0a:	89fb      	ldrh	r3, [r7, #14]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1f6      	bne.n	800bd0a <pbuf_clen+0xe>
  }
  return len;
 800bd1c:	89fb      	ldrh	r3, [r7, #14]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
	...

0800bd2c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d016      	beq.n	800bd68 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bd3a:	f009 f933 	bl	8014fa4 <sys_arch_protect>
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	7b9b      	ldrb	r3, [r3, #14]
 800bd44:	3301      	adds	r3, #1
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	739a      	strb	r2, [r3, #14]
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f009 f937 	bl	8014fc0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	7b9b      	ldrb	r3, [r3, #14]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <pbuf_ref+0x3c>
 800bd5a:	4b05      	ldr	r3, [pc, #20]	@ (800bd70 <pbuf_ref+0x44>)
 800bd5c:	f240 3242 	movw	r2, #834	@ 0x342
 800bd60:	4904      	ldr	r1, [pc, #16]	@ (800bd74 <pbuf_ref+0x48>)
 800bd62:	4805      	ldr	r0, [pc, #20]	@ (800bd78 <pbuf_ref+0x4c>)
 800bd64:	f009 fac4 	bl	80152f0 <iprintf>
  }
}
 800bd68:	bf00      	nop
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	080176f4 	.word	0x080176f4
 800bd74:	080178d4 	.word	0x080178d4
 800bd78:	08017754 	.word	0x08017754

0800bd7c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <pbuf_cat+0x16>
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d107      	bne.n	800bda2 <pbuf_cat+0x26>
 800bd92:	4b20      	ldr	r3, [pc, #128]	@ (800be14 <pbuf_cat+0x98>)
 800bd94:	f240 3259 	movw	r2, #857	@ 0x359
 800bd98:	491f      	ldr	r1, [pc, #124]	@ (800be18 <pbuf_cat+0x9c>)
 800bd9a:	4820      	ldr	r0, [pc, #128]	@ (800be1c <pbuf_cat+0xa0>)
 800bd9c:	f009 faa8 	bl	80152f0 <iprintf>
 800bda0:	e034      	b.n	800be0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	60fb      	str	r3, [r7, #12]
 800bda6:	e00a      	b.n	800bdbe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	891a      	ldrh	r2, [r3, #8]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	891b      	ldrh	r3, [r3, #8]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	60fb      	str	r3, [r7, #12]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1f0      	bne.n	800bda8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	891a      	ldrh	r2, [r3, #8]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	895b      	ldrh	r3, [r3, #10]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d006      	beq.n	800bde0 <pbuf_cat+0x64>
 800bdd2:	4b10      	ldr	r3, [pc, #64]	@ (800be14 <pbuf_cat+0x98>)
 800bdd4:	f240 3262 	movw	r2, #866	@ 0x362
 800bdd8:	4911      	ldr	r1, [pc, #68]	@ (800be20 <pbuf_cat+0xa4>)
 800bdda:	4810      	ldr	r0, [pc, #64]	@ (800be1c <pbuf_cat+0xa0>)
 800bddc:	f009 fa88 	bl	80152f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d006      	beq.n	800bdf6 <pbuf_cat+0x7a>
 800bde8:	4b0a      	ldr	r3, [pc, #40]	@ (800be14 <pbuf_cat+0x98>)
 800bdea:	f240 3263 	movw	r2, #867	@ 0x363
 800bdee:	490d      	ldr	r1, [pc, #52]	@ (800be24 <pbuf_cat+0xa8>)
 800bdf0:	480a      	ldr	r0, [pc, #40]	@ (800be1c <pbuf_cat+0xa0>)
 800bdf2:	f009 fa7d 	bl	80152f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	891a      	ldrh	r2, [r3, #8]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	891b      	ldrh	r3, [r3, #8]
 800bdfe:	4413      	add	r3, r2
 800be00:	b29a      	uxth	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	080176f4 	.word	0x080176f4
 800be18:	080178e8 	.word	0x080178e8
 800be1c:	08017754 	.word	0x08017754
 800be20:	08017920 	.word	0x08017920
 800be24:	08017950 	.word	0x08017950

0800be28 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800be32:	2300      	movs	r3, #0
 800be34:	617b      	str	r3, [r7, #20]
 800be36:	2300      	movs	r3, #0
 800be38:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d008      	beq.n	800be52 <pbuf_copy+0x2a>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d005      	beq.n	800be52 <pbuf_copy+0x2a>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	891a      	ldrh	r2, [r3, #8]
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	891b      	ldrh	r3, [r3, #8]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d209      	bcs.n	800be66 <pbuf_copy+0x3e>
 800be52:	4b57      	ldr	r3, [pc, #348]	@ (800bfb0 <pbuf_copy+0x188>)
 800be54:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800be58:	4956      	ldr	r1, [pc, #344]	@ (800bfb4 <pbuf_copy+0x18c>)
 800be5a:	4857      	ldr	r0, [pc, #348]	@ (800bfb8 <pbuf_copy+0x190>)
 800be5c:	f009 fa48 	bl	80152f0 <iprintf>
 800be60:	f06f 030f 	mvn.w	r3, #15
 800be64:	e09f      	b.n	800bfa6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	895b      	ldrh	r3, [r3, #10]
 800be6a:	461a      	mov	r2, r3
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	1ad2      	subs	r2, r2, r3
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	895b      	ldrh	r3, [r3, #10]
 800be74:	4619      	mov	r1, r3
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	1acb      	subs	r3, r1, r3
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d306      	bcc.n	800be8c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	895b      	ldrh	r3, [r3, #10]
 800be82:	461a      	mov	r2, r3
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	60fb      	str	r3, [r7, #12]
 800be8a:	e005      	b.n	800be98 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	895b      	ldrh	r3, [r3, #10]
 800be90:	461a      	mov	r2, r3
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	18d0      	adds	r0, r2, r3
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	4413      	add	r3, r2
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	4619      	mov	r1, r3
 800beac:	f009 fcc9 	bl	8015842 <memcpy>
    offset_to += len;
 800beb0:	697a      	ldr	r2, [r7, #20]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4413      	add	r3, r2
 800beb6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	4413      	add	r3, r2
 800bebe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	895b      	ldrh	r3, [r3, #10]
 800bec4:	461a      	mov	r2, r3
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	4293      	cmp	r3, r2
 800beca:	d906      	bls.n	800beda <pbuf_copy+0xb2>
 800becc:	4b38      	ldr	r3, [pc, #224]	@ (800bfb0 <pbuf_copy+0x188>)
 800bece:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800bed2:	493a      	ldr	r1, [pc, #232]	@ (800bfbc <pbuf_copy+0x194>)
 800bed4:	4838      	ldr	r0, [pc, #224]	@ (800bfb8 <pbuf_copy+0x190>)
 800bed6:	f009 fa0b 	bl	80152f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	895b      	ldrh	r3, [r3, #10]
 800bede:	461a      	mov	r2, r3
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d906      	bls.n	800bef4 <pbuf_copy+0xcc>
 800bee6:	4b32      	ldr	r3, [pc, #200]	@ (800bfb0 <pbuf_copy+0x188>)
 800bee8:	f240 32da 	movw	r2, #986	@ 0x3da
 800beec:	4934      	ldr	r1, [pc, #208]	@ (800bfc0 <pbuf_copy+0x198>)
 800beee:	4832      	ldr	r0, [pc, #200]	@ (800bfb8 <pbuf_copy+0x190>)
 800bef0:	f009 f9fe 	bl	80152f0 <iprintf>
    if (offset_from >= p_from->len) {
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	895b      	ldrh	r3, [r3, #10]
 800bef8:	461a      	mov	r2, r3
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	4293      	cmp	r3, r2
 800befe:	d304      	bcc.n	800bf0a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	895b      	ldrh	r3, [r3, #10]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d114      	bne.n	800bf40 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10c      	bne.n	800bf40 <pbuf_copy+0x118>
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d009      	beq.n	800bf40 <pbuf_copy+0x118>
 800bf2c:	4b20      	ldr	r3, [pc, #128]	@ (800bfb0 <pbuf_copy+0x188>)
 800bf2e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bf32:	4924      	ldr	r1, [pc, #144]	@ (800bfc4 <pbuf_copy+0x19c>)
 800bf34:	4820      	ldr	r0, [pc, #128]	@ (800bfb8 <pbuf_copy+0x190>)
 800bf36:	f009 f9db 	bl	80152f0 <iprintf>
 800bf3a:	f06f 030f 	mvn.w	r3, #15
 800bf3e:	e032      	b.n	800bfa6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d013      	beq.n	800bf6e <pbuf_copy+0x146>
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	895a      	ldrh	r2, [r3, #10]
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	891b      	ldrh	r3, [r3, #8]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d10d      	bne.n	800bf6e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d009      	beq.n	800bf6e <pbuf_copy+0x146>
 800bf5a:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <pbuf_copy+0x188>)
 800bf5c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bf60:	4919      	ldr	r1, [pc, #100]	@ (800bfc8 <pbuf_copy+0x1a0>)
 800bf62:	4815      	ldr	r0, [pc, #84]	@ (800bfb8 <pbuf_copy+0x190>)
 800bf64:	f009 f9c4 	bl	80152f0 <iprintf>
 800bf68:	f06f 0305 	mvn.w	r3, #5
 800bf6c:	e01b      	b.n	800bfa6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d013      	beq.n	800bf9c <pbuf_copy+0x174>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	895a      	ldrh	r2, [r3, #10]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	891b      	ldrh	r3, [r3, #8]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d10d      	bne.n	800bf9c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d009      	beq.n	800bf9c <pbuf_copy+0x174>
 800bf88:	4b09      	ldr	r3, [pc, #36]	@ (800bfb0 <pbuf_copy+0x188>)
 800bf8a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bf8e:	490e      	ldr	r1, [pc, #56]	@ (800bfc8 <pbuf_copy+0x1a0>)
 800bf90:	4809      	ldr	r0, [pc, #36]	@ (800bfb8 <pbuf_copy+0x190>)
 800bf92:	f009 f9ad 	bl	80152f0 <iprintf>
 800bf96:	f06f 0305 	mvn.w	r3, #5
 800bf9a:	e004      	b.n	800bfa6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f47f af61 	bne.w	800be66 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	080176f4 	.word	0x080176f4
 800bfb4:	0801799c 	.word	0x0801799c
 800bfb8:	08017754 	.word	0x08017754
 800bfbc:	080179cc 	.word	0x080179cc
 800bfc0:	080179e4 	.word	0x080179e4
 800bfc4:	08017a00 	.word	0x08017a00
 800bfc8:	08017a10 	.word	0x08017a10

0800bfcc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	461a      	mov	r2, r3
 800bfda:	460b      	mov	r3, r1
 800bfdc:	80fb      	strh	r3, [r7, #6]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d108      	bne.n	800c002 <pbuf_copy_partial+0x36>
 800bff0:	4b2b      	ldr	r3, [pc, #172]	@ (800c0a0 <pbuf_copy_partial+0xd4>)
 800bff2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bff6:	492b      	ldr	r1, [pc, #172]	@ (800c0a4 <pbuf_copy_partial+0xd8>)
 800bff8:	482b      	ldr	r0, [pc, #172]	@ (800c0a8 <pbuf_copy_partial+0xdc>)
 800bffa:	f009 f979 	bl	80152f0 <iprintf>
 800bffe:	2300      	movs	r3, #0
 800c000:	e04a      	b.n	800c098 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d108      	bne.n	800c01a <pbuf_copy_partial+0x4e>
 800c008:	4b25      	ldr	r3, [pc, #148]	@ (800c0a0 <pbuf_copy_partial+0xd4>)
 800c00a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c00e:	4927      	ldr	r1, [pc, #156]	@ (800c0ac <pbuf_copy_partial+0xe0>)
 800c010:	4825      	ldr	r0, [pc, #148]	@ (800c0a8 <pbuf_copy_partial+0xdc>)
 800c012:	f009 f96d 	bl	80152f0 <iprintf>
 800c016:	2300      	movs	r3, #0
 800c018:	e03e      	b.n	800c098 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	61fb      	str	r3, [r7, #28]
 800c01e:	e034      	b.n	800c08a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c020:	88bb      	ldrh	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00a      	beq.n	800c03c <pbuf_copy_partial+0x70>
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	895b      	ldrh	r3, [r3, #10]
 800c02a:	88ba      	ldrh	r2, [r7, #4]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d305      	bcc.n	800c03c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	895b      	ldrh	r3, [r3, #10]
 800c034:	88ba      	ldrh	r2, [r7, #4]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	80bb      	strh	r3, [r7, #4]
 800c03a:	e023      	b.n	800c084 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	895a      	ldrh	r2, [r3, #10]
 800c040:	88bb      	ldrh	r3, [r7, #4]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c046:	8b3a      	ldrh	r2, [r7, #24]
 800c048:	88fb      	ldrh	r3, [r7, #6]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d901      	bls.n	800c052 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c04e:	88fb      	ldrh	r3, [r7, #6]
 800c050:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c052:	8b7b      	ldrh	r3, [r7, #26]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	18d0      	adds	r0, r2, r3
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	88bb      	ldrh	r3, [r7, #4]
 800c05e:	4413      	add	r3, r2
 800c060:	8b3a      	ldrh	r2, [r7, #24]
 800c062:	4619      	mov	r1, r3
 800c064:	f009 fbed 	bl	8015842 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c068:	8afa      	ldrh	r2, [r7, #22]
 800c06a:	8b3b      	ldrh	r3, [r7, #24]
 800c06c:	4413      	add	r3, r2
 800c06e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c070:	8b7a      	ldrh	r2, [r7, #26]
 800c072:	8b3b      	ldrh	r3, [r7, #24]
 800c074:	4413      	add	r3, r2
 800c076:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c078:	88fa      	ldrh	r2, [r7, #6]
 800c07a:	8b3b      	ldrh	r3, [r7, #24]
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	61fb      	str	r3, [r7, #28]
 800c08a:	88fb      	ldrh	r3, [r7, #6]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <pbuf_copy_partial+0xca>
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1c4      	bne.n	800c020 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c096:	8afb      	ldrh	r3, [r7, #22]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3720      	adds	r7, #32
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	080176f4 	.word	0x080176f4
 800c0a4:	08017a3c 	.word	0x08017a3c
 800c0a8:	08017754 	.word	0x08017754
 800c0ac:	08017a5c 	.word	0x08017a5c

0800c0b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	603a      	str	r2, [r7, #0]
 800c0ba:	71fb      	strb	r3, [r7, #7]
 800c0bc:	460b      	mov	r3, r1
 800c0be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	8919      	ldrh	r1, [r3, #8]
 800c0c4:	88ba      	ldrh	r2, [r7, #4]
 800c0c6:	79fb      	ldrb	r3, [r7, #7]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff faa5 	bl	800b618 <pbuf_alloc>
 800c0ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <pbuf_clone+0x2a>
    return NULL;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e011      	b.n	800c0fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f7ff fea3 	bl	800be28 <pbuf_copy>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c0e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d006      	beq.n	800c0fc <pbuf_clone+0x4c>
 800c0ee:	4b06      	ldr	r3, [pc, #24]	@ (800c108 <pbuf_clone+0x58>)
 800c0f0:	f240 5224 	movw	r2, #1316	@ 0x524
 800c0f4:	4905      	ldr	r1, [pc, #20]	@ (800c10c <pbuf_clone+0x5c>)
 800c0f6:	4806      	ldr	r0, [pc, #24]	@ (800c110 <pbuf_clone+0x60>)
 800c0f8:	f009 f8fa 	bl	80152f0 <iprintf>
  return q;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	080176f4 	.word	0x080176f4
 800c10c:	08017b68 	.word	0x08017b68
 800c110:	08017754 	.word	0x08017754

0800c114 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c118:	f008 ff66 	bl	8014fe8 <rand>
 800c11c:	4603      	mov	r3, r0
 800c11e:	b29b      	uxth	r3, r3
 800c120:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c124:	b29b      	uxth	r3, r3
 800c126:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	4b01      	ldr	r3, [pc, #4]	@ (800c134 <tcp_init+0x20>)
 800c12e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c130:	bf00      	nop
 800c132:	bd80      	pop	{r7, pc}
 800c134:	2000004c 	.word	0x2000004c

0800c138 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7d1b      	ldrb	r3, [r3, #20]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d105      	bne.n	800c154 <tcp_free+0x1c>
 800c148:	4b06      	ldr	r3, [pc, #24]	@ (800c164 <tcp_free+0x2c>)
 800c14a:	22d4      	movs	r2, #212	@ 0xd4
 800c14c:	4906      	ldr	r1, [pc, #24]	@ (800c168 <tcp_free+0x30>)
 800c14e:	4807      	ldr	r0, [pc, #28]	@ (800c16c <tcp_free+0x34>)
 800c150:	f009 f8ce 	bl	80152f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c154:	6879      	ldr	r1, [r7, #4]
 800c156:	2001      	movs	r0, #1
 800c158:	f7fe fe9e 	bl	800ae98 <memp_free>
}
 800c15c:	bf00      	nop
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	08017bf4 	.word	0x08017bf4
 800c168:	08017c24 	.word	0x08017c24
 800c16c:	08017c38 	.word	0x08017c38

0800c170 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	7d1b      	ldrb	r3, [r3, #20]
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d105      	bne.n	800c18c <tcp_free_listen+0x1c>
 800c180:	4b06      	ldr	r3, [pc, #24]	@ (800c19c <tcp_free_listen+0x2c>)
 800c182:	22df      	movs	r2, #223	@ 0xdf
 800c184:	4906      	ldr	r1, [pc, #24]	@ (800c1a0 <tcp_free_listen+0x30>)
 800c186:	4807      	ldr	r0, [pc, #28]	@ (800c1a4 <tcp_free_listen+0x34>)
 800c188:	f009 f8b2 	bl	80152f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	2002      	movs	r0, #2
 800c190:	f7fe fe82 	bl	800ae98 <memp_free>
}
 800c194:	bf00      	nop
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	08017bf4 	.word	0x08017bf4
 800c1a0:	08017c60 	.word	0x08017c60
 800c1a4:	08017c38 	.word	0x08017c38

0800c1a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c1ac:	f001 f85e 	bl	800d26c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c1b0:	4b07      	ldr	r3, [pc, #28]	@ (800c1d0 <tcp_tmr+0x28>)
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	4b05      	ldr	r3, [pc, #20]	@ (800c1d0 <tcp_tmr+0x28>)
 800c1ba:	701a      	strb	r2, [r3, #0]
 800c1bc:	4b04      	ldr	r3, [pc, #16]	@ (800c1d0 <tcp_tmr+0x28>)
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c1c8:	f000 fd0e 	bl	800cbe8 <tcp_slowtmr>
  }
}
 800c1cc:	bf00      	nop
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	200171c9 	.word	0x200171c9

0800c1d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d105      	bne.n	800c1f0 <tcp_remove_listener+0x1c>
 800c1e4:	4b0d      	ldr	r3, [pc, #52]	@ (800c21c <tcp_remove_listener+0x48>)
 800c1e6:	22ff      	movs	r2, #255	@ 0xff
 800c1e8:	490d      	ldr	r1, [pc, #52]	@ (800c220 <tcp_remove_listener+0x4c>)
 800c1ea:	480e      	ldr	r0, [pc, #56]	@ (800c224 <tcp_remove_listener+0x50>)
 800c1ec:	f009 f880 	bl	80152f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	e00a      	b.n	800c20c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d102      	bne.n	800c206 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1f1      	bne.n	800c1f6 <tcp_remove_listener+0x22>
    }
  }
}
 800c212:	bf00      	nop
 800c214:	bf00      	nop
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	08017bf4 	.word	0x08017bf4
 800c220:	08017c7c 	.word	0x08017c7c
 800c224:	08017c38 	.word	0x08017c38

0800c228 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d106      	bne.n	800c244 <tcp_listen_closed+0x1c>
 800c236:	4b14      	ldr	r3, [pc, #80]	@ (800c288 <tcp_listen_closed+0x60>)
 800c238:	f240 1211 	movw	r2, #273	@ 0x111
 800c23c:	4913      	ldr	r1, [pc, #76]	@ (800c28c <tcp_listen_closed+0x64>)
 800c23e:	4814      	ldr	r0, [pc, #80]	@ (800c290 <tcp_listen_closed+0x68>)
 800c240:	f009 f856 	bl	80152f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7d1b      	ldrb	r3, [r3, #20]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d006      	beq.n	800c25a <tcp_listen_closed+0x32>
 800c24c:	4b0e      	ldr	r3, [pc, #56]	@ (800c288 <tcp_listen_closed+0x60>)
 800c24e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c252:	4910      	ldr	r1, [pc, #64]	@ (800c294 <tcp_listen_closed+0x6c>)
 800c254:	480e      	ldr	r0, [pc, #56]	@ (800c290 <tcp_listen_closed+0x68>)
 800c256:	f009 f84b 	bl	80152f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c25a:	2301      	movs	r3, #1
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	e00b      	b.n	800c278 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c260:	4a0d      	ldr	r2, [pc, #52]	@ (800c298 <tcp_listen_closed+0x70>)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff ffb1 	bl	800c1d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3301      	adds	r3, #1
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d9f0      	bls.n	800c260 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c27e:	bf00      	nop
 800c280:	bf00      	nop
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	08017bf4 	.word	0x08017bf4
 800c28c:	08017ca4 	.word	0x08017ca4
 800c290:	08017c38 	.word	0x08017c38
 800c294:	08017cb0 	.word	0x08017cb0
 800c298:	0801a380 	.word	0x0801a380

0800c29c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c29c:	b5b0      	push	{r4, r5, r7, lr}
 800c29e:	b088      	sub	sp, #32
 800c2a0:	af04      	add	r7, sp, #16
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d106      	bne.n	800c2bc <tcp_close_shutdown+0x20>
 800c2ae:	4b63      	ldr	r3, [pc, #396]	@ (800c43c <tcp_close_shutdown+0x1a0>)
 800c2b0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c2b4:	4962      	ldr	r1, [pc, #392]	@ (800c440 <tcp_close_shutdown+0x1a4>)
 800c2b6:	4863      	ldr	r0, [pc, #396]	@ (800c444 <tcp_close_shutdown+0x1a8>)
 800c2b8:	f009 f81a 	bl	80152f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d066      	beq.n	800c390 <tcp_close_shutdown+0xf4>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	7d1b      	ldrb	r3, [r3, #20]
 800c2c6:	2b04      	cmp	r3, #4
 800c2c8:	d003      	beq.n	800c2d2 <tcp_close_shutdown+0x36>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	7d1b      	ldrb	r3, [r3, #20]
 800c2ce:	2b07      	cmp	r3, #7
 800c2d0:	d15e      	bne.n	800c390 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d104      	bne.n	800c2e4 <tcp_close_shutdown+0x48>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2de:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c2e2:	d055      	beq.n	800c390 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	8b5b      	ldrh	r3, [r3, #26]
 800c2e8:	f003 0310 	and.w	r3, r3, #16
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d106      	bne.n	800c2fe <tcp_close_shutdown+0x62>
 800c2f0:	4b52      	ldr	r3, [pc, #328]	@ (800c43c <tcp_close_shutdown+0x1a0>)
 800c2f2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c2f6:	4954      	ldr	r1, [pc, #336]	@ (800c448 <tcp_close_shutdown+0x1ac>)
 800c2f8:	4852      	ldr	r0, [pc, #328]	@ (800c444 <tcp_close_shutdown+0x1a8>)
 800c2fa:	f008 fff9 	bl	80152f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c306:	687d      	ldr	r5, [r7, #4]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	3304      	adds	r3, #4
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	8ad2      	ldrh	r2, [r2, #22]
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	8b09      	ldrh	r1, [r1, #24]
 800c314:	9102      	str	r1, [sp, #8]
 800c316:	9201      	str	r2, [sp, #4]
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	462b      	mov	r3, r5
 800c31c:	4622      	mov	r2, r4
 800c31e:	4601      	mov	r1, r0
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f005 fd8b 	bl	8011e3c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f001 fb6e 	bl	800da08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c32c:	4b47      	ldr	r3, [pc, #284]	@ (800c44c <tcp_close_shutdown+0x1b0>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	429a      	cmp	r2, r3
 800c334:	d105      	bne.n	800c342 <tcp_close_shutdown+0xa6>
 800c336:	4b45      	ldr	r3, [pc, #276]	@ (800c44c <tcp_close_shutdown+0x1b0>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	4a43      	ldr	r2, [pc, #268]	@ (800c44c <tcp_close_shutdown+0x1b0>)
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	e013      	b.n	800c36a <tcp_close_shutdown+0xce>
 800c342:	4b42      	ldr	r3, [pc, #264]	@ (800c44c <tcp_close_shutdown+0x1b0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	e00c      	b.n	800c364 <tcp_close_shutdown+0xc8>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	429a      	cmp	r2, r3
 800c352:	d104      	bne.n	800c35e <tcp_close_shutdown+0xc2>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	68da      	ldr	r2, [r3, #12]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	60da      	str	r2, [r3, #12]
 800c35c:	e005      	b.n	800c36a <tcp_close_shutdown+0xce>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1ef      	bne.n	800c34a <tcp_close_shutdown+0xae>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	60da      	str	r2, [r3, #12]
 800c370:	4b37      	ldr	r3, [pc, #220]	@ (800c450 <tcp_close_shutdown+0x1b4>)
 800c372:	2201      	movs	r2, #1
 800c374:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c376:	4b37      	ldr	r3, [pc, #220]	@ (800c454 <tcp_close_shutdown+0x1b8>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d102      	bne.n	800c386 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c380:	f004 f802 	bl	8010388 <tcp_trigger_input_pcb_close>
 800c384:	e002      	b.n	800c38c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7ff fed6 	bl	800c138 <tcp_free>
      }
      return ERR_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e050      	b.n	800c432 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	7d1b      	ldrb	r3, [r3, #20]
 800c394:	2b02      	cmp	r3, #2
 800c396:	d03b      	beq.n	800c410 <tcp_close_shutdown+0x174>
 800c398:	2b02      	cmp	r3, #2
 800c39a:	dc44      	bgt.n	800c426 <tcp_close_shutdown+0x18a>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <tcp_close_shutdown+0x10a>
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d02a      	beq.n	800c3fa <tcp_close_shutdown+0x15e>
 800c3a4:	e03f      	b.n	800c426 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	8adb      	ldrh	r3, [r3, #22]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d021      	beq.n	800c3f2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c3ae:	4b2a      	ldr	r3, [pc, #168]	@ (800c458 <tcp_close_shutdown+0x1bc>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d105      	bne.n	800c3c4 <tcp_close_shutdown+0x128>
 800c3b8:	4b27      	ldr	r3, [pc, #156]	@ (800c458 <tcp_close_shutdown+0x1bc>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	4a26      	ldr	r2, [pc, #152]	@ (800c458 <tcp_close_shutdown+0x1bc>)
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	e013      	b.n	800c3ec <tcp_close_shutdown+0x150>
 800c3c4:	4b24      	ldr	r3, [pc, #144]	@ (800c458 <tcp_close_shutdown+0x1bc>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60bb      	str	r3, [r7, #8]
 800c3ca:	e00c      	b.n	800c3e6 <tcp_close_shutdown+0x14a>
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d104      	bne.n	800c3e0 <tcp_close_shutdown+0x144>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68da      	ldr	r2, [r3, #12]
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	60da      	str	r2, [r3, #12]
 800c3de:	e005      	b.n	800c3ec <tcp_close_shutdown+0x150>
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	60bb      	str	r3, [r7, #8]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1ef      	bne.n	800c3cc <tcp_close_shutdown+0x130>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff fea0 	bl	800c138 <tcp_free>
      break;
 800c3f8:	e01a      	b.n	800c430 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff ff14 	bl	800c228 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	4816      	ldr	r0, [pc, #88]	@ (800c45c <tcp_close_shutdown+0x1c0>)
 800c404:	f001 fb50 	bl	800daa8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7ff feb1 	bl	800c170 <tcp_free_listen>
      break;
 800c40e:	e00f      	b.n	800c430 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c410:	6879      	ldr	r1, [r7, #4]
 800c412:	480e      	ldr	r0, [pc, #56]	@ (800c44c <tcp_close_shutdown+0x1b0>)
 800c414:	f001 fb48 	bl	800daa8 <tcp_pcb_remove>
 800c418:	4b0d      	ldr	r3, [pc, #52]	@ (800c450 <tcp_close_shutdown+0x1b4>)
 800c41a:	2201      	movs	r2, #1
 800c41c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7ff fe8a 	bl	800c138 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c424:	e004      	b.n	800c430 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f81a 	bl	800c460 <tcp_close_shutdown_fin>
 800c42c:	4603      	mov	r3, r0
 800c42e:	e000      	b.n	800c432 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bdb0      	pop	{r4, r5, r7, pc}
 800c43a:	bf00      	nop
 800c43c:	08017bf4 	.word	0x08017bf4
 800c440:	08017cc8 	.word	0x08017cc8
 800c444:	08017c38 	.word	0x08017c38
 800c448:	08017ce8 	.word	0x08017ce8
 800c44c:	200171c0 	.word	0x200171c0
 800c450:	200171c8 	.word	0x200171c8
 800c454:	20017200 	.word	0x20017200
 800c458:	200171b8 	.word	0x200171b8
 800c45c:	200171bc 	.word	0x200171bc

0800c460 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <tcp_close_shutdown_fin+0x1c>
 800c46e:	4b2e      	ldr	r3, [pc, #184]	@ (800c528 <tcp_close_shutdown_fin+0xc8>)
 800c470:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c474:	492d      	ldr	r1, [pc, #180]	@ (800c52c <tcp_close_shutdown_fin+0xcc>)
 800c476:	482e      	ldr	r0, [pc, #184]	@ (800c530 <tcp_close_shutdown_fin+0xd0>)
 800c478:	f008 ff3a 	bl	80152f0 <iprintf>

  switch (pcb->state) {
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	7d1b      	ldrb	r3, [r3, #20]
 800c480:	2b07      	cmp	r3, #7
 800c482:	d020      	beq.n	800c4c6 <tcp_close_shutdown_fin+0x66>
 800c484:	2b07      	cmp	r3, #7
 800c486:	dc2b      	bgt.n	800c4e0 <tcp_close_shutdown_fin+0x80>
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d002      	beq.n	800c492 <tcp_close_shutdown_fin+0x32>
 800c48c:	2b04      	cmp	r3, #4
 800c48e:	d00d      	beq.n	800c4ac <tcp_close_shutdown_fin+0x4c>
 800c490:	e026      	b.n	800c4e0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f004 fde0 	bl	8011058 <tcp_send_fin>
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c49c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d11f      	bne.n	800c4e4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2205      	movs	r2, #5
 800c4a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c4aa:	e01b      	b.n	800c4e4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f004 fdd3 	bl	8011058 <tcp_send_fin>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d114      	bne.n	800c4e8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2205      	movs	r2, #5
 800c4c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c4c4:	e010      	b.n	800c4e8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f004 fdc6 	bl	8011058 <tcp_send_fin>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c4d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2209      	movs	r2, #9
 800c4dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c4de:	e005      	b.n	800c4ec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e01c      	b.n	800c51e <tcp_close_shutdown_fin+0xbe>
      break;
 800c4e4:	bf00      	nop
 800c4e6:	e002      	b.n	800c4ee <tcp_close_shutdown_fin+0x8e>
      break;
 800c4e8:	bf00      	nop
 800c4ea:	e000      	b.n	800c4ee <tcp_close_shutdown_fin+0x8e>
      break;
 800c4ec:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d103      	bne.n	800c4fe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f004 feec 	bl	80112d4 <tcp_output>
 800c4fc:	e00d      	b.n	800c51a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c506:	d108      	bne.n	800c51a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	8b5b      	ldrh	r3, [r3, #26]
 800c50c:	f043 0308 	orr.w	r3, r3, #8
 800c510:	b29a      	uxth	r2, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	e001      	b.n	800c51e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c51a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	08017bf4 	.word	0x08017bf4
 800c52c:	08017ca4 	.word	0x08017ca4
 800c530:	08017c38 	.word	0x08017c38

0800c534 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d109      	bne.n	800c556 <tcp_close+0x22>
 800c542:	4b0f      	ldr	r3, [pc, #60]	@ (800c580 <tcp_close+0x4c>)
 800c544:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c548:	490e      	ldr	r1, [pc, #56]	@ (800c584 <tcp_close+0x50>)
 800c54a:	480f      	ldr	r0, [pc, #60]	@ (800c588 <tcp_close+0x54>)
 800c54c:	f008 fed0 	bl	80152f0 <iprintf>
 800c550:	f06f 030f 	mvn.w	r3, #15
 800c554:	e00f      	b.n	800c576 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	7d1b      	ldrb	r3, [r3, #20]
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d006      	beq.n	800c56c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	8b5b      	ldrh	r3, [r3, #26]
 800c562:	f043 0310 	orr.w	r3, r3, #16
 800c566:	b29a      	uxth	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c56c:	2101      	movs	r1, #1
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7ff fe94 	bl	800c29c <tcp_close_shutdown>
 800c574:	4603      	mov	r3, r0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	08017bf4 	.word	0x08017bf4
 800c584:	08017d04 	.word	0x08017d04
 800c588:	08017c38 	.word	0x08017c38

0800c58c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b08e      	sub	sp, #56	@ 0x38
 800c590:	af04      	add	r7, sp, #16
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d107      	bne.n	800c5ac <tcp_abandon+0x20>
 800c59c:	4b52      	ldr	r3, [pc, #328]	@ (800c6e8 <tcp_abandon+0x15c>)
 800c59e:	f240 223d 	movw	r2, #573	@ 0x23d
 800c5a2:	4952      	ldr	r1, [pc, #328]	@ (800c6ec <tcp_abandon+0x160>)
 800c5a4:	4852      	ldr	r0, [pc, #328]	@ (800c6f0 <tcp_abandon+0x164>)
 800c5a6:	f008 fea3 	bl	80152f0 <iprintf>
 800c5aa:	e099      	b.n	800c6e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	7d1b      	ldrb	r3, [r3, #20]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d106      	bne.n	800c5c2 <tcp_abandon+0x36>
 800c5b4:	4b4c      	ldr	r3, [pc, #304]	@ (800c6e8 <tcp_abandon+0x15c>)
 800c5b6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c5ba:	494e      	ldr	r1, [pc, #312]	@ (800c6f4 <tcp_abandon+0x168>)
 800c5bc:	484c      	ldr	r0, [pc, #304]	@ (800c6f0 <tcp_abandon+0x164>)
 800c5be:	f008 fe97 	bl	80152f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	7d1b      	ldrb	r3, [r3, #20]
 800c5c6:	2b0a      	cmp	r3, #10
 800c5c8:	d107      	bne.n	800c5da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c5ca:	6879      	ldr	r1, [r7, #4]
 800c5cc:	484a      	ldr	r0, [pc, #296]	@ (800c6f8 <tcp_abandon+0x16c>)
 800c5ce:	f001 fa6b 	bl	800daa8 <tcp_pcb_remove>
    tcp_free(pcb);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff fdb0 	bl	800c138 <tcp_free>
 800c5d8:	e082      	b.n	800c6e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7d1b      	ldrb	r3, [r3, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d126      	bne.n	800c652 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	8adb      	ldrh	r3, [r3, #22]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d02e      	beq.n	800c66a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c60c:	4b3b      	ldr	r3, [pc, #236]	@ (800c6fc <tcp_abandon+0x170>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	429a      	cmp	r2, r3
 800c614:	d105      	bne.n	800c622 <tcp_abandon+0x96>
 800c616:	4b39      	ldr	r3, [pc, #228]	@ (800c6fc <tcp_abandon+0x170>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	4a37      	ldr	r2, [pc, #220]	@ (800c6fc <tcp_abandon+0x170>)
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	e013      	b.n	800c64a <tcp_abandon+0xbe>
 800c622:	4b36      	ldr	r3, [pc, #216]	@ (800c6fc <tcp_abandon+0x170>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	61fb      	str	r3, [r7, #28]
 800c628:	e00c      	b.n	800c644 <tcp_abandon+0xb8>
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	429a      	cmp	r2, r3
 800c632:	d104      	bne.n	800c63e <tcp_abandon+0xb2>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	68da      	ldr	r2, [r3, #12]
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	60da      	str	r2, [r3, #12]
 800c63c:	e005      	b.n	800c64a <tcp_abandon+0xbe>
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1ef      	bne.n	800c62a <tcp_abandon+0x9e>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	60da      	str	r2, [r3, #12]
 800c650:	e00b      	b.n	800c66a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	8adb      	ldrh	r3, [r3, #22]
 800c65a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c65c:	6879      	ldr	r1, [r7, #4]
 800c65e:	4828      	ldr	r0, [pc, #160]	@ (800c700 <tcp_abandon+0x174>)
 800c660:	f001 fa22 	bl	800daa8 <tcp_pcb_remove>
 800c664:	4b27      	ldr	r3, [pc, #156]	@ (800c704 <tcp_abandon+0x178>)
 800c666:	2201      	movs	r2, #1
 800c668:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d004      	beq.n	800c67c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c676:	4618      	mov	r0, r3
 800c678:	f000 fed8 	bl	800d42c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c680:	2b00      	cmp	r3, #0
 800c682:	d004      	beq.n	800c68e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fecf 	bl	800d42c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c692:	2b00      	cmp	r3, #0
 800c694:	d004      	beq.n	800c6a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 fec6 	bl	800d42c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00e      	beq.n	800c6c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	8b12      	ldrh	r2, [r2, #24]
 800c6b0:	9202      	str	r2, [sp, #8]
 800c6b2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c6b4:	9201      	str	r2, [sp, #4]
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	69b9      	ldr	r1, [r7, #24]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f005 fbbc 	bl	8011e3c <tcp_rst>
    }
    last_state = pcb->state;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7d1b      	ldrb	r3, [r3, #20]
 800c6c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fd34 	bl	800c138 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <tcp_abandon+0x154>
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f06f 010c 	mvn.w	r1, #12
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	4798      	blx	r3
  }
}
 800c6e0:	3728      	adds	r7, #40	@ 0x28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	08017bf4 	.word	0x08017bf4
 800c6ec:	08017d38 	.word	0x08017d38
 800c6f0:	08017c38 	.word	0x08017c38
 800c6f4:	08017d54 	.word	0x08017d54
 800c6f8:	200171c4 	.word	0x200171c4
 800c6fc:	200171b8 	.word	0x200171b8
 800c700:	200171c0 	.word	0x200171c0
 800c704:	200171c8 	.word	0x200171c8

0800c708 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c710:	2101      	movs	r1, #1
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7ff ff3a 	bl	800c58c <tcp_abandon>
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b088      	sub	sp, #32
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	4613      	mov	r3, r2
 800c72c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c72e:	2304      	movs	r3, #4
 800c730:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c738:	4b3e      	ldr	r3, [pc, #248]	@ (800c834 <tcp_bind+0x114>)
 800c73a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d109      	bne.n	800c756 <tcp_bind+0x36>
 800c742:	4b3d      	ldr	r3, [pc, #244]	@ (800c838 <tcp_bind+0x118>)
 800c744:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800c748:	493c      	ldr	r1, [pc, #240]	@ (800c83c <tcp_bind+0x11c>)
 800c74a:	483d      	ldr	r0, [pc, #244]	@ (800c840 <tcp_bind+0x120>)
 800c74c:	f008 fdd0 	bl	80152f0 <iprintf>
 800c750:	f06f 030f 	mvn.w	r3, #15
 800c754:	e06a      	b.n	800c82c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	7d1b      	ldrb	r3, [r3, #20]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d009      	beq.n	800c772 <tcp_bind+0x52>
 800c75e:	4b36      	ldr	r3, [pc, #216]	@ (800c838 <tcp_bind+0x118>)
 800c760:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c764:	4937      	ldr	r1, [pc, #220]	@ (800c844 <tcp_bind+0x124>)
 800c766:	4836      	ldr	r0, [pc, #216]	@ (800c840 <tcp_bind+0x120>)
 800c768:	f008 fdc2 	bl	80152f0 <iprintf>
 800c76c:	f06f 0305 	mvn.w	r3, #5
 800c770:	e05c      	b.n	800c82c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c772:	88fb      	ldrh	r3, [r7, #6]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d109      	bne.n	800c78c <tcp_bind+0x6c>
    port = tcp_new_port();
 800c778:	f000 f9f0 	bl	800cb5c <tcp_new_port>
 800c77c:	4603      	mov	r3, r0
 800c77e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c780:	88fb      	ldrh	r3, [r7, #6]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d135      	bne.n	800c7f2 <tcp_bind+0xd2>
      return ERR_BUF;
 800c786:	f06f 0301 	mvn.w	r3, #1
 800c78a:	e04f      	b.n	800c82c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c78c:	2300      	movs	r3, #0
 800c78e:	61fb      	str	r3, [r7, #28]
 800c790:	e02b      	b.n	800c7ea <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c792:	4a2d      	ldr	r2, [pc, #180]	@ (800c848 <tcp_bind+0x128>)
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	61bb      	str	r3, [r7, #24]
 800c79e:	e01e      	b.n	800c7de <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	8adb      	ldrh	r3, [r3, #22]
 800c7a4:	88fa      	ldrh	r2, [r7, #6]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d116      	bne.n	800c7d8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c7aa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d010      	beq.n	800c7d2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00c      	beq.n	800c7d2 <tcp_bind+0xb2>
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d009      	beq.n	800c7d2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d005      	beq.n	800c7d2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d102      	bne.n	800c7d8 <tcp_bind+0xb8>
              return ERR_USE;
 800c7d2:	f06f 0307 	mvn.w	r3, #7
 800c7d6:	e029      	b.n	800c82c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	61bb      	str	r3, [r7, #24]
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1dd      	bne.n	800c7a0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	61fb      	str	r3, [r7, #28]
 800c7ea:	69fa      	ldr	r2, [r7, #28]
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	dbcf      	blt.n	800c792 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00c      	beq.n	800c812 <tcp_bind+0xf2>
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d008      	beq.n	800c812 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d002      	beq.n	800c80c <tcp_bind+0xec>
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	e000      	b.n	800c80e <tcp_bind+0xee>
 800c80c:	2300      	movs	r3, #0
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	88fa      	ldrh	r2, [r7, #6]
 800c816:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c818:	4b0c      	ldr	r3, [pc, #48]	@ (800c84c <tcp_bind+0x12c>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	60da      	str	r2, [r3, #12]
 800c820:	4a0a      	ldr	r2, [pc, #40]	@ (800c84c <tcp_bind+0x12c>)
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	f005 fccb 	bl	80121c0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3720      	adds	r7, #32
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	0801a3a8 	.word	0x0801a3a8
 800c838:	08017bf4 	.word	0x08017bf4
 800c83c:	08017d88 	.word	0x08017d88
 800c840:	08017c38 	.word	0x08017c38
 800c844:	08017da0 	.word	0x08017da0
 800c848:	0801a380 	.word	0x0801a380
 800c84c:	200171b8 	.word	0x200171b8

0800c850 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	4613      	mov	r3, r2
 800c85c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d106      	bne.n	800c872 <tcp_accept_null+0x22>
 800c864:	4b07      	ldr	r3, [pc, #28]	@ (800c884 <tcp_accept_null+0x34>)
 800c866:	f240 320f 	movw	r2, #783	@ 0x30f
 800c86a:	4907      	ldr	r1, [pc, #28]	@ (800c888 <tcp_accept_null+0x38>)
 800c86c:	4807      	ldr	r0, [pc, #28]	@ (800c88c <tcp_accept_null+0x3c>)
 800c86e:	f008 fd3f 	bl	80152f0 <iprintf>

  tcp_abort(pcb);
 800c872:	68b8      	ldr	r0, [r7, #8]
 800c874:	f7ff ff48 	bl	800c708 <tcp_abort>

  return ERR_ABRT;
 800c878:	f06f 030c 	mvn.w	r3, #12
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	08017bf4 	.word	0x08017bf4
 800c888:	08017dc8 	.word	0x08017dc8
 800c88c:	08017c38 	.word	0x08017c38

0800c890 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c89c:	78fb      	ldrb	r3, [r7, #3]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f806 	bl	800c8b4 <tcp_listen_with_backlog_and_err>
 800c8a8:	4603      	mov	r3, r0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
	...

0800c8b4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	607a      	str	r2, [r7, #4]
 800c8c0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d109      	bne.n	800c8e0 <tcp_listen_with_backlog_and_err+0x2c>
 800c8cc:	4b47      	ldr	r3, [pc, #284]	@ (800c9ec <tcp_listen_with_backlog_and_err+0x138>)
 800c8ce:	f240 3259 	movw	r2, #857	@ 0x359
 800c8d2:	4947      	ldr	r1, [pc, #284]	@ (800c9f0 <tcp_listen_with_backlog_and_err+0x13c>)
 800c8d4:	4847      	ldr	r0, [pc, #284]	@ (800c9f4 <tcp_listen_with_backlog_and_err+0x140>)
 800c8d6:	f008 fd0b 	bl	80152f0 <iprintf>
 800c8da:	23f0      	movs	r3, #240	@ 0xf0
 800c8dc:	76fb      	strb	r3, [r7, #27]
 800c8de:	e079      	b.n	800c9d4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	7d1b      	ldrb	r3, [r3, #20]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d009      	beq.n	800c8fc <tcp_listen_with_backlog_and_err+0x48>
 800c8e8:	4b40      	ldr	r3, [pc, #256]	@ (800c9ec <tcp_listen_with_backlog_and_err+0x138>)
 800c8ea:	f240 325a 	movw	r2, #858	@ 0x35a
 800c8ee:	4942      	ldr	r1, [pc, #264]	@ (800c9f8 <tcp_listen_with_backlog_and_err+0x144>)
 800c8f0:	4840      	ldr	r0, [pc, #256]	@ (800c9f4 <tcp_listen_with_backlog_and_err+0x140>)
 800c8f2:	f008 fcfd 	bl	80152f0 <iprintf>
 800c8f6:	23f1      	movs	r3, #241	@ 0xf1
 800c8f8:	76fb      	strb	r3, [r7, #27]
 800c8fa:	e06b      	b.n	800c9d4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	7d1b      	ldrb	r3, [r3, #20]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d104      	bne.n	800c90e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c908:	23f7      	movs	r3, #247	@ 0xf7
 800c90a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c90c:	e062      	b.n	800c9d4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c90e:	2002      	movs	r0, #2
 800c910:	f7fe fa4c 	bl	800adac <memp_malloc>
 800c914:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d102      	bne.n	800c922 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c91c:	23ff      	movs	r3, #255	@ 0xff
 800c91e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c920:	e058      	b.n	800c9d4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	691a      	ldr	r2, [r3, #16]
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	8ada      	ldrh	r2, [r3, #22]
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	2201      	movs	r2, #1
 800c936:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	7d5a      	ldrb	r2, [r3, #21]
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	7a5a      	ldrb	r2, [r3, #9]
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	2200      	movs	r2, #0
 800c94c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	7ada      	ldrb	r2, [r3, #11]
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	7a9a      	ldrb	r2, [r3, #10]
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	8adb      	ldrh	r3, [r3, #22]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d021      	beq.n	800c9b2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c96e:	4b23      	ldr	r3, [pc, #140]	@ (800c9fc <tcp_listen_with_backlog_and_err+0x148>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	429a      	cmp	r2, r3
 800c976:	d105      	bne.n	800c984 <tcp_listen_with_backlog_and_err+0xd0>
 800c978:	4b20      	ldr	r3, [pc, #128]	@ (800c9fc <tcp_listen_with_backlog_and_err+0x148>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	4a1f      	ldr	r2, [pc, #124]	@ (800c9fc <tcp_listen_with_backlog_and_err+0x148>)
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	e013      	b.n	800c9ac <tcp_listen_with_backlog_and_err+0xf8>
 800c984:	4b1d      	ldr	r3, [pc, #116]	@ (800c9fc <tcp_listen_with_backlog_and_err+0x148>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	617b      	str	r3, [r7, #20]
 800c98a:	e00c      	b.n	800c9a6 <tcp_listen_with_backlog_and_err+0xf2>
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	429a      	cmp	r2, r3
 800c994:	d104      	bne.n	800c9a0 <tcp_listen_with_backlog_and_err+0xec>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	60da      	str	r2, [r3, #12]
 800c99e:	e005      	b.n	800c9ac <tcp_listen_with_backlog_and_err+0xf8>
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	617b      	str	r3, [r7, #20]
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1ef      	bne.n	800c98c <tcp_listen_with_backlog_and_err+0xd8>
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f7ff fbc0 	bl	800c138 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	4a11      	ldr	r2, [pc, #68]	@ (800ca00 <tcp_listen_with_backlog_and_err+0x14c>)
 800c9bc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c9be:	4b11      	ldr	r3, [pc, #68]	@ (800ca04 <tcp_listen_with_backlog_and_err+0x150>)
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	60da      	str	r2, [r3, #12]
 800c9c6:	4a0f      	ldr	r2, [pc, #60]	@ (800ca04 <tcp_listen_with_backlog_and_err+0x150>)
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	f005 fbf8 	bl	80121c0 <tcp_timer_needed>
  res = ERR_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	7efa      	ldrb	r2, [r7, #27]
 800c9de:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c9e0:	69fb      	ldr	r3, [r7, #28]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3720      	adds	r7, #32
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	08017bf4 	.word	0x08017bf4
 800c9f0:	08017de8 	.word	0x08017de8
 800c9f4:	08017c38 	.word	0x08017c38
 800c9f8:	08017e18 	.word	0x08017e18
 800c9fc:	200171b8 	.word	0x200171b8
 800ca00:	0800c851 	.word	0x0800c851
 800ca04:	200171bc 	.word	0x200171bc

0800ca08 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <tcp_update_rcv_ann_wnd+0x1c>
 800ca16:	4b25      	ldr	r3, [pc, #148]	@ (800caac <tcp_update_rcv_ann_wnd+0xa4>)
 800ca18:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ca1c:	4924      	ldr	r1, [pc, #144]	@ (800cab0 <tcp_update_rcv_ann_wnd+0xa8>)
 800ca1e:	4825      	ldr	r0, [pc, #148]	@ (800cab4 <tcp_update_rcv_ann_wnd+0xac>)
 800ca20:	f008 fc66 	bl	80152f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ca2c:	4413      	add	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ca38:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ca3c:	bf28      	it	cs
 800ca3e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ca42:	b292      	uxth	r2, r2
 800ca44:	4413      	add	r3, r2
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	db08      	blt.n	800ca60 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	e020      	b.n	800caa2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	dd03      	ble.n	800ca76 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ca74:	e014      	b.n	800caa0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca88:	d306      	bcc.n	800ca98 <tcp_update_rcv_ann_wnd+0x90>
 800ca8a:	4b08      	ldr	r3, [pc, #32]	@ (800caac <tcp_update_rcv_ann_wnd+0xa4>)
 800ca8c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ca90:	4909      	ldr	r1, [pc, #36]	@ (800cab8 <tcp_update_rcv_ann_wnd+0xb0>)
 800ca92:	4808      	ldr	r0, [pc, #32]	@ (800cab4 <tcp_update_rcv_ann_wnd+0xac>)
 800ca94:	f008 fc2c 	bl	80152f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800caa0:	2300      	movs	r3, #0
  }
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	08017bf4 	.word	0x08017bf4
 800cab0:	08017e50 	.word	0x08017e50
 800cab4:	08017c38 	.word	0x08017c38
 800cab8:	08017e74 	.word	0x08017e74

0800cabc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d107      	bne.n	800cade <tcp_recved+0x22>
 800cace:	4b1f      	ldr	r3, [pc, #124]	@ (800cb4c <tcp_recved+0x90>)
 800cad0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800cad4:	491e      	ldr	r1, [pc, #120]	@ (800cb50 <tcp_recved+0x94>)
 800cad6:	481f      	ldr	r0, [pc, #124]	@ (800cb54 <tcp_recved+0x98>)
 800cad8:	f008 fc0a 	bl	80152f0 <iprintf>
 800cadc:	e032      	b.n	800cb44 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	7d1b      	ldrb	r3, [r3, #20]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d106      	bne.n	800caf4 <tcp_recved+0x38>
 800cae6:	4b19      	ldr	r3, [pc, #100]	@ (800cb4c <tcp_recved+0x90>)
 800cae8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800caec:	491a      	ldr	r1, [pc, #104]	@ (800cb58 <tcp_recved+0x9c>)
 800caee:	4819      	ldr	r0, [pc, #100]	@ (800cb54 <tcp_recved+0x98>)
 800caf0:	f008 fbfe 	bl	80152f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800caf8:	887b      	ldrh	r3, [r7, #2]
 800cafa:	4413      	add	r3, r2
 800cafc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cafe:	89fb      	ldrh	r3, [r7, #14]
 800cb00:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cb04:	d804      	bhi.n	800cb10 <tcp_recved+0x54>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb0a:	89fa      	ldrh	r2, [r7, #14]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d204      	bcs.n	800cb1a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800cb16:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cb18:	e002      	b.n	800cb20 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	89fa      	ldrh	r2, [r7, #14]
 800cb1e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff ff71 	bl	800ca08 <tcp_update_rcv_ann_wnd>
 800cb26:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cb2e:	d309      	bcc.n	800cb44 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	8b5b      	ldrh	r3, [r3, #26]
 800cb34:	f043 0302 	orr.w	r3, r3, #2
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f004 fbc8 	bl	80112d4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	08017bf4 	.word	0x08017bf4
 800cb50:	08017e90 	.word	0x08017e90
 800cb54:	08017c38 	.word	0x08017c38
 800cb58:	08017ea8 	.word	0x08017ea8

0800cb5c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cb66:	4b1e      	ldr	r3, [pc, #120]	@ (800cbe0 <tcp_new_port+0x84>)
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	4b1c      	ldr	r3, [pc, #112]	@ (800cbe0 <tcp_new_port+0x84>)
 800cb70:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cb72:	4b1b      	ldr	r3, [pc, #108]	@ (800cbe0 <tcp_new_port+0x84>)
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d103      	bne.n	800cb86 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cb7e:	4b18      	ldr	r3, [pc, #96]	@ (800cbe0 <tcp_new_port+0x84>)
 800cb80:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800cb84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb86:	2300      	movs	r3, #0
 800cb88:	71fb      	strb	r3, [r7, #7]
 800cb8a:	e01e      	b.n	800cbca <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb8c:	79fb      	ldrb	r3, [r7, #7]
 800cb8e:	4a15      	ldr	r2, [pc, #84]	@ (800cbe4 <tcp_new_port+0x88>)
 800cb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	603b      	str	r3, [r7, #0]
 800cb98:	e011      	b.n	800cbbe <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	8ada      	ldrh	r2, [r3, #22]
 800cb9e:	4b10      	ldr	r3, [pc, #64]	@ (800cbe0 <tcp_new_port+0x84>)
 800cba0:	881b      	ldrh	r3, [r3, #0]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d108      	bne.n	800cbb8 <tcp_new_port+0x5c>
        n++;
 800cba6:	88bb      	ldrh	r3, [r7, #4]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cbac:	88bb      	ldrh	r3, [r7, #4]
 800cbae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cbb2:	d3d8      	bcc.n	800cb66 <tcp_new_port+0xa>
          return 0;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	e00d      	b.n	800cbd4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	603b      	str	r3, [r7, #0]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1ea      	bne.n	800cb9a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cbc4:	79fb      	ldrb	r3, [r7, #7]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	71fb      	strb	r3, [r7, #7]
 800cbca:	79fb      	ldrb	r3, [r7, #7]
 800cbcc:	2b03      	cmp	r3, #3
 800cbce:	d9dd      	bls.n	800cb8c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cbd0:	4b03      	ldr	r3, [pc, #12]	@ (800cbe0 <tcp_new_port+0x84>)
 800cbd2:	881b      	ldrh	r3, [r3, #0]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr
 800cbe0:	2000004c 	.word	0x2000004c
 800cbe4:	0801a380 	.word	0x0801a380

0800cbe8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cbe8:	b5b0      	push	{r4, r5, r7, lr}
 800cbea:	b090      	sub	sp, #64	@ 0x40
 800cbec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800cbf4:	4b95      	ldr	r3, [pc, #596]	@ (800ce4c <tcp_slowtmr+0x264>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	4a94      	ldr	r2, [pc, #592]	@ (800ce4c <tcp_slowtmr+0x264>)
 800cbfc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cbfe:	4b94      	ldr	r3, [pc, #592]	@ (800ce50 <tcp_slowtmr+0x268>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	4b92      	ldr	r3, [pc, #584]	@ (800ce50 <tcp_slowtmr+0x268>)
 800cc08:	701a      	strb	r2, [r3, #0]
 800cc0a:	e000      	b.n	800cc0e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800cc0c:	bf00      	nop
  prev = NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800cc12:	4b90      	ldr	r3, [pc, #576]	@ (800ce54 <tcp_slowtmr+0x26c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cc18:	e29f      	b.n	800d15a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc1c:	7d1b      	ldrb	r3, [r3, #20]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <tcp_slowtmr+0x48>
 800cc22:	4b8d      	ldr	r3, [pc, #564]	@ (800ce58 <tcp_slowtmr+0x270>)
 800cc24:	f240 42be 	movw	r2, #1214	@ 0x4be
 800cc28:	498c      	ldr	r1, [pc, #560]	@ (800ce5c <tcp_slowtmr+0x274>)
 800cc2a:	488d      	ldr	r0, [pc, #564]	@ (800ce60 <tcp_slowtmr+0x278>)
 800cc2c:	f008 fb60 	bl	80152f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc32:	7d1b      	ldrb	r3, [r3, #20]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d106      	bne.n	800cc46 <tcp_slowtmr+0x5e>
 800cc38:	4b87      	ldr	r3, [pc, #540]	@ (800ce58 <tcp_slowtmr+0x270>)
 800cc3a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800cc3e:	4989      	ldr	r1, [pc, #548]	@ (800ce64 <tcp_slowtmr+0x27c>)
 800cc40:	4887      	ldr	r0, [pc, #540]	@ (800ce60 <tcp_slowtmr+0x278>)
 800cc42:	f008 fb55 	bl	80152f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc48:	7d1b      	ldrb	r3, [r3, #20]
 800cc4a:	2b0a      	cmp	r3, #10
 800cc4c:	d106      	bne.n	800cc5c <tcp_slowtmr+0x74>
 800cc4e:	4b82      	ldr	r3, [pc, #520]	@ (800ce58 <tcp_slowtmr+0x270>)
 800cc50:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800cc54:	4984      	ldr	r1, [pc, #528]	@ (800ce68 <tcp_slowtmr+0x280>)
 800cc56:	4882      	ldr	r0, [pc, #520]	@ (800ce60 <tcp_slowtmr+0x278>)
 800cc58:	f008 fb4a 	bl	80152f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5e:	7f9a      	ldrb	r2, [r3, #30]
 800cc60:	4b7b      	ldr	r3, [pc, #492]	@ (800ce50 <tcp_slowtmr+0x268>)
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d105      	bne.n	800cc74 <tcp_slowtmr+0x8c>
      prev = pcb;
 800cc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800cc72:	e272      	b.n	800d15a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800cc74:	4b76      	ldr	r3, [pc, #472]	@ (800ce50 <tcp_slowtmr+0x268>)
 800cc76:	781a      	ldrb	r2, [r3, #0]
 800cc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8a:	7d1b      	ldrb	r3, [r3, #20]
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d10a      	bne.n	800cca6 <tcp_slowtmr+0xbe>
 800cc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc96:	2b05      	cmp	r3, #5
 800cc98:	d905      	bls.n	800cca6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800cc9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc9e:	3301      	adds	r3, #1
 800cca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cca4:	e11e      	b.n	800cee4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccac:	2b0b      	cmp	r3, #11
 800ccae:	d905      	bls.n	800ccbc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ccb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ccba:	e113      	b.n	800cee4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ccbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccbe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d075      	beq.n	800cdb2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ccc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d006      	beq.n	800ccdc <tcp_slowtmr+0xf4>
 800ccce:	4b62      	ldr	r3, [pc, #392]	@ (800ce58 <tcp_slowtmr+0x270>)
 800ccd0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ccd4:	4965      	ldr	r1, [pc, #404]	@ (800ce6c <tcp_slowtmr+0x284>)
 800ccd6:	4862      	ldr	r0, [pc, #392]	@ (800ce60 <tcp_slowtmr+0x278>)
 800ccd8:	f008 fb0a 	bl	80152f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ccdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <tcp_slowtmr+0x10a>
 800cce4:	4b5c      	ldr	r3, [pc, #368]	@ (800ce58 <tcp_slowtmr+0x270>)
 800cce6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ccea:	4961      	ldr	r1, [pc, #388]	@ (800ce70 <tcp_slowtmr+0x288>)
 800ccec:	485c      	ldr	r0, [pc, #368]	@ (800ce60 <tcp_slowtmr+0x278>)
 800ccee:	f008 faff 	bl	80152f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ccf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ccf8:	2b0b      	cmp	r3, #11
 800ccfa:	d905      	bls.n	800cd08 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ccfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd00:	3301      	adds	r3, #1
 800cd02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cd06:	e0ed      	b.n	800cee4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	4a58      	ldr	r2, [pc, #352]	@ (800ce74 <tcp_slowtmr+0x28c>)
 800cd12:	5cd3      	ldrb	r3, [r2, r3]
 800cd14:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cd1c:	7c7a      	ldrb	r2, [r7, #17]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d907      	bls.n	800cd32 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800cd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cd28:	3301      	adds	r3, #1
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800cd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd34:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cd38:	7c7a      	ldrb	r2, [r7, #17]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	f200 80d2 	bhi.w	800cee4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800cd40:	2301      	movs	r3, #1
 800cd42:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800cd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d108      	bne.n	800cd60 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cd4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd50:	f005 f968 	bl	8012024 <tcp_zero_window_probe>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d014      	beq.n	800cd84 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	623b      	str	r3, [r7, #32]
 800cd5e:	e011      	b.n	800cd84 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd66:	4619      	mov	r1, r3
 800cd68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd6a:	f004 f82d 	bl	8010dc8 <tcp_split_unsent_seg>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d107      	bne.n	800cd84 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800cd74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd76:	f004 faad 	bl	80112d4 <tcp_output>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f000 80ac 	beq.w	800cee4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800cd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd96:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cd9a:	2b06      	cmp	r3, #6
 800cd9c:	f200 80a2 	bhi.w	800cee4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800cda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cda6:	3301      	adds	r3, #1
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800cdb0:	e098      	b.n	800cee4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cdb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	db0f      	blt.n	800cddc <tcp_slowtmr+0x1f4>
 800cdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cdc2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d008      	beq.n	800cddc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800cdca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	b21a      	sxth	r2, r3
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800cddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdde:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800cde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cde8:	429a      	cmp	r2, r3
 800cdea:	db7b      	blt.n	800cee4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cdec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdee:	f004 fd65 	bl	80118bc <tcp_rexmit_rto_prepare>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d007      	beq.n	800ce08 <tcp_slowtmr+0x220>
 800cdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d171      	bne.n	800cee4 <tcp_slowtmr+0x2fc>
 800ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d06d      	beq.n	800cee4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ce08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0a:	7d1b      	ldrb	r3, [r3, #20]
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d03a      	beq.n	800ce86 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ce10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ce16:	2b0c      	cmp	r3, #12
 800ce18:	bf28      	it	cs
 800ce1a:	230c      	movcs	r3, #12
 800ce1c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ce1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ce24:	10db      	asrs	r3, r3, #3
 800ce26:	b21b      	sxth	r3, r3
 800ce28:	461a      	mov	r2, r3
 800ce2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ce30:	4413      	add	r3, r2
 800ce32:	7efa      	ldrb	r2, [r7, #27]
 800ce34:	4910      	ldr	r1, [pc, #64]	@ (800ce78 <tcp_slowtmr+0x290>)
 800ce36:	5c8a      	ldrb	r2, [r1, r2]
 800ce38:	4093      	lsls	r3, r2
 800ce3a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ce42:	4293      	cmp	r3, r2
 800ce44:	dc1a      	bgt.n	800ce7c <tcp_slowtmr+0x294>
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	b21a      	sxth	r2, r3
 800ce4a:	e019      	b.n	800ce80 <tcp_slowtmr+0x298>
 800ce4c:	200171b4 	.word	0x200171b4
 800ce50:	200171ca 	.word	0x200171ca
 800ce54:	200171c0 	.word	0x200171c0
 800ce58:	08017bf4 	.word	0x08017bf4
 800ce5c:	08017f38 	.word	0x08017f38
 800ce60:	08017c38 	.word	0x08017c38
 800ce64:	08017f64 	.word	0x08017f64
 800ce68:	08017f90 	.word	0x08017f90
 800ce6c:	08017fc0 	.word	0x08017fc0
 800ce70:	08017ff4 	.word	0x08017ff4
 800ce74:	0801a378 	.word	0x0801a378
 800ce78:	0801a368 	.word	0x0801a368
 800ce7c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ce80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ce86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce88:	2200      	movs	r2, #0
 800ce8a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ce8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ce92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	bf28      	it	cs
 800ce9c:	4613      	movcs	r3, r2
 800ce9e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cea0:	8a7b      	ldrh	r3, [r7, #18]
 800cea2:	085b      	lsrs	r3, r3, #1
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ceac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d206      	bcs.n	800cecc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800cecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cece:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ced0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ced6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced8:	2200      	movs	r2, #0
 800ceda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800cede:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cee0:	f004 fd5c 	bl	801199c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800cee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee6:	7d1b      	ldrb	r3, [r3, #20]
 800cee8:	2b06      	cmp	r3, #6
 800ceea:	d111      	bne.n	800cf10 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ceec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceee:	8b5b      	ldrh	r3, [r3, #26]
 800cef0:	f003 0310 	and.w	r3, r3, #16
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00b      	beq.n	800cf10 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cef8:	4b9d      	ldr	r3, [pc, #628]	@ (800d170 <tcp_slowtmr+0x588>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	2b28      	cmp	r3, #40	@ 0x28
 800cf04:	d904      	bls.n	800cf10 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800cf06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf12:	7a5b      	ldrb	r3, [r3, #9]
 800cf14:	f003 0308 	and.w	r3, r3, #8
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d04c      	beq.n	800cfb6 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800cf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf1e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cf20:	2b04      	cmp	r3, #4
 800cf22:	d003      	beq.n	800cf2c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800cf24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf26:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cf28:	2b07      	cmp	r3, #7
 800cf2a:	d144      	bne.n	800cfb6 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf2c:	4b90      	ldr	r3, [pc, #576]	@ (800d170 <tcp_slowtmr+0x588>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf32:	6a1b      	ldr	r3, [r3, #32]
 800cf34:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cf36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf3c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800cf40:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800cf44:	498b      	ldr	r1, [pc, #556]	@ (800d174 <tcp_slowtmr+0x58c>)
 800cf46:	fba1 1303 	umull	r1, r3, r1, r3
 800cf4a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d90a      	bls.n	800cf66 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800cf50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf54:	3301      	adds	r3, #1
 800cf56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800cf5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cf5e:	3301      	adds	r3, #1
 800cf60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cf64:	e027      	b.n	800cfb6 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf66:	4b82      	ldr	r3, [pc, #520]	@ (800d170 <tcp_slowtmr+0x588>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf72:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf78:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	4b7e      	ldr	r3, [pc, #504]	@ (800d178 <tcp_slowtmr+0x590>)
 800cf80:	fb00 f303 	mul.w	r3, r0, r3
 800cf84:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cf86:	497b      	ldr	r1, [pc, #492]	@ (800d174 <tcp_slowtmr+0x58c>)
 800cf88:	fba1 1303 	umull	r1, r3, r1, r3
 800cf8c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d911      	bls.n	800cfb6 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800cf92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf94:	f005 f806 	bl	8011fa4 <tcp_keepalive>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cf9e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d107      	bne.n	800cfb6 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800cfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cfac:	3301      	adds	r3, #1
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d011      	beq.n	800cfe2 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cfbe:	4b6c      	ldr	r3, [pc, #432]	@ (800d170 <tcp_slowtmr+0x588>)
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	1ad2      	subs	r2, r2, r3
 800cfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cfce:	4619      	mov	r1, r3
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	440b      	add	r3, r1
 800cfd6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d302      	bcc.n	800cfe2 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800cfdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfde:	f000 fec7 	bl	800dd70 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe4:	7d1b      	ldrb	r3, [r3, #20]
 800cfe6:	2b03      	cmp	r3, #3
 800cfe8:	d10b      	bne.n	800d002 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cfea:	4b61      	ldr	r3, [pc, #388]	@ (800d170 <tcp_slowtmr+0x588>)
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	2b28      	cmp	r3, #40	@ 0x28
 800cff6:	d904      	bls.n	800d002 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800cff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cffc:	3301      	adds	r3, #1
 800cffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d004:	7d1b      	ldrb	r3, [r3, #20]
 800d006:	2b09      	cmp	r3, #9
 800d008:	d10b      	bne.n	800d022 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d00a:	4b59      	ldr	r3, [pc, #356]	@ (800d170 <tcp_slowtmr+0x588>)
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d010:	6a1b      	ldr	r3, [r3, #32]
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	2bf0      	cmp	r3, #240	@ 0xf0
 800d016:	d904      	bls.n	800d022 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800d018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d01c:	3301      	adds	r3, #1
 800d01e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d026:	2b00      	cmp	r3, #0
 800d028:	d060      	beq.n	800d0ec <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800d02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d030:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d032:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d034:	f000 fce8 	bl	800da08 <tcp_pcb_purge>
      if (prev != NULL) {
 800d038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d010      	beq.n	800d060 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d03e:	4b4f      	ldr	r3, [pc, #316]	@ (800d17c <tcp_slowtmr+0x594>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d044:	429a      	cmp	r2, r3
 800d046:	d106      	bne.n	800d056 <tcp_slowtmr+0x46e>
 800d048:	4b4d      	ldr	r3, [pc, #308]	@ (800d180 <tcp_slowtmr+0x598>)
 800d04a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d04e:	494d      	ldr	r1, [pc, #308]	@ (800d184 <tcp_slowtmr+0x59c>)
 800d050:	484d      	ldr	r0, [pc, #308]	@ (800d188 <tcp_slowtmr+0x5a0>)
 800d052:	f008 f94d 	bl	80152f0 <iprintf>
        prev->next = pcb->next;
 800d056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d058:	68da      	ldr	r2, [r3, #12]
 800d05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d05c:	60da      	str	r2, [r3, #12]
 800d05e:	e00f      	b.n	800d080 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d060:	4b46      	ldr	r3, [pc, #280]	@ (800d17c <tcp_slowtmr+0x594>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d066:	429a      	cmp	r2, r3
 800d068:	d006      	beq.n	800d078 <tcp_slowtmr+0x490>
 800d06a:	4b45      	ldr	r3, [pc, #276]	@ (800d180 <tcp_slowtmr+0x598>)
 800d06c:	f240 5271 	movw	r2, #1393	@ 0x571
 800d070:	4946      	ldr	r1, [pc, #280]	@ (800d18c <tcp_slowtmr+0x5a4>)
 800d072:	4845      	ldr	r0, [pc, #276]	@ (800d188 <tcp_slowtmr+0x5a0>)
 800d074:	f008 f93c 	bl	80152f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	4a3f      	ldr	r2, [pc, #252]	@ (800d17c <tcp_slowtmr+0x594>)
 800d07e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d080:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d084:	2b00      	cmp	r3, #0
 800d086:	d013      	beq.n	800d0b0 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d08a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d08e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d090:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d094:	3304      	adds	r3, #4
 800d096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d098:	8ad2      	ldrh	r2, [r2, #22]
 800d09a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d09c:	8b09      	ldrh	r1, [r1, #24]
 800d09e:	9102      	str	r1, [sp, #8]
 800d0a0:	9201      	str	r2, [sp, #4]
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	462b      	mov	r3, r5
 800d0a6:	4622      	mov	r2, r4
 800d0a8:	4601      	mov	r1, r0
 800d0aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0ac:	f004 fec6 	bl	8011e3c <tcp_rst>
      err_arg = pcb->callback_arg;
 800d0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b8:	7d1b      	ldrb	r3, [r3, #20]
 800d0ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d0c6:	6838      	ldr	r0, [r7, #0]
 800d0c8:	f7ff f836 	bl	800c138 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d0cc:	4b30      	ldr	r3, [pc, #192]	@ (800d190 <tcp_slowtmr+0x5a8>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d004      	beq.n	800d0e2 <tcp_slowtmr+0x4fa>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f06f 010c 	mvn.w	r1, #12
 800d0de:	68b8      	ldr	r0, [r7, #8]
 800d0e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d0e2:	4b2b      	ldr	r3, [pc, #172]	@ (800d190 <tcp_slowtmr+0x5a8>)
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d037      	beq.n	800d15a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800d0ea:	e590      	b.n	800cc0e <tcp_slowtmr+0x26>
      prev = pcb;
 800d0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f8:	7f1b      	ldrb	r3, [r3, #28]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	b2da      	uxtb	r2, r3
 800d0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d100:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d104:	7f1a      	ldrb	r2, [r3, #28]
 800d106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d108:	7f5b      	ldrb	r3, [r3, #29]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d325      	bcc.n	800d15a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800d10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d110:	2200      	movs	r2, #0
 800d112:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d114:	4b1e      	ldr	r3, [pc, #120]	@ (800d190 <tcp_slowtmr+0x5a8>)
 800d116:	2200      	movs	r2, #0
 800d118:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <tcp_slowtmr+0x554>
 800d124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d12a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d12c:	6912      	ldr	r2, [r2, #16]
 800d12e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d130:	4610      	mov	r0, r2
 800d132:	4798      	blx	r3
 800d134:	4603      	mov	r3, r0
 800d136:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d13a:	e002      	b.n	800d142 <tcp_slowtmr+0x55a>
 800d13c:	2300      	movs	r3, #0
 800d13e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d142:	4b13      	ldr	r3, [pc, #76]	@ (800d190 <tcp_slowtmr+0x5a8>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	f47f ad60 	bne.w	800cc0c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d14c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d150:	2b00      	cmp	r3, #0
 800d152:	d102      	bne.n	800d15a <tcp_slowtmr+0x572>
          tcp_output(prev);
 800d154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d156:	f004 f8bd 	bl	80112d4 <tcp_output>
  while (pcb != NULL) {
 800d15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f47f ad5c 	bne.w	800cc1a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d166:	4b0b      	ldr	r3, [pc, #44]	@ (800d194 <tcp_slowtmr+0x5ac>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d16c:	e067      	b.n	800d23e <tcp_slowtmr+0x656>
 800d16e:	bf00      	nop
 800d170:	200171b4 	.word	0x200171b4
 800d174:	10624dd3 	.word	0x10624dd3
 800d178:	000124f8 	.word	0x000124f8
 800d17c:	200171c0 	.word	0x200171c0
 800d180:	08017bf4 	.word	0x08017bf4
 800d184:	0801802c 	.word	0x0801802c
 800d188:	08017c38 	.word	0x08017c38
 800d18c:	08018058 	.word	0x08018058
 800d190:	200171c8 	.word	0x200171c8
 800d194:	200171c4 	.word	0x200171c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19a:	7d1b      	ldrb	r3, [r3, #20]
 800d19c:	2b0a      	cmp	r3, #10
 800d19e:	d006      	beq.n	800d1ae <tcp_slowtmr+0x5c6>
 800d1a0:	4b2b      	ldr	r3, [pc, #172]	@ (800d250 <tcp_slowtmr+0x668>)
 800d1a2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d1a6:	492b      	ldr	r1, [pc, #172]	@ (800d254 <tcp_slowtmr+0x66c>)
 800d1a8:	482b      	ldr	r0, [pc, #172]	@ (800d258 <tcp_slowtmr+0x670>)
 800d1aa:	f008 f8a1 	bl	80152f0 <iprintf>
    pcb_remove = 0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d1b4:	4b29      	ldr	r3, [pc, #164]	@ (800d25c <tcp_slowtmr+0x674>)
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	2bf0      	cmp	r3, #240	@ 0xf0
 800d1c0:	d904      	bls.n	800d1cc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d1c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d02f      	beq.n	800d234 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d1d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1d6:	f000 fc17 	bl	800da08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d010      	beq.n	800d202 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d1e0:	4b1f      	ldr	r3, [pc, #124]	@ (800d260 <tcp_slowtmr+0x678>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d106      	bne.n	800d1f8 <tcp_slowtmr+0x610>
 800d1ea:	4b19      	ldr	r3, [pc, #100]	@ (800d250 <tcp_slowtmr+0x668>)
 800d1ec:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d1f0:	491c      	ldr	r1, [pc, #112]	@ (800d264 <tcp_slowtmr+0x67c>)
 800d1f2:	4819      	ldr	r0, [pc, #100]	@ (800d258 <tcp_slowtmr+0x670>)
 800d1f4:	f008 f87c 	bl	80152f0 <iprintf>
        prev->next = pcb->next;
 800d1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fe:	60da      	str	r2, [r3, #12]
 800d200:	e00f      	b.n	800d222 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d202:	4b17      	ldr	r3, [pc, #92]	@ (800d260 <tcp_slowtmr+0x678>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d208:	429a      	cmp	r2, r3
 800d20a:	d006      	beq.n	800d21a <tcp_slowtmr+0x632>
 800d20c:	4b10      	ldr	r3, [pc, #64]	@ (800d250 <tcp_slowtmr+0x668>)
 800d20e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d212:	4915      	ldr	r1, [pc, #84]	@ (800d268 <tcp_slowtmr+0x680>)
 800d214:	4810      	ldr	r0, [pc, #64]	@ (800d258 <tcp_slowtmr+0x670>)
 800d216:	f008 f86b 	bl	80152f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	4a10      	ldr	r2, [pc, #64]	@ (800d260 <tcp_slowtmr+0x678>)
 800d220:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d224:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d22c:	69f8      	ldr	r0, [r7, #28]
 800d22e:	f7fe ff83 	bl	800c138 <tcp_free>
 800d232:	e004      	b.n	800d23e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d236:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1a9      	bne.n	800d198 <tcp_slowtmr+0x5b0>
    }
  }
}
 800d244:	bf00      	nop
 800d246:	bf00      	nop
 800d248:	3730      	adds	r7, #48	@ 0x30
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bdb0      	pop	{r4, r5, r7, pc}
 800d24e:	bf00      	nop
 800d250:	08017bf4 	.word	0x08017bf4
 800d254:	08018084 	.word	0x08018084
 800d258:	08017c38 	.word	0x08017c38
 800d25c:	200171b4 	.word	0x200171b4
 800d260:	200171c4 	.word	0x200171c4
 800d264:	080180b4 	.word	0x080180b4
 800d268:	080180dc 	.word	0x080180dc

0800d26c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d272:	4b2d      	ldr	r3, [pc, #180]	@ (800d328 <tcp_fasttmr+0xbc>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	3301      	adds	r3, #1
 800d278:	b2da      	uxtb	r2, r3
 800d27a:	4b2b      	ldr	r3, [pc, #172]	@ (800d328 <tcp_fasttmr+0xbc>)
 800d27c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d27e:	4b2b      	ldr	r3, [pc, #172]	@ (800d32c <tcp_fasttmr+0xc0>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d284:	e048      	b.n	800d318 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	7f9a      	ldrb	r2, [r3, #30]
 800d28a:	4b27      	ldr	r3, [pc, #156]	@ (800d328 <tcp_fasttmr+0xbc>)
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d03f      	beq.n	800d312 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d292:	4b25      	ldr	r3, [pc, #148]	@ (800d328 <tcp_fasttmr+0xbc>)
 800d294:	781a      	ldrb	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	8b5b      	ldrh	r3, [r3, #26]
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d010      	beq.n	800d2c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	8b5b      	ldrh	r3, [r3, #26]
 800d2aa:	f043 0302 	orr.w	r3, r3, #2
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f004 f80d 	bl	80112d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	8b5b      	ldrh	r3, [r3, #26]
 800d2be:	f023 0303 	bic.w	r3, r3, #3
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	8b5b      	ldrh	r3, [r3, #26]
 800d2cc:	f003 0308 	and.w	r3, r3, #8
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d009      	beq.n	800d2e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	8b5b      	ldrh	r3, [r3, #26]
 800d2d8:	f023 0308 	bic.w	r3, r3, #8
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7ff f8bc 	bl	800c460 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00a      	beq.n	800d30c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d2f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d330 <tcp_fasttmr+0xc4>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f819 	bl	800d334 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d302:	4b0b      	ldr	r3, [pc, #44]	@ (800d330 <tcp_fasttmr+0xc4>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d000      	beq.n	800d30c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d30a:	e7b8      	b.n	800d27e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	607b      	str	r3, [r7, #4]
 800d310:	e002      	b.n	800d318 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1b3      	bne.n	800d286 <tcp_fasttmr+0x1a>
    }
  }
}
 800d31e:	bf00      	nop
 800d320:	bf00      	nop
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	200171ca 	.word	0x200171ca
 800d32c:	200171c0 	.word	0x200171c0
 800d330:	200171c8 	.word	0x200171c8

0800d334 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d334:	b590      	push	{r4, r7, lr}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d109      	bne.n	800d356 <tcp_process_refused_data+0x22>
 800d342:	4b37      	ldr	r3, [pc, #220]	@ (800d420 <tcp_process_refused_data+0xec>)
 800d344:	f240 6209 	movw	r2, #1545	@ 0x609
 800d348:	4936      	ldr	r1, [pc, #216]	@ (800d424 <tcp_process_refused_data+0xf0>)
 800d34a:	4837      	ldr	r0, [pc, #220]	@ (800d428 <tcp_process_refused_data+0xf4>)
 800d34c:	f007 ffd0 	bl	80152f0 <iprintf>
 800d350:	f06f 030f 	mvn.w	r3, #15
 800d354:	e060      	b.n	800d418 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d35a:	7b5b      	ldrb	r3, [r3, #13]
 800d35c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d362:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00b      	beq.n	800d38c <tcp_process_refused_data+0x58>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6918      	ldr	r0, [r3, #16]
 800d37e:	2300      	movs	r3, #0
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	6879      	ldr	r1, [r7, #4]
 800d384:	47a0      	blx	r4
 800d386:	4603      	mov	r3, r0
 800d388:	73fb      	strb	r3, [r7, #15]
 800d38a:	e007      	b.n	800d39c <tcp_process_refused_data+0x68>
 800d38c:	2300      	movs	r3, #0
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	6879      	ldr	r1, [r7, #4]
 800d392:	2000      	movs	r0, #0
 800d394:	f000 f8c2 	bl	800d51c <tcp_recv_null>
 800d398:	4603      	mov	r3, r0
 800d39a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d39c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d12a      	bne.n	800d3fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d3a4:	7bbb      	ldrb	r3, [r7, #14]
 800d3a6:	f003 0320 	and.w	r3, r3, #32
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d033      	beq.n	800d416 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3b2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d3b6:	d005      	beq.n	800d3c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3bc:	3301      	adds	r3, #1
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00b      	beq.n	800d3e6 <tcp_process_refused_data+0xb2>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6918      	ldr	r0, [r3, #16]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	2200      	movs	r2, #0
 800d3dc:	6879      	ldr	r1, [r7, #4]
 800d3de:	47a0      	blx	r4
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	73fb      	strb	r3, [r7, #15]
 800d3e4:	e001      	b.n	800d3ea <tcp_process_refused_data+0xb6>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3ee:	f113 0f0d 	cmn.w	r3, #13
 800d3f2:	d110      	bne.n	800d416 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d3f4:	f06f 030c 	mvn.w	r3, #12
 800d3f8:	e00e      	b.n	800d418 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3fe:	f113 0f0d 	cmn.w	r3, #13
 800d402:	d102      	bne.n	800d40a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d404:	f06f 030c 	mvn.w	r3, #12
 800d408:	e006      	b.n	800d418 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d410:	f06f 0304 	mvn.w	r3, #4
 800d414:	e000      	b.n	800d418 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3714      	adds	r7, #20
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd90      	pop	{r4, r7, pc}
 800d420:	08017bf4 	.word	0x08017bf4
 800d424:	08018104 	.word	0x08018104
 800d428:	08017c38 	.word	0x08017c38

0800d42c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d434:	e007      	b.n	800d446 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f80a 	bl	800d456 <tcp_seg_free>
    seg = next;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1f4      	bne.n	800d436 <tcp_segs_free+0xa>
  }
}
 800d44c:	bf00      	nop
 800d44e:	bf00      	nop
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b082      	sub	sp, #8
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00c      	beq.n	800d47e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d004      	beq.n	800d476 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	4618      	mov	r0, r3
 800d472:	f7fe fbb5 	bl	800bbe0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d476:	6879      	ldr	r1, [r7, #4]
 800d478:	2003      	movs	r0, #3
 800d47a:	f7fd fd0d 	bl	800ae98 <memp_free>
  }
}
 800d47e:	bf00      	nop
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
	...

0800d488 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d107      	bne.n	800d4aa <tcp_setprio+0x22>
 800d49a:	4b07      	ldr	r3, [pc, #28]	@ (800d4b8 <tcp_setprio+0x30>)
 800d49c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800d4a0:	4906      	ldr	r1, [pc, #24]	@ (800d4bc <tcp_setprio+0x34>)
 800d4a2:	4807      	ldr	r0, [pc, #28]	@ (800d4c0 <tcp_setprio+0x38>)
 800d4a4:	f007 ff24 	bl	80152f0 <iprintf>
 800d4a8:	e002      	b.n	800d4b0 <tcp_setprio+0x28>

  pcb->prio = prio;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	78fa      	ldrb	r2, [r7, #3]
 800d4ae:	755a      	strb	r2, [r3, #21]
}
 800d4b0:	3708      	adds	r7, #8
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	08017bf4 	.word	0x08017bf4
 800d4bc:	0801812c 	.word	0x0801812c
 800d4c0:	08017c38 	.word	0x08017c38

0800d4c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d106      	bne.n	800d4e0 <tcp_seg_copy+0x1c>
 800d4d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d510 <tcp_seg_copy+0x4c>)
 800d4d4:	f240 6282 	movw	r2, #1666	@ 0x682
 800d4d8:	490e      	ldr	r1, [pc, #56]	@ (800d514 <tcp_seg_copy+0x50>)
 800d4da:	480f      	ldr	r0, [pc, #60]	@ (800d518 <tcp_seg_copy+0x54>)
 800d4dc:	f007 ff08 	bl	80152f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d4e0:	2003      	movs	r0, #3
 800d4e2:	f7fd fc63 	bl	800adac <memp_malloc>
 800d4e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <tcp_seg_copy+0x2e>
    return NULL;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e00a      	b.n	800d508 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d4f2:	2210      	movs	r2, #16
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f008 f9a3 	bl	8015842 <memcpy>
  pbuf_ref(cseg->p);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe fc13 	bl	800bd2c <pbuf_ref>
  return cseg;
 800d506:	68fb      	ldr	r3, [r7, #12]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	08017bf4 	.word	0x08017bf4
 800d514:	08018148 	.word	0x08018148
 800d518:	08017c38 	.word	0x08017c38

0800d51c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
 800d528:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d109      	bne.n	800d544 <tcp_recv_null+0x28>
 800d530:	4b12      	ldr	r3, [pc, #72]	@ (800d57c <tcp_recv_null+0x60>)
 800d532:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d536:	4912      	ldr	r1, [pc, #72]	@ (800d580 <tcp_recv_null+0x64>)
 800d538:	4812      	ldr	r0, [pc, #72]	@ (800d584 <tcp_recv_null+0x68>)
 800d53a:	f007 fed9 	bl	80152f0 <iprintf>
 800d53e:	f06f 030f 	mvn.w	r3, #15
 800d542:	e016      	b.n	800d572 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d009      	beq.n	800d55e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	891b      	ldrh	r3, [r3, #8]
 800d54e:	4619      	mov	r1, r3
 800d550:	68b8      	ldr	r0, [r7, #8]
 800d552:	f7ff fab3 	bl	800cabc <tcp_recved>
    pbuf_free(p);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7fe fb42 	bl	800bbe0 <pbuf_free>
 800d55c:	e008      	b.n	800d570 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d55e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d104      	bne.n	800d570 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d566:	68b8      	ldr	r0, [r7, #8]
 800d568:	f7fe ffe4 	bl	800c534 <tcp_close>
 800d56c:	4603      	mov	r3, r0
 800d56e:	e000      	b.n	800d572 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	08017bf4 	.word	0x08017bf4
 800d580:	08018164 	.word	0x08018164
 800d584:	08017c38 	.word	0x08017c38

0800d588 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b086      	sub	sp, #24
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	4603      	mov	r3, r0
 800d590:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d596:	2b00      	cmp	r3, #0
 800d598:	db01      	blt.n	800d59e <tcp_kill_prio+0x16>
 800d59a:	79fb      	ldrb	r3, [r7, #7]
 800d59c:	e000      	b.n	800d5a0 <tcp_kill_prio+0x18>
 800d59e:	237f      	movs	r3, #127	@ 0x7f
 800d5a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d5a2:	7afb      	ldrb	r3, [r7, #11]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d034      	beq.n	800d612 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d5a8:	7afb      	ldrb	r3, [r7, #11]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5b6:	4b19      	ldr	r3, [pc, #100]	@ (800d61c <tcp_kill_prio+0x94>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e01f      	b.n	800d5fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	7d5b      	ldrb	r3, [r3, #21]
 800d5c2:	7afa      	ldrb	r2, [r7, #11]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d80c      	bhi.n	800d5e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d5cc:	7afa      	ldrb	r2, [r7, #11]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d112      	bne.n	800d5f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d5d2:	4b13      	ldr	r3, [pc, #76]	@ (800d620 <tcp_kill_prio+0x98>)
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d80a      	bhi.n	800d5f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d5e2:	4b0f      	ldr	r3, [pc, #60]	@ (800d620 <tcp_kill_prio+0x98>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	7d5b      	ldrb	r3, [r3, #21]
 800d5f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1dc      	bne.n	800d5be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d004      	beq.n	800d614 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d60a:	6938      	ldr	r0, [r7, #16]
 800d60c:	f7ff f87c 	bl	800c708 <tcp_abort>
 800d610:	e000      	b.n	800d614 <tcp_kill_prio+0x8c>
    return;
 800d612:	bf00      	nop
  }
}
 800d614:	3718      	adds	r7, #24
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	200171c0 	.word	0x200171c0
 800d620:	200171b4 	.word	0x200171b4

0800d624 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	4603      	mov	r3, r0
 800d62c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d62e:	79fb      	ldrb	r3, [r7, #7]
 800d630:	2b08      	cmp	r3, #8
 800d632:	d009      	beq.n	800d648 <tcp_kill_state+0x24>
 800d634:	79fb      	ldrb	r3, [r7, #7]
 800d636:	2b09      	cmp	r3, #9
 800d638:	d006      	beq.n	800d648 <tcp_kill_state+0x24>
 800d63a:	4b1a      	ldr	r3, [pc, #104]	@ (800d6a4 <tcp_kill_state+0x80>)
 800d63c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d640:	4919      	ldr	r1, [pc, #100]	@ (800d6a8 <tcp_kill_state+0x84>)
 800d642:	481a      	ldr	r0, [pc, #104]	@ (800d6ac <tcp_kill_state+0x88>)
 800d644:	f007 fe54 	bl	80152f0 <iprintf>

  inactivity = 0;
 800d648:	2300      	movs	r3, #0
 800d64a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d64c:	2300      	movs	r3, #0
 800d64e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d650:	4b17      	ldr	r3, [pc, #92]	@ (800d6b0 <tcp_kill_state+0x8c>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	617b      	str	r3, [r7, #20]
 800d656:	e017      	b.n	800d688 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	7d1b      	ldrb	r3, [r3, #20]
 800d65c:	79fa      	ldrb	r2, [r7, #7]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d10f      	bne.n	800d682 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d662:	4b14      	ldr	r3, [pc, #80]	@ (800d6b4 <tcp_kill_state+0x90>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d807      	bhi.n	800d682 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d672:	4b10      	ldr	r3, [pc, #64]	@ (800d6b4 <tcp_kill_state+0x90>)
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	617b      	str	r3, [r7, #20]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1e4      	bne.n	800d658 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d003      	beq.n	800d69c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d694:	2100      	movs	r1, #0
 800d696:	6938      	ldr	r0, [r7, #16]
 800d698:	f7fe ff78 	bl	800c58c <tcp_abandon>
  }
}
 800d69c:	bf00      	nop
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	08017bf4 	.word	0x08017bf4
 800d6a8:	08018180 	.word	0x08018180
 800d6ac:	08017c38 	.word	0x08017c38
 800d6b0:	200171c0 	.word	0x200171c0
 800d6b4:	200171b4 	.word	0x200171b4

0800d6b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6c6:	4b12      	ldr	r3, [pc, #72]	@ (800d710 <tcp_kill_timewait+0x58>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e012      	b.n	800d6f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d6ce:	4b11      	ldr	r3, [pc, #68]	@ (800d714 <tcp_kill_timewait+0x5c>)
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6a1b      	ldr	r3, [r3, #32]
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d807      	bhi.n	800d6ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d6de:	4b0d      	ldr	r3, [pc, #52]	@ (800d714 <tcp_kill_timewait+0x5c>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1e9      	bne.n	800d6ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d700:	68b8      	ldr	r0, [r7, #8]
 800d702:	f7ff f801 	bl	800c708 <tcp_abort>
  }
}
 800d706:	bf00      	nop
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	200171c4 	.word	0x200171c4
 800d714:	200171b4 	.word	0x200171b4

0800d718 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d71e:	4b10      	ldr	r3, [pc, #64]	@ (800d760 <tcp_handle_closepend+0x48>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d724:	e014      	b.n	800d750 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	8b5b      	ldrh	r3, [r3, #26]
 800d730:	f003 0308 	and.w	r3, r3, #8
 800d734:	2b00      	cmp	r3, #0
 800d736:	d009      	beq.n	800d74c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	8b5b      	ldrh	r3, [r3, #26]
 800d73c:	f023 0308 	bic.w	r3, r3, #8
 800d740:	b29a      	uxth	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fe fe8a 	bl	800c460 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e7      	bne.n	800d726 <tcp_handle_closepend+0xe>
  }
}
 800d756:	bf00      	nop
 800d758:	bf00      	nop
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	200171c0 	.word	0x200171c0

0800d764 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	4603      	mov	r3, r0
 800d76c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d76e:	2001      	movs	r0, #1
 800d770:	f7fd fb1c 	bl	800adac <memp_malloc>
 800d774:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d126      	bne.n	800d7ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d77c:	f7ff ffcc 	bl	800d718 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d780:	f7ff ff9a 	bl	800d6b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d784:	2001      	movs	r0, #1
 800d786:	f7fd fb11 	bl	800adac <memp_malloc>
 800d78a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d11b      	bne.n	800d7ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d792:	2009      	movs	r0, #9
 800d794:	f7ff ff46 	bl	800d624 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d798:	2001      	movs	r0, #1
 800d79a:	f7fd fb07 	bl	800adac <memp_malloc>
 800d79e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d111      	bne.n	800d7ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d7a6:	2008      	movs	r0, #8
 800d7a8:	f7ff ff3c 	bl	800d624 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d7ac:	2001      	movs	r0, #1
 800d7ae:	f7fd fafd 	bl	800adac <memp_malloc>
 800d7b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d107      	bne.n	800d7ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff fee3 	bl	800d588 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	f7fd faf2 	bl	800adac <memp_malloc>
 800d7c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d03f      	beq.n	800d850 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d7d0:	229c      	movs	r2, #156	@ 0x9c
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f007 ff33 	bl	8015640 <memset>
    pcb->prio = prio;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	79fa      	ldrb	r2, [r7, #7]
 800d7de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d7e6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d7f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	22ff      	movs	r2, #255	@ 0xff
 800d7fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d806:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2206      	movs	r2, #6
 800d80c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2206      	movs	r2, #6
 800d814:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d81c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2201      	movs	r2, #1
 800d822:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d826:	4b0d      	ldr	r3, [pc, #52]	@ (800d85c <tcp_alloc+0xf8>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d82e:	4b0c      	ldr	r3, [pc, #48]	@ (800d860 <tcp_alloc+0xfc>)
 800d830:	781a      	ldrb	r2, [r3, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d83c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a08      	ldr	r2, [pc, #32]	@ (800d864 <tcp_alloc+0x100>)
 800d844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	4a07      	ldr	r2, [pc, #28]	@ (800d868 <tcp_alloc+0x104>)
 800d84c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d850:	68fb      	ldr	r3, [r7, #12]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	200171b4 	.word	0x200171b4
 800d860:	200171ca 	.word	0x200171ca
 800d864:	0800d51d 	.word	0x0800d51d
 800d868:	006ddd00 	.word	0x006ddd00

0800d86c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d876:	2040      	movs	r0, #64	@ 0x40
 800d878:	f7ff ff74 	bl	800d764 <tcp_alloc>
 800d87c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d87e:	68fb      	ldr	r3, [r7, #12]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	683a      	ldr	r2, [r7, #0]
 800d89c:	611a      	str	r2, [r3, #16]
  }
}
 800d89e:	bf00      	nop
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
	...

0800d8ac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00e      	beq.n	800d8da <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	7d1b      	ldrb	r3, [r3, #20]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d106      	bne.n	800d8d2 <tcp_recv+0x26>
 800d8c4:	4b07      	ldr	r3, [pc, #28]	@ (800d8e4 <tcp_recv+0x38>)
 800d8c6:	f240 72df 	movw	r2, #2015	@ 0x7df
 800d8ca:	4907      	ldr	r1, [pc, #28]	@ (800d8e8 <tcp_recv+0x3c>)
 800d8cc:	4807      	ldr	r0, [pc, #28]	@ (800d8ec <tcp_recv+0x40>)
 800d8ce:	f007 fd0f 	bl	80152f0 <iprintf>
    pcb->recv = recv;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800d8da:	bf00      	nop
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	08017bf4 	.word	0x08017bf4
 800d8e8:	08018190 	.word	0x08018190
 800d8ec:	08017c38 	.word	0x08017c38

0800d8f0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00e      	beq.n	800d91e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	7d1b      	ldrb	r3, [r3, #20]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d106      	bne.n	800d916 <tcp_sent+0x26>
 800d908:	4b07      	ldr	r3, [pc, #28]	@ (800d928 <tcp_sent+0x38>)
 800d90a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800d90e:	4907      	ldr	r1, [pc, #28]	@ (800d92c <tcp_sent+0x3c>)
 800d910:	4807      	ldr	r0, [pc, #28]	@ (800d930 <tcp_sent+0x40>)
 800d912:	f007 fced 	bl	80152f0 <iprintf>
    pcb->sent = sent;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800d91e:	bf00      	nop
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	08017bf4 	.word	0x08017bf4
 800d92c:	080181b8 	.word	0x080181b8
 800d930:	08017c38 	.word	0x08017c38

0800d934 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00e      	beq.n	800d962 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	7d1b      	ldrb	r3, [r3, #20]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d106      	bne.n	800d95a <tcp_err+0x26>
 800d94c:	4b07      	ldr	r3, [pc, #28]	@ (800d96c <tcp_err+0x38>)
 800d94e:	f640 020d 	movw	r2, #2061	@ 0x80d
 800d952:	4907      	ldr	r1, [pc, #28]	@ (800d970 <tcp_err+0x3c>)
 800d954:	4807      	ldr	r0, [pc, #28]	@ (800d974 <tcp_err+0x40>)
 800d956:	f007 fccb 	bl	80152f0 <iprintf>
    pcb->errf = err;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800d962:	bf00      	nop
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	08017bf4 	.word	0x08017bf4
 800d970:	080181e0 	.word	0x080181e0
 800d974:	08017c38 	.word	0x08017c38

0800d978 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d978:	b480      	push	{r7}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d008      	beq.n	800d99a <tcp_accept+0x22>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	7d1b      	ldrb	r3, [r3, #20]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d104      	bne.n	800d99a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	619a      	str	r2, [r3, #24]
  }
}
 800d99a:	bf00      	nop
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
	...

0800d9a8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d107      	bne.n	800d9cc <tcp_poll+0x24>
 800d9bc:	4b0e      	ldr	r3, [pc, #56]	@ (800d9f8 <tcp_poll+0x50>)
 800d9be:	f640 023d 	movw	r2, #2109	@ 0x83d
 800d9c2:	490e      	ldr	r1, [pc, #56]	@ (800d9fc <tcp_poll+0x54>)
 800d9c4:	480e      	ldr	r0, [pc, #56]	@ (800da00 <tcp_poll+0x58>)
 800d9c6:	f007 fc93 	bl	80152f0 <iprintf>
 800d9ca:	e011      	b.n	800d9f0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	7d1b      	ldrb	r3, [r3, #20]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d106      	bne.n	800d9e2 <tcp_poll+0x3a>
 800d9d4:	4b08      	ldr	r3, [pc, #32]	@ (800d9f8 <tcp_poll+0x50>)
 800d9d6:	f640 023e 	movw	r2, #2110	@ 0x83e
 800d9da:	490a      	ldr	r1, [pc, #40]	@ (800da04 <tcp_poll+0x5c>)
 800d9dc:	4808      	ldr	r0, [pc, #32]	@ (800da00 <tcp_poll+0x58>)
 800d9de:	f007 fc87 	bl	80152f0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	79fa      	ldrb	r2, [r7, #7]
 800d9ee:	775a      	strb	r2, [r3, #29]
}
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	08017bf4 	.word	0x08017bf4
 800d9fc:	08018208 	.word	0x08018208
 800da00:	08017c38 	.word	0x08017c38
 800da04:	08018220 	.word	0x08018220

0800da08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d107      	bne.n	800da26 <tcp_pcb_purge+0x1e>
 800da16:	4b21      	ldr	r3, [pc, #132]	@ (800da9c <tcp_pcb_purge+0x94>)
 800da18:	f640 0251 	movw	r2, #2129	@ 0x851
 800da1c:	4920      	ldr	r1, [pc, #128]	@ (800daa0 <tcp_pcb_purge+0x98>)
 800da1e:	4821      	ldr	r0, [pc, #132]	@ (800daa4 <tcp_pcb_purge+0x9c>)
 800da20:	f007 fc66 	bl	80152f0 <iprintf>
 800da24:	e037      	b.n	800da96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	7d1b      	ldrb	r3, [r3, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d033      	beq.n	800da96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800da32:	2b0a      	cmp	r3, #10
 800da34:	d02f      	beq.n	800da96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d02b      	beq.n	800da96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da42:	2b00      	cmp	r3, #0
 800da44:	d007      	beq.n	800da56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe f8c8 	bl	800bbe0 <pbuf_free>
      pcb->refused_data = NULL;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f986 	bl	800dd70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da6a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff fcdb 	bl	800d42c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7ff fcd6 	bl	800d42c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	66da      	str	r2, [r3, #108]	@ 0x6c
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	08017bf4 	.word	0x08017bf4
 800daa0:	08018240 	.word	0x08018240
 800daa4:	08017c38 	.word	0x08017c38

0800daa8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d106      	bne.n	800dac6 <tcp_pcb_remove+0x1e>
 800dab8:	4b3e      	ldr	r3, [pc, #248]	@ (800dbb4 <tcp_pcb_remove+0x10c>)
 800daba:	f640 0283 	movw	r2, #2179	@ 0x883
 800dabe:	493e      	ldr	r1, [pc, #248]	@ (800dbb8 <tcp_pcb_remove+0x110>)
 800dac0:	483e      	ldr	r0, [pc, #248]	@ (800dbbc <tcp_pcb_remove+0x114>)
 800dac2:	f007 fc15 	bl	80152f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d106      	bne.n	800dada <tcp_pcb_remove+0x32>
 800dacc:	4b39      	ldr	r3, [pc, #228]	@ (800dbb4 <tcp_pcb_remove+0x10c>)
 800dace:	f640 0284 	movw	r2, #2180	@ 0x884
 800dad2:	493b      	ldr	r1, [pc, #236]	@ (800dbc0 <tcp_pcb_remove+0x118>)
 800dad4:	4839      	ldr	r0, [pc, #228]	@ (800dbbc <tcp_pcb_remove+0x114>)
 800dad6:	f007 fc0b 	bl	80152f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d105      	bne.n	800daf0 <tcp_pcb_remove+0x48>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	e013      	b.n	800db18 <tcp_pcb_remove+0x70>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	60fb      	str	r3, [r7, #12]
 800daf6:	e00c      	b.n	800db12 <tcp_pcb_remove+0x6a>
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	683a      	ldr	r2, [r7, #0]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d104      	bne.n	800db0c <tcp_pcb_remove+0x64>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	68da      	ldr	r2, [r3, #12]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	60da      	str	r2, [r3, #12]
 800db0a:	e005      	b.n	800db18 <tcp_pcb_remove+0x70>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d1ef      	bne.n	800daf8 <tcp_pcb_remove+0x50>
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	2200      	movs	r2, #0
 800db1c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800db1e:	6838      	ldr	r0, [r7, #0]
 800db20:	f7ff ff72 	bl	800da08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
 800db28:	2b0a      	cmp	r3, #10
 800db2a:	d013      	beq.n	800db54 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800db30:	2b01      	cmp	r3, #1
 800db32:	d00f      	beq.n	800db54 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	8b5b      	ldrh	r3, [r3, #26]
 800db38:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	8b5b      	ldrh	r3, [r3, #26]
 800db44:	f043 0302 	orr.w	r3, r3, #2
 800db48:	b29a      	uxth	r2, r3
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db4e:	6838      	ldr	r0, [r7, #0]
 800db50:	f003 fbc0 	bl	80112d4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	7d1b      	ldrb	r3, [r3, #20]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d020      	beq.n	800db9e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <tcp_pcb_remove+0xca>
 800db64:	4b13      	ldr	r3, [pc, #76]	@ (800dbb4 <tcp_pcb_remove+0x10c>)
 800db66:	f640 0293 	movw	r2, #2195	@ 0x893
 800db6a:	4916      	ldr	r1, [pc, #88]	@ (800dbc4 <tcp_pcb_remove+0x11c>)
 800db6c:	4813      	ldr	r0, [pc, #76]	@ (800dbbc <tcp_pcb_remove+0x114>)
 800db6e:	f007 fbbf 	bl	80152f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db76:	2b00      	cmp	r3, #0
 800db78:	d006      	beq.n	800db88 <tcp_pcb_remove+0xe0>
 800db7a:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb4 <tcp_pcb_remove+0x10c>)
 800db7c:	f640 0294 	movw	r2, #2196	@ 0x894
 800db80:	4911      	ldr	r1, [pc, #68]	@ (800dbc8 <tcp_pcb_remove+0x120>)
 800db82:	480e      	ldr	r0, [pc, #56]	@ (800dbbc <tcp_pcb_remove+0x114>)
 800db84:	f007 fbb4 	bl	80152f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d006      	beq.n	800db9e <tcp_pcb_remove+0xf6>
 800db90:	4b08      	ldr	r3, [pc, #32]	@ (800dbb4 <tcp_pcb_remove+0x10c>)
 800db92:	f640 0296 	movw	r2, #2198	@ 0x896
 800db96:	490d      	ldr	r1, [pc, #52]	@ (800dbcc <tcp_pcb_remove+0x124>)
 800db98:	4808      	ldr	r0, [pc, #32]	@ (800dbbc <tcp_pcb_remove+0x114>)
 800db9a:	f007 fba9 	bl	80152f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2200      	movs	r2, #0
 800dba2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	2200      	movs	r2, #0
 800dba8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dbaa:	bf00      	nop
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	08017bf4 	.word	0x08017bf4
 800dbb8:	0801825c 	.word	0x0801825c
 800dbbc:	08017c38 	.word	0x08017c38
 800dbc0:	08018278 	.word	0x08018278
 800dbc4:	08018298 	.word	0x08018298
 800dbc8:	080182b0 	.word	0x080182b0
 800dbcc:	080182cc 	.word	0x080182cc

0800dbd0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <tcp_next_iss+0x1c>
 800dbde:	4b0a      	ldr	r3, [pc, #40]	@ (800dc08 <tcp_next_iss+0x38>)
 800dbe0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800dbe4:	4909      	ldr	r1, [pc, #36]	@ (800dc0c <tcp_next_iss+0x3c>)
 800dbe6:	480a      	ldr	r0, [pc, #40]	@ (800dc10 <tcp_next_iss+0x40>)
 800dbe8:	f007 fb82 	bl	80152f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dbec:	4b09      	ldr	r3, [pc, #36]	@ (800dc14 <tcp_next_iss+0x44>)
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	4b09      	ldr	r3, [pc, #36]	@ (800dc18 <tcp_next_iss+0x48>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	4a07      	ldr	r2, [pc, #28]	@ (800dc14 <tcp_next_iss+0x44>)
 800dbf8:	6013      	str	r3, [r2, #0]
  return iss;
 800dbfa:	4b06      	ldr	r3, [pc, #24]	@ (800dc14 <tcp_next_iss+0x44>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	08017bf4 	.word	0x08017bf4
 800dc0c:	080182e4 	.word	0x080182e4
 800dc10:	08017c38 	.word	0x08017c38
 800dc14:	20000050 	.word	0x20000050
 800dc18:	200171b4 	.word	0x200171b4

0800dc1c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	4603      	mov	r3, r0
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d106      	bne.n	800dc3e <tcp_eff_send_mss_netif+0x22>
 800dc30:	4b14      	ldr	r3, [pc, #80]	@ (800dc84 <tcp_eff_send_mss_netif+0x68>)
 800dc32:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800dc36:	4914      	ldr	r1, [pc, #80]	@ (800dc88 <tcp_eff_send_mss_netif+0x6c>)
 800dc38:	4814      	ldr	r0, [pc, #80]	@ (800dc8c <tcp_eff_send_mss_netif+0x70>)
 800dc3a:	f007 fb59 	bl	80152f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d101      	bne.n	800dc48 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dc44:	89fb      	ldrh	r3, [r7, #14]
 800dc46:	e019      	b.n	800dc7c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dc4c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dc4e:	8afb      	ldrh	r3, [r7, #22]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d012      	beq.n	800dc7a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dc54:	2328      	movs	r3, #40	@ 0x28
 800dc56:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dc58:	8afa      	ldrh	r2, [r7, #22]
 800dc5a:	8abb      	ldrh	r3, [r7, #20]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d904      	bls.n	800dc6a <tcp_eff_send_mss_netif+0x4e>
 800dc60:	8afa      	ldrh	r2, [r7, #22]
 800dc62:	8abb      	ldrh	r3, [r7, #20]
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	e000      	b.n	800dc6c <tcp_eff_send_mss_netif+0x50>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dc6e:	8a7a      	ldrh	r2, [r7, #18]
 800dc70:	89fb      	ldrh	r3, [r7, #14]
 800dc72:	4293      	cmp	r3, r2
 800dc74:	bf28      	it	cs
 800dc76:	4613      	movcs	r3, r2
 800dc78:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dc7a:	89fb      	ldrh	r3, [r7, #14]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3718      	adds	r7, #24
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	08017bf4 	.word	0x08017bf4
 800dc88:	08018300 	.word	0x08018300
 800dc8c:	08017c38 	.word	0x08017c38

0800dc90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d119      	bne.n	800dcd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dca4:	4b10      	ldr	r3, [pc, #64]	@ (800dce8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dca6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800dcaa:	4910      	ldr	r1, [pc, #64]	@ (800dcec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dcac:	4810      	ldr	r0, [pc, #64]	@ (800dcf0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dcae:	f007 fb1f 	bl	80152f0 <iprintf>

  while (pcb != NULL) {
 800dcb2:	e011      	b.n	800dcd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d108      	bne.n	800dcd2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7fe fd1e 	bl	800c708 <tcp_abort>
      pcb = next;
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	60fb      	str	r3, [r7, #12]
 800dcd0:	e002      	b.n	800dcd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1ea      	bne.n	800dcb4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dcde:	bf00      	nop
 800dce0:	bf00      	nop
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	08017bf4 	.word	0x08017bf4
 800dcec:	08018328 	.word	0x08018328
 800dcf0:	08017c38 	.word	0x08017c38

0800dcf4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d02a      	beq.n	800dd5a <tcp_netif_ip_addr_changed+0x66>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d026      	beq.n	800dd5a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dd0c:	4b15      	ldr	r3, [pc, #84]	@ (800dd64 <tcp_netif_ip_addr_changed+0x70>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4619      	mov	r1, r3
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7ff ffbc 	bl	800dc90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dd18:	4b13      	ldr	r3, [pc, #76]	@ (800dd68 <tcp_netif_ip_addr_changed+0x74>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff ffb6 	bl	800dc90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d017      	beq.n	800dd5a <tcp_netif_ip_addr_changed+0x66>
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d013      	beq.n	800dd5a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd32:	4b0e      	ldr	r3, [pc, #56]	@ (800dd6c <tcp_netif_ip_addr_changed+0x78>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	e00c      	b.n	800dd54 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d103      	bne.n	800dd4e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1ef      	bne.n	800dd3a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dd5a:	bf00      	nop
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	200171c0 	.word	0x200171c0
 800dd68:	200171b8 	.word	0x200171b8
 800dd6c:	200171bc 	.word	0x200171bc

0800dd70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d007      	beq.n	800dd90 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7ff fb51 	bl	800d42c <tcp_segs_free>
    pcb->ooseq = NULL;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dd98:	b590      	push	{r4, r7, lr}
 800dd9a:	b08d      	sub	sp, #52	@ 0x34
 800dd9c:	af04      	add	r7, sp, #16
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d105      	bne.n	800ddb4 <tcp_input+0x1c>
 800dda8:	4b9b      	ldr	r3, [pc, #620]	@ (800e018 <tcp_input+0x280>)
 800ddaa:	2283      	movs	r2, #131	@ 0x83
 800ddac:	499b      	ldr	r1, [pc, #620]	@ (800e01c <tcp_input+0x284>)
 800ddae:	489c      	ldr	r0, [pc, #624]	@ (800e020 <tcp_input+0x288>)
 800ddb0:	f007 fa9e 	bl	80152f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	4a9a      	ldr	r2, [pc, #616]	@ (800e024 <tcp_input+0x28c>)
 800ddba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	895b      	ldrh	r3, [r3, #10]
 800ddc0:	2b13      	cmp	r3, #19
 800ddc2:	f240 83d1 	bls.w	800e568 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ddc6:	4b98      	ldr	r3, [pc, #608]	@ (800e028 <tcp_input+0x290>)
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	4a97      	ldr	r2, [pc, #604]	@ (800e028 <tcp_input+0x290>)
 800ddcc:	6812      	ldr	r2, [r2, #0]
 800ddce:	4611      	mov	r1, r2
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f006 f899 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f040 83c7 	bne.w	800e56c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ddde:	4b92      	ldr	r3, [pc, #584]	@ (800e028 <tcp_input+0x290>)
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dde6:	2be0      	cmp	r3, #224	@ 0xe0
 800dde8:	f000 83c0 	beq.w	800e56c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ddec:	4b8d      	ldr	r3, [pc, #564]	@ (800e024 <tcp_input+0x28c>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	899b      	ldrh	r3, [r3, #12]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fc fa87 	bl	800a308 <lwip_htons>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	0b1b      	lsrs	r3, r3, #12
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	b2db      	uxtb	r3, r3
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800de06:	7cbb      	ldrb	r3, [r7, #18]
 800de08:	2b13      	cmp	r3, #19
 800de0a:	f240 83b1 	bls.w	800e570 <tcp_input+0x7d8>
 800de0e:	7cbb      	ldrb	r3, [r7, #18]
 800de10:	b29a      	uxth	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	891b      	ldrh	r3, [r3, #8]
 800de16:	429a      	cmp	r2, r3
 800de18:	f200 83aa 	bhi.w	800e570 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800de1c:	7cbb      	ldrb	r3, [r7, #18]
 800de1e:	b29b      	uxth	r3, r3
 800de20:	3b14      	subs	r3, #20
 800de22:	b29a      	uxth	r2, r3
 800de24:	4b81      	ldr	r3, [pc, #516]	@ (800e02c <tcp_input+0x294>)
 800de26:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800de28:	4b81      	ldr	r3, [pc, #516]	@ (800e030 <tcp_input+0x298>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	895a      	ldrh	r2, [r3, #10]
 800de32:	7cbb      	ldrb	r3, [r7, #18]
 800de34:	b29b      	uxth	r3, r3
 800de36:	429a      	cmp	r2, r3
 800de38:	d309      	bcc.n	800de4e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800de3a:	4b7c      	ldr	r3, [pc, #496]	@ (800e02c <tcp_input+0x294>)
 800de3c:	881a      	ldrh	r2, [r3, #0]
 800de3e:	4b7d      	ldr	r3, [pc, #500]	@ (800e034 <tcp_input+0x29c>)
 800de40:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800de42:	7cbb      	ldrb	r3, [r7, #18]
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7fd fe44 	bl	800bad4 <pbuf_remove_header>
 800de4c:	e04e      	b.n	800deec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d105      	bne.n	800de62 <tcp_input+0xca>
 800de56:	4b70      	ldr	r3, [pc, #448]	@ (800e018 <tcp_input+0x280>)
 800de58:	22c2      	movs	r2, #194	@ 0xc2
 800de5a:	4977      	ldr	r1, [pc, #476]	@ (800e038 <tcp_input+0x2a0>)
 800de5c:	4870      	ldr	r0, [pc, #448]	@ (800e020 <tcp_input+0x288>)
 800de5e:	f007 fa47 	bl	80152f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800de62:	2114      	movs	r1, #20
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7fd fe35 	bl	800bad4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	895a      	ldrh	r2, [r3, #10]
 800de6e:	4b71      	ldr	r3, [pc, #452]	@ (800e034 <tcp_input+0x29c>)
 800de70:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800de72:	4b6e      	ldr	r3, [pc, #440]	@ (800e02c <tcp_input+0x294>)
 800de74:	881a      	ldrh	r2, [r3, #0]
 800de76:	4b6f      	ldr	r3, [pc, #444]	@ (800e034 <tcp_input+0x29c>)
 800de78:	881b      	ldrh	r3, [r3, #0]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800de7e:	4b6d      	ldr	r3, [pc, #436]	@ (800e034 <tcp_input+0x29c>)
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	4619      	mov	r1, r3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7fd fe25 	bl	800bad4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	895b      	ldrh	r3, [r3, #10]
 800de90:	8a3a      	ldrh	r2, [r7, #16]
 800de92:	429a      	cmp	r2, r3
 800de94:	f200 836e 	bhi.w	800e574 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	4a64      	ldr	r2, [pc, #400]	@ (800e030 <tcp_input+0x298>)
 800dea0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	8a3a      	ldrh	r2, [r7, #16]
 800dea8:	4611      	mov	r1, r2
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fd fe12 	bl	800bad4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	891a      	ldrh	r2, [r3, #8]
 800deb4:	8a3b      	ldrh	r3, [r7, #16]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	b29a      	uxth	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	895b      	ldrh	r3, [r3, #10]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d005      	beq.n	800ded2 <tcp_input+0x13a>
 800dec6:	4b54      	ldr	r3, [pc, #336]	@ (800e018 <tcp_input+0x280>)
 800dec8:	22df      	movs	r2, #223	@ 0xdf
 800deca:	495c      	ldr	r1, [pc, #368]	@ (800e03c <tcp_input+0x2a4>)
 800decc:	4854      	ldr	r0, [pc, #336]	@ (800e020 <tcp_input+0x288>)
 800dece:	f007 fa0f 	bl	80152f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	891a      	ldrh	r2, [r3, #8]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	891b      	ldrh	r3, [r3, #8]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d005      	beq.n	800deec <tcp_input+0x154>
 800dee0:	4b4d      	ldr	r3, [pc, #308]	@ (800e018 <tcp_input+0x280>)
 800dee2:	22e0      	movs	r2, #224	@ 0xe0
 800dee4:	4956      	ldr	r1, [pc, #344]	@ (800e040 <tcp_input+0x2a8>)
 800dee6:	484e      	ldr	r0, [pc, #312]	@ (800e020 <tcp_input+0x288>)
 800dee8:	f007 fa02 	bl	80152f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800deec:	4b4d      	ldr	r3, [pc, #308]	@ (800e024 <tcp_input+0x28c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	b29b      	uxth	r3, r3
 800def4:	4a4b      	ldr	r2, [pc, #300]	@ (800e024 <tcp_input+0x28c>)
 800def6:	6814      	ldr	r4, [r2, #0]
 800def8:	4618      	mov	r0, r3
 800defa:	f7fc fa05 	bl	800a308 <lwip_htons>
 800defe:	4603      	mov	r3, r0
 800df00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800df02:	4b48      	ldr	r3, [pc, #288]	@ (800e024 <tcp_input+0x28c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	885b      	ldrh	r3, [r3, #2]
 800df08:	b29b      	uxth	r3, r3
 800df0a:	4a46      	ldr	r2, [pc, #280]	@ (800e024 <tcp_input+0x28c>)
 800df0c:	6814      	ldr	r4, [r2, #0]
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fc f9fa 	bl	800a308 <lwip_htons>
 800df14:	4603      	mov	r3, r0
 800df16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800df18:	4b42      	ldr	r3, [pc, #264]	@ (800e024 <tcp_input+0x28c>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	4a41      	ldr	r2, [pc, #260]	@ (800e024 <tcp_input+0x28c>)
 800df20:	6814      	ldr	r4, [r2, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	f7fc fa06 	bl	800a334 <lwip_htonl>
 800df28:	4603      	mov	r3, r0
 800df2a:	6063      	str	r3, [r4, #4]
 800df2c:	6863      	ldr	r3, [r4, #4]
 800df2e:	4a45      	ldr	r2, [pc, #276]	@ (800e044 <tcp_input+0x2ac>)
 800df30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800df32:	4b3c      	ldr	r3, [pc, #240]	@ (800e024 <tcp_input+0x28c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	4a3a      	ldr	r2, [pc, #232]	@ (800e024 <tcp_input+0x28c>)
 800df3a:	6814      	ldr	r4, [r2, #0]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fc f9f9 	bl	800a334 <lwip_htonl>
 800df42:	4603      	mov	r3, r0
 800df44:	60a3      	str	r3, [r4, #8]
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	4a3f      	ldr	r2, [pc, #252]	@ (800e048 <tcp_input+0x2b0>)
 800df4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800df4c:	4b35      	ldr	r3, [pc, #212]	@ (800e024 <tcp_input+0x28c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	89db      	ldrh	r3, [r3, #14]
 800df52:	b29b      	uxth	r3, r3
 800df54:	4a33      	ldr	r2, [pc, #204]	@ (800e024 <tcp_input+0x28c>)
 800df56:	6814      	ldr	r4, [r2, #0]
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fc f9d5 	bl	800a308 <lwip_htons>
 800df5e:	4603      	mov	r3, r0
 800df60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800df62:	4b30      	ldr	r3, [pc, #192]	@ (800e024 <tcp_input+0x28c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	899b      	ldrh	r3, [r3, #12]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fc f9cc 	bl	800a308 <lwip_htons>
 800df70:	4603      	mov	r3, r0
 800df72:	b2db      	uxtb	r3, r3
 800df74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	4b34      	ldr	r3, [pc, #208]	@ (800e04c <tcp_input+0x2b4>)
 800df7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	891a      	ldrh	r2, [r3, #8]
 800df82:	4b33      	ldr	r3, [pc, #204]	@ (800e050 <tcp_input+0x2b8>)
 800df84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800df86:	4b31      	ldr	r3, [pc, #196]	@ (800e04c <tcp_input+0x2b4>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	f003 0303 	and.w	r3, r3, #3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00c      	beq.n	800dfac <tcp_input+0x214>
    tcplen++;
 800df92:	4b2f      	ldr	r3, [pc, #188]	@ (800e050 <tcp_input+0x2b8>)
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	3301      	adds	r3, #1
 800df98:	b29a      	uxth	r2, r3
 800df9a:	4b2d      	ldr	r3, [pc, #180]	@ (800e050 <tcp_input+0x2b8>)
 800df9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	891a      	ldrh	r2, [r3, #8]
 800dfa2:	4b2b      	ldr	r3, [pc, #172]	@ (800e050 <tcp_input+0x2b8>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	f200 82e6 	bhi.w	800e578 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dfac:	2300      	movs	r3, #0
 800dfae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfb0:	4b28      	ldr	r3, [pc, #160]	@ (800e054 <tcp_input+0x2bc>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	61fb      	str	r3, [r7, #28]
 800dfb6:	e09d      	b.n	800e0f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	7d1b      	ldrb	r3, [r3, #20]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d105      	bne.n	800dfcc <tcp_input+0x234>
 800dfc0:	4b15      	ldr	r3, [pc, #84]	@ (800e018 <tcp_input+0x280>)
 800dfc2:	22fb      	movs	r2, #251	@ 0xfb
 800dfc4:	4924      	ldr	r1, [pc, #144]	@ (800e058 <tcp_input+0x2c0>)
 800dfc6:	4816      	ldr	r0, [pc, #88]	@ (800e020 <tcp_input+0x288>)
 800dfc8:	f007 f992 	bl	80152f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	7d1b      	ldrb	r3, [r3, #20]
 800dfd0:	2b0a      	cmp	r3, #10
 800dfd2:	d105      	bne.n	800dfe0 <tcp_input+0x248>
 800dfd4:	4b10      	ldr	r3, [pc, #64]	@ (800e018 <tcp_input+0x280>)
 800dfd6:	22fc      	movs	r2, #252	@ 0xfc
 800dfd8:	4920      	ldr	r1, [pc, #128]	@ (800e05c <tcp_input+0x2c4>)
 800dfda:	4811      	ldr	r0, [pc, #68]	@ (800e020 <tcp_input+0x288>)
 800dfdc:	f007 f988 	bl	80152f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	7d1b      	ldrb	r3, [r3, #20]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d105      	bne.n	800dff4 <tcp_input+0x25c>
 800dfe8:	4b0b      	ldr	r3, [pc, #44]	@ (800e018 <tcp_input+0x280>)
 800dfea:	22fd      	movs	r2, #253	@ 0xfd
 800dfec:	491c      	ldr	r1, [pc, #112]	@ (800e060 <tcp_input+0x2c8>)
 800dfee:	480c      	ldr	r0, [pc, #48]	@ (800e020 <tcp_input+0x288>)
 800dff0:	f007 f97e 	bl	80152f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	7a1b      	ldrb	r3, [r3, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d033      	beq.n	800e064 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	7a1a      	ldrb	r2, [r3, #8]
 800e000:	4b09      	ldr	r3, [pc, #36]	@ (800e028 <tcp_input+0x290>)
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e008:	3301      	adds	r3, #1
 800e00a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d029      	beq.n	800e064 <tcp_input+0x2cc>
      prev = pcb;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	61bb      	str	r3, [r7, #24]
      continue;
 800e014:	e06b      	b.n	800e0ee <tcp_input+0x356>
 800e016:	bf00      	nop
 800e018:	0801835c 	.word	0x0801835c
 800e01c:	08018390 	.word	0x08018390
 800e020:	080183a8 	.word	0x080183a8
 800e024:	200171dc 	.word	0x200171dc
 800e028:	2000f280 	.word	0x2000f280
 800e02c:	200171e0 	.word	0x200171e0
 800e030:	200171e4 	.word	0x200171e4
 800e034:	200171e2 	.word	0x200171e2
 800e038:	080183d0 	.word	0x080183d0
 800e03c:	080183e0 	.word	0x080183e0
 800e040:	080183ec 	.word	0x080183ec
 800e044:	200171ec 	.word	0x200171ec
 800e048:	200171f0 	.word	0x200171f0
 800e04c:	200171f8 	.word	0x200171f8
 800e050:	200171f6 	.word	0x200171f6
 800e054:	200171c0 	.word	0x200171c0
 800e058:	0801840c 	.word	0x0801840c
 800e05c:	08018434 	.word	0x08018434
 800e060:	08018460 	.word	0x08018460
    }

    if (pcb->remote_port == tcphdr->src &&
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	8b1a      	ldrh	r2, [r3, #24]
 800e068:	4b72      	ldr	r3, [pc, #456]	@ (800e234 <tcp_input+0x49c>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	881b      	ldrh	r3, [r3, #0]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	429a      	cmp	r2, r3
 800e072:	d13a      	bne.n	800e0ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	8ada      	ldrh	r2, [r3, #22]
 800e078:	4b6e      	ldr	r3, [pc, #440]	@ (800e234 <tcp_input+0x49c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	885b      	ldrh	r3, [r3, #2]
 800e07e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e080:	429a      	cmp	r2, r3
 800e082:	d132      	bne.n	800e0ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	4b6b      	ldr	r3, [pc, #428]	@ (800e238 <tcp_input+0x4a0>)
 800e08a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d12c      	bne.n	800e0ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	4b68      	ldr	r3, [pc, #416]	@ (800e238 <tcp_input+0x4a0>)
 800e096:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e098:	429a      	cmp	r2, r3
 800e09a:	d126      	bne.n	800e0ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	69fa      	ldr	r2, [r7, #28]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d106      	bne.n	800e0b4 <tcp_input+0x31c>
 800e0a6:	4b65      	ldr	r3, [pc, #404]	@ (800e23c <tcp_input+0x4a4>)
 800e0a8:	f240 120d 	movw	r2, #269	@ 0x10d
 800e0ac:	4964      	ldr	r1, [pc, #400]	@ (800e240 <tcp_input+0x4a8>)
 800e0ae:	4865      	ldr	r0, [pc, #404]	@ (800e244 <tcp_input+0x4ac>)
 800e0b0:	f007 f91e 	bl	80152f0 <iprintf>
      if (prev != NULL) {
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00a      	beq.n	800e0d0 <tcp_input+0x338>
        prev->next = pcb->next;
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	68da      	ldr	r2, [r3, #12]
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e0c2:	4b61      	ldr	r3, [pc, #388]	@ (800e248 <tcp_input+0x4b0>)
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e0ca:	4a5f      	ldr	r2, [pc, #380]	@ (800e248 <tcp_input+0x4b0>)
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	69fa      	ldr	r2, [r7, #28]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d111      	bne.n	800e0fe <tcp_input+0x366>
 800e0da:	4b58      	ldr	r3, [pc, #352]	@ (800e23c <tcp_input+0x4a4>)
 800e0dc:	f240 1215 	movw	r2, #277	@ 0x115
 800e0e0:	495a      	ldr	r1, [pc, #360]	@ (800e24c <tcp_input+0x4b4>)
 800e0e2:	4858      	ldr	r0, [pc, #352]	@ (800e244 <tcp_input+0x4ac>)
 800e0e4:	f007 f904 	bl	80152f0 <iprintf>
      break;
 800e0e8:	e009      	b.n	800e0fe <tcp_input+0x366>
    }
    prev = pcb;
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	61fb      	str	r3, [r7, #28]
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f47f af5e 	bne.w	800dfb8 <tcp_input+0x220>
 800e0fc:	e000      	b.n	800e100 <tcp_input+0x368>
      break;
 800e0fe:	bf00      	nop
  }

  if (pcb == NULL) {
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	2b00      	cmp	r3, #0
 800e104:	f040 80aa 	bne.w	800e25c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e108:	4b51      	ldr	r3, [pc, #324]	@ (800e250 <tcp_input+0x4b8>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	61fb      	str	r3, [r7, #28]
 800e10e:	e03f      	b.n	800e190 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	7d1b      	ldrb	r3, [r3, #20]
 800e114:	2b0a      	cmp	r3, #10
 800e116:	d006      	beq.n	800e126 <tcp_input+0x38e>
 800e118:	4b48      	ldr	r3, [pc, #288]	@ (800e23c <tcp_input+0x4a4>)
 800e11a:	f240 121f 	movw	r2, #287	@ 0x11f
 800e11e:	494d      	ldr	r1, [pc, #308]	@ (800e254 <tcp_input+0x4bc>)
 800e120:	4848      	ldr	r0, [pc, #288]	@ (800e244 <tcp_input+0x4ac>)
 800e122:	f007 f8e5 	bl	80152f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	7a1b      	ldrb	r3, [r3, #8]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d009      	beq.n	800e142 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	7a1a      	ldrb	r2, [r3, #8]
 800e132:	4b41      	ldr	r3, [pc, #260]	@ (800e238 <tcp_input+0x4a0>)
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e13a:	3301      	adds	r3, #1
 800e13c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e13e:	429a      	cmp	r2, r3
 800e140:	d122      	bne.n	800e188 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	8b1a      	ldrh	r2, [r3, #24]
 800e146:	4b3b      	ldr	r3, [pc, #236]	@ (800e234 <tcp_input+0x49c>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	881b      	ldrh	r3, [r3, #0]
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	429a      	cmp	r2, r3
 800e150:	d11b      	bne.n	800e18a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	8ada      	ldrh	r2, [r3, #22]
 800e156:	4b37      	ldr	r3, [pc, #220]	@ (800e234 <tcp_input+0x49c>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	885b      	ldrh	r3, [r3, #2]
 800e15c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e15e:	429a      	cmp	r2, r3
 800e160:	d113      	bne.n	800e18a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	4b34      	ldr	r3, [pc, #208]	@ (800e238 <tcp_input+0x4a0>)
 800e168:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d10d      	bne.n	800e18a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	4b31      	ldr	r3, [pc, #196]	@ (800e238 <tcp_input+0x4a0>)
 800e174:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e176:	429a      	cmp	r2, r3
 800e178:	d107      	bne.n	800e18a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e17a:	69f8      	ldr	r0, [r7, #28]
 800e17c:	f000 fb56 	bl	800e82c <tcp_timewait_input>
        }
        pbuf_free(p);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7fd fd2d 	bl	800bbe0 <pbuf_free>
        return;
 800e186:	e1fd      	b.n	800e584 <tcp_input+0x7ec>
        continue;
 800e188:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	61fb      	str	r3, [r7, #28]
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1bc      	bne.n	800e110 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e196:	2300      	movs	r3, #0
 800e198:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e19a:	4b2f      	ldr	r3, [pc, #188]	@ (800e258 <tcp_input+0x4c0>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	617b      	str	r3, [r7, #20]
 800e1a0:	e02a      	b.n	800e1f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	7a1b      	ldrb	r3, [r3, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00c      	beq.n	800e1c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	7a1a      	ldrb	r2, [r3, #8]
 800e1ae:	4b22      	ldr	r3, [pc, #136]	@ (800e238 <tcp_input+0x4a0>)
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d002      	beq.n	800e1c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	61bb      	str	r3, [r7, #24]
        continue;
 800e1c2:	e016      	b.n	800e1f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	8ada      	ldrh	r2, [r3, #22]
 800e1c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e234 <tcp_input+0x49c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	885b      	ldrh	r3, [r3, #2]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d10c      	bne.n	800e1ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	4b17      	ldr	r3, [pc, #92]	@ (800e238 <tcp_input+0x4a0>)
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d00f      	beq.n	800e200 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00d      	beq.n	800e202 <tcp_input+0x46a>
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d009      	beq.n	800e202 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	617b      	str	r3, [r7, #20]
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1d1      	bne.n	800e1a2 <tcp_input+0x40a>
 800e1fe:	e000      	b.n	800e202 <tcp_input+0x46a>
            break;
 800e200:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d029      	beq.n	800e25c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	68da      	ldr	r2, [r3, #12]
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e216:	4b10      	ldr	r3, [pc, #64]	@ (800e258 <tcp_input+0x4c0>)
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e21e:	4a0e      	ldr	r2, [pc, #56]	@ (800e258 <tcp_input+0x4c0>)
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e224:	6978      	ldr	r0, [r7, #20]
 800e226:	f000 fa03 	bl	800e630 <tcp_listen_input>
      }
      pbuf_free(p);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7fd fcd8 	bl	800bbe0 <pbuf_free>
      return;
 800e230:	e1a8      	b.n	800e584 <tcp_input+0x7ec>
 800e232:	bf00      	nop
 800e234:	200171dc 	.word	0x200171dc
 800e238:	2000f280 	.word	0x2000f280
 800e23c:	0801835c 	.word	0x0801835c
 800e240:	08018488 	.word	0x08018488
 800e244:	080183a8 	.word	0x080183a8
 800e248:	200171c0 	.word	0x200171c0
 800e24c:	080184b4 	.word	0x080184b4
 800e250:	200171c4 	.word	0x200171c4
 800e254:	080184e0 	.word	0x080184e0
 800e258:	200171bc 	.word	0x200171bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f000 8158 	beq.w	800e514 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e264:	4b95      	ldr	r3, [pc, #596]	@ (800e4bc <tcp_input+0x724>)
 800e266:	2200      	movs	r2, #0
 800e268:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	891a      	ldrh	r2, [r3, #8]
 800e26e:	4b93      	ldr	r3, [pc, #588]	@ (800e4bc <tcp_input+0x724>)
 800e270:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e272:	4a92      	ldr	r2, [pc, #584]	@ (800e4bc <tcp_input+0x724>)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e278:	4b91      	ldr	r3, [pc, #580]	@ (800e4c0 <tcp_input+0x728>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a8f      	ldr	r2, [pc, #572]	@ (800e4bc <tcp_input+0x724>)
 800e27e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e280:	4b90      	ldr	r3, [pc, #576]	@ (800e4c4 <tcp_input+0x72c>)
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e286:	4b90      	ldr	r3, [pc, #576]	@ (800e4c8 <tcp_input+0x730>)
 800e288:	2200      	movs	r2, #0
 800e28a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e28c:	4b8f      	ldr	r3, [pc, #572]	@ (800e4cc <tcp_input+0x734>)
 800e28e:	2200      	movs	r2, #0
 800e290:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e292:	4b8f      	ldr	r3, [pc, #572]	@ (800e4d0 <tcp_input+0x738>)
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d006      	beq.n	800e2ac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	7b5b      	ldrb	r3, [r3, #13]
 800e2a2:	f043 0301 	orr.w	r3, r3, #1
 800e2a6:	b2da      	uxtb	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d017      	beq.n	800e2e4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e2b4:	69f8      	ldr	r0, [r7, #28]
 800e2b6:	f7ff f83d 	bl	800d334 <tcp_process_refused_data>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	f113 0f0d 	cmn.w	r3, #13
 800e2c0:	d007      	beq.n	800e2d2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00c      	beq.n	800e2e4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e2ca:	4b82      	ldr	r3, [pc, #520]	@ (800e4d4 <tcp_input+0x73c>)
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d008      	beq.n	800e2e4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f040 80e3 	bne.w	800e4a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e2dc:	69f8      	ldr	r0, [r7, #28]
 800e2de:	f003 fdff 	bl	8011ee0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e2e2:	e0de      	b.n	800e4a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e2e4:	4a7c      	ldr	r2, [pc, #496]	@ (800e4d8 <tcp_input+0x740>)
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e2ea:	69f8      	ldr	r0, [r7, #28]
 800e2ec:	f000 fb18 	bl	800e920 <tcp_process>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e2f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2f8:	f113 0f0d 	cmn.w	r3, #13
 800e2fc:	f000 80d3 	beq.w	800e4a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e300:	4b71      	ldr	r3, [pc, #452]	@ (800e4c8 <tcp_input+0x730>)
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	f003 0308 	and.w	r3, r3, #8
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d015      	beq.n	800e338 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e312:	2b00      	cmp	r3, #0
 800e314:	d008      	beq.n	800e328 <tcp_input+0x590>
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e31c:	69fa      	ldr	r2, [r7, #28]
 800e31e:	6912      	ldr	r2, [r2, #16]
 800e320:	f06f 010d 	mvn.w	r1, #13
 800e324:	4610      	mov	r0, r2
 800e326:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e328:	69f9      	ldr	r1, [r7, #28]
 800e32a:	486c      	ldr	r0, [pc, #432]	@ (800e4dc <tcp_input+0x744>)
 800e32c:	f7ff fbbc 	bl	800daa8 <tcp_pcb_remove>
        tcp_free(pcb);
 800e330:	69f8      	ldr	r0, [r7, #28]
 800e332:	f7fd ff01 	bl	800c138 <tcp_free>
 800e336:	e0da      	b.n	800e4ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e33c:	4b63      	ldr	r3, [pc, #396]	@ (800e4cc <tcp_input+0x734>)
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d01d      	beq.n	800e380 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e344:	4b61      	ldr	r3, [pc, #388]	@ (800e4cc <tcp_input+0x734>)
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00a      	beq.n	800e36a <tcp_input+0x5d2>
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e35a:	69fa      	ldr	r2, [r7, #28]
 800e35c:	6910      	ldr	r0, [r2, #16]
 800e35e:	89fa      	ldrh	r2, [r7, #14]
 800e360:	69f9      	ldr	r1, [r7, #28]
 800e362:	4798      	blx	r3
 800e364:	4603      	mov	r3, r0
 800e366:	74fb      	strb	r3, [r7, #19]
 800e368:	e001      	b.n	800e36e <tcp_input+0x5d6>
 800e36a:	2300      	movs	r3, #0
 800e36c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e36e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e372:	f113 0f0d 	cmn.w	r3, #13
 800e376:	f000 8098 	beq.w	800e4aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e37a:	4b54      	ldr	r3, [pc, #336]	@ (800e4cc <tcp_input+0x734>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e380:	69f8      	ldr	r0, [r7, #28]
 800e382:	f000 f915 	bl	800e5b0 <tcp_input_delayed_close>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f040 8090 	bne.w	800e4ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e38e:	4b4d      	ldr	r3, [pc, #308]	@ (800e4c4 <tcp_input+0x72c>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d041      	beq.n	800e41a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d006      	beq.n	800e3ac <tcp_input+0x614>
 800e39e:	4b50      	ldr	r3, [pc, #320]	@ (800e4e0 <tcp_input+0x748>)
 800e3a0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e3a4:	494f      	ldr	r1, [pc, #316]	@ (800e4e4 <tcp_input+0x74c>)
 800e3a6:	4850      	ldr	r0, [pc, #320]	@ (800e4e8 <tcp_input+0x750>)
 800e3a8:	f006 ffa2 	bl	80152f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	8b5b      	ldrh	r3, [r3, #26]
 800e3b0:	f003 0310 	and.w	r3, r3, #16
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d008      	beq.n	800e3ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e3b8:	4b42      	ldr	r3, [pc, #264]	@ (800e4c4 <tcp_input+0x72c>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7fd fc0f 	bl	800bbe0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e3c2:	69f8      	ldr	r0, [r7, #28]
 800e3c4:	f7fe f9a0 	bl	800c708 <tcp_abort>
            goto aborted;
 800e3c8:	e091      	b.n	800e4ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d00c      	beq.n	800e3ee <tcp_input+0x656>
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	6918      	ldr	r0, [r3, #16]
 800e3de:	4b39      	ldr	r3, [pc, #228]	@ (800e4c4 <tcp_input+0x72c>)
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	69f9      	ldr	r1, [r7, #28]
 800e3e6:	47a0      	blx	r4
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	74fb      	strb	r3, [r7, #19]
 800e3ec:	e008      	b.n	800e400 <tcp_input+0x668>
 800e3ee:	4b35      	ldr	r3, [pc, #212]	@ (800e4c4 <tcp_input+0x72c>)
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	69f9      	ldr	r1, [r7, #28]
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	f7ff f890 	bl	800d51c <tcp_recv_null>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e400:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e404:	f113 0f0d 	cmn.w	r3, #13
 800e408:	d053      	beq.n	800e4b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e40a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d003      	beq.n	800e41a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e412:	4b2c      	ldr	r3, [pc, #176]	@ (800e4c4 <tcp_input+0x72c>)
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e41a:	4b2b      	ldr	r3, [pc, #172]	@ (800e4c8 <tcp_input+0x730>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	f003 0320 	and.w	r3, r3, #32
 800e422:	2b00      	cmp	r3, #0
 800e424:	d030      	beq.n	800e488 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d009      	beq.n	800e442 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e432:	7b5a      	ldrb	r2, [r3, #13]
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e438:	f042 0220 	orr.w	r2, r2, #32
 800e43c:	b2d2      	uxtb	r2, r2
 800e43e:	735a      	strb	r2, [r3, #13]
 800e440:	e022      	b.n	800e488 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e446:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e44a:	d005      	beq.n	800e458 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e450:	3301      	adds	r3, #1
 800e452:	b29a      	uxth	r2, r3
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00b      	beq.n	800e47a <tcp_input+0x6e2>
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	6918      	ldr	r0, [r3, #16]
 800e46c:	2300      	movs	r3, #0
 800e46e:	2200      	movs	r2, #0
 800e470:	69f9      	ldr	r1, [r7, #28]
 800e472:	47a0      	blx	r4
 800e474:	4603      	mov	r3, r0
 800e476:	74fb      	strb	r3, [r7, #19]
 800e478:	e001      	b.n	800e47e <tcp_input+0x6e6>
 800e47a:	2300      	movs	r3, #0
 800e47c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e47e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e482:	f113 0f0d 	cmn.w	r3, #13
 800e486:	d016      	beq.n	800e4b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e488:	4b13      	ldr	r3, [pc, #76]	@ (800e4d8 <tcp_input+0x740>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e48e:	69f8      	ldr	r0, [r7, #28]
 800e490:	f000 f88e 	bl	800e5b0 <tcp_input_delayed_close>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d128      	bne.n	800e4ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e49a:	69f8      	ldr	r0, [r7, #28]
 800e49c:	f002 ff1a 	bl	80112d4 <tcp_output>
 800e4a0:	e025      	b.n	800e4ee <tcp_input+0x756>
        goto aborted;
 800e4a2:	bf00      	nop
 800e4a4:	e023      	b.n	800e4ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e4a6:	bf00      	nop
 800e4a8:	e021      	b.n	800e4ee <tcp_input+0x756>
              goto aborted;
 800e4aa:	bf00      	nop
 800e4ac:	e01f      	b.n	800e4ee <tcp_input+0x756>
          goto aborted;
 800e4ae:	bf00      	nop
 800e4b0:	e01d      	b.n	800e4ee <tcp_input+0x756>
            goto aborted;
 800e4b2:	bf00      	nop
 800e4b4:	e01b      	b.n	800e4ee <tcp_input+0x756>
              goto aborted;
 800e4b6:	bf00      	nop
 800e4b8:	e019      	b.n	800e4ee <tcp_input+0x756>
 800e4ba:	bf00      	nop
 800e4bc:	200171cc 	.word	0x200171cc
 800e4c0:	200171dc 	.word	0x200171dc
 800e4c4:	200171fc 	.word	0x200171fc
 800e4c8:	200171f9 	.word	0x200171f9
 800e4cc:	200171f4 	.word	0x200171f4
 800e4d0:	200171f8 	.word	0x200171f8
 800e4d4:	200171f6 	.word	0x200171f6
 800e4d8:	20017200 	.word	0x20017200
 800e4dc:	200171c0 	.word	0x200171c0
 800e4e0:	0801835c 	.word	0x0801835c
 800e4e4:	08018510 	.word	0x08018510
 800e4e8:	080183a8 	.word	0x080183a8
          goto aborted;
 800e4ec:	bf00      	nop
    tcp_input_pcb = NULL;
 800e4ee:	4b27      	ldr	r3, [pc, #156]	@ (800e58c <tcp_input+0x7f4>)
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e4f4:	4b26      	ldr	r3, [pc, #152]	@ (800e590 <tcp_input+0x7f8>)
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e4fa:	4b26      	ldr	r3, [pc, #152]	@ (800e594 <tcp_input+0x7fc>)
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d03f      	beq.n	800e582 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e502:	4b24      	ldr	r3, [pc, #144]	@ (800e594 <tcp_input+0x7fc>)
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	4618      	mov	r0, r3
 800e508:	f7fd fb6a 	bl	800bbe0 <pbuf_free>
      inseg.p = NULL;
 800e50c:	4b21      	ldr	r3, [pc, #132]	@ (800e594 <tcp_input+0x7fc>)
 800e50e:	2200      	movs	r2, #0
 800e510:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e512:	e036      	b.n	800e582 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e514:	4b20      	ldr	r3, [pc, #128]	@ (800e598 <tcp_input+0x800>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	899b      	ldrh	r3, [r3, #12]
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fb fef3 	bl	800a308 <lwip_htons>
 800e522:	4603      	mov	r3, r0
 800e524:	b2db      	uxtb	r3, r3
 800e526:	f003 0304 	and.w	r3, r3, #4
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d118      	bne.n	800e560 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e52e:	4b1b      	ldr	r3, [pc, #108]	@ (800e59c <tcp_input+0x804>)
 800e530:	6819      	ldr	r1, [r3, #0]
 800e532:	4b1b      	ldr	r3, [pc, #108]	@ (800e5a0 <tcp_input+0x808>)
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	461a      	mov	r2, r3
 800e538:	4b1a      	ldr	r3, [pc, #104]	@ (800e5a4 <tcp_input+0x80c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e53e:	4b16      	ldr	r3, [pc, #88]	@ (800e598 <tcp_input+0x800>)
 800e540:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e542:	885b      	ldrh	r3, [r3, #2]
 800e544:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e546:	4a14      	ldr	r2, [pc, #80]	@ (800e598 <tcp_input+0x800>)
 800e548:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e54a:	8812      	ldrh	r2, [r2, #0]
 800e54c:	b292      	uxth	r2, r2
 800e54e:	9202      	str	r2, [sp, #8]
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	4b15      	ldr	r3, [pc, #84]	@ (800e5a8 <tcp_input+0x810>)
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	4b15      	ldr	r3, [pc, #84]	@ (800e5ac <tcp_input+0x814>)
 800e558:	4602      	mov	r2, r0
 800e55a:	2000      	movs	r0, #0
 800e55c:	f003 fc6e 	bl	8011e3c <tcp_rst>
    pbuf_free(p);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7fd fb3d 	bl	800bbe0 <pbuf_free>
  return;
 800e566:	e00c      	b.n	800e582 <tcp_input+0x7ea>
    goto dropped;
 800e568:	bf00      	nop
 800e56a:	e006      	b.n	800e57a <tcp_input+0x7e2>
    goto dropped;
 800e56c:	bf00      	nop
 800e56e:	e004      	b.n	800e57a <tcp_input+0x7e2>
    goto dropped;
 800e570:	bf00      	nop
 800e572:	e002      	b.n	800e57a <tcp_input+0x7e2>
      goto dropped;
 800e574:	bf00      	nop
 800e576:	e000      	b.n	800e57a <tcp_input+0x7e2>
      goto dropped;
 800e578:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7fd fb30 	bl	800bbe0 <pbuf_free>
 800e580:	e000      	b.n	800e584 <tcp_input+0x7ec>
  return;
 800e582:	bf00      	nop
}
 800e584:	3724      	adds	r7, #36	@ 0x24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd90      	pop	{r4, r7, pc}
 800e58a:	bf00      	nop
 800e58c:	20017200 	.word	0x20017200
 800e590:	200171fc 	.word	0x200171fc
 800e594:	200171cc 	.word	0x200171cc
 800e598:	200171dc 	.word	0x200171dc
 800e59c:	200171f0 	.word	0x200171f0
 800e5a0:	200171f6 	.word	0x200171f6
 800e5a4:	200171ec 	.word	0x200171ec
 800e5a8:	2000f290 	.word	0x2000f290
 800e5ac:	2000f294 	.word	0x2000f294

0800e5b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d106      	bne.n	800e5cc <tcp_input_delayed_close+0x1c>
 800e5be:	4b17      	ldr	r3, [pc, #92]	@ (800e61c <tcp_input_delayed_close+0x6c>)
 800e5c0:	f240 225a 	movw	r2, #602	@ 0x25a
 800e5c4:	4916      	ldr	r1, [pc, #88]	@ (800e620 <tcp_input_delayed_close+0x70>)
 800e5c6:	4817      	ldr	r0, [pc, #92]	@ (800e624 <tcp_input_delayed_close+0x74>)
 800e5c8:	f006 fe92 	bl	80152f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e5cc:	4b16      	ldr	r3, [pc, #88]	@ (800e628 <tcp_input_delayed_close+0x78>)
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	f003 0310 	and.w	r3, r3, #16
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d01c      	beq.n	800e612 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	8b5b      	ldrh	r3, [r3, #26]
 800e5dc:	f003 0310 	and.w	r3, r3, #16
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10d      	bne.n	800e600 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d008      	beq.n	800e600 <tcp_input_delayed_close+0x50>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	6912      	ldr	r2, [r2, #16]
 800e5f8:	f06f 010e 	mvn.w	r1, #14
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e600:	6879      	ldr	r1, [r7, #4]
 800e602:	480a      	ldr	r0, [pc, #40]	@ (800e62c <tcp_input_delayed_close+0x7c>)
 800e604:	f7ff fa50 	bl	800daa8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7fd fd95 	bl	800c138 <tcp_free>
    return 1;
 800e60e:	2301      	movs	r3, #1
 800e610:	e000      	b.n	800e614 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	0801835c 	.word	0x0801835c
 800e620:	0801852c 	.word	0x0801852c
 800e624:	080183a8 	.word	0x080183a8
 800e628:	200171f9 	.word	0x200171f9
 800e62c:	200171c0 	.word	0x200171c0

0800e630 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e630:	b590      	push	{r4, r7, lr}
 800e632:	b08b      	sub	sp, #44	@ 0x2c
 800e634:	af04      	add	r7, sp, #16
 800e636:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e638:	4b6f      	ldr	r3, [pc, #444]	@ (800e7f8 <tcp_listen_input+0x1c8>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	f003 0304 	and.w	r3, r3, #4
 800e640:	2b00      	cmp	r3, #0
 800e642:	f040 80d2 	bne.w	800e7ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d106      	bne.n	800e65a <tcp_listen_input+0x2a>
 800e64c:	4b6b      	ldr	r3, [pc, #428]	@ (800e7fc <tcp_listen_input+0x1cc>)
 800e64e:	f240 2281 	movw	r2, #641	@ 0x281
 800e652:	496b      	ldr	r1, [pc, #428]	@ (800e800 <tcp_listen_input+0x1d0>)
 800e654:	486b      	ldr	r0, [pc, #428]	@ (800e804 <tcp_listen_input+0x1d4>)
 800e656:	f006 fe4b 	bl	80152f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e65a:	4b67      	ldr	r3, [pc, #412]	@ (800e7f8 <tcp_listen_input+0x1c8>)
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	f003 0310 	and.w	r3, r3, #16
 800e662:	2b00      	cmp	r3, #0
 800e664:	d019      	beq.n	800e69a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e666:	4b68      	ldr	r3, [pc, #416]	@ (800e808 <tcp_listen_input+0x1d8>)
 800e668:	6819      	ldr	r1, [r3, #0]
 800e66a:	4b68      	ldr	r3, [pc, #416]	@ (800e80c <tcp_listen_input+0x1dc>)
 800e66c:	881b      	ldrh	r3, [r3, #0]
 800e66e:	461a      	mov	r2, r3
 800e670:	4b67      	ldr	r3, [pc, #412]	@ (800e810 <tcp_listen_input+0x1e0>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e676:	4b67      	ldr	r3, [pc, #412]	@ (800e814 <tcp_listen_input+0x1e4>)
 800e678:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e67a:	885b      	ldrh	r3, [r3, #2]
 800e67c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e67e:	4a65      	ldr	r2, [pc, #404]	@ (800e814 <tcp_listen_input+0x1e4>)
 800e680:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e682:	8812      	ldrh	r2, [r2, #0]
 800e684:	b292      	uxth	r2, r2
 800e686:	9202      	str	r2, [sp, #8]
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	4b63      	ldr	r3, [pc, #396]	@ (800e818 <tcp_listen_input+0x1e8>)
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	4b63      	ldr	r3, [pc, #396]	@ (800e81c <tcp_listen_input+0x1ec>)
 800e690:	4602      	mov	r2, r0
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f003 fbd2 	bl	8011e3c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e698:	e0a9      	b.n	800e7ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e69a:	4b57      	ldr	r3, [pc, #348]	@ (800e7f8 <tcp_listen_input+0x1c8>)
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	f003 0302 	and.w	r3, r3, #2
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f000 80a3 	beq.w	800e7ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	7d5b      	ldrb	r3, [r3, #21]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7ff f859 	bl	800d764 <tcp_alloc>
 800e6b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d111      	bne.n	800e6de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	699b      	ldr	r3, [r3, #24]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00a      	beq.n	800e6d8 <tcp_listen_input+0xa8>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	699b      	ldr	r3, [r3, #24]
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	6910      	ldr	r0, [r2, #16]
 800e6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	4798      	blx	r3
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	73bb      	strb	r3, [r7, #14]
      return;
 800e6d6:	e08b      	b.n	800e7f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6d8:	23f0      	movs	r3, #240	@ 0xf0
 800e6da:	73bb      	strb	r3, [r7, #14]
      return;
 800e6dc:	e088      	b.n	800e7f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e6de:	4b50      	ldr	r3, [pc, #320]	@ (800e820 <tcp_listen_input+0x1f0>)
 800e6e0:	695a      	ldr	r2, [r3, #20]
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e6e6:	4b4e      	ldr	r3, [pc, #312]	@ (800e820 <tcp_listen_input+0x1f0>)
 800e6e8:	691a      	ldr	r2, [r3, #16]
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	8ada      	ldrh	r2, [r3, #22]
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e6f6:	4b47      	ldr	r3, [pc, #284]	@ (800e814 <tcp_listen_input+0x1e4>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	2203      	movs	r2, #3
 800e706:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e708:	4b41      	ldr	r3, [pc, #260]	@ (800e810 <tcp_listen_input+0x1e0>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	1c5a      	adds	r2, r3, #1
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e71a:	6978      	ldr	r0, [r7, #20]
 800e71c:	f7ff fa58 	bl	800dbd0 <tcp_next_iss>
 800e720:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	693a      	ldr	r2, [r7, #16]
 800e726:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	693a      	ldr	r2, [r7, #16]
 800e72c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	693a      	ldr	r2, [r7, #16]
 800e732:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	693a      	ldr	r2, [r7, #16]
 800e738:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e73a:	4b35      	ldr	r3, [pc, #212]	@ (800e810 <tcp_listen_input+0x1e0>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	1e5a      	subs	r2, r3, #1
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	691a      	ldr	r2, [r3, #16]
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	7a5b      	ldrb	r3, [r3, #9]
 800e756:	f003 030c 	and.w	r3, r3, #12
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7a1a      	ldrb	r2, [r3, #8]
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e768:	4b2e      	ldr	r3, [pc, #184]	@ (800e824 <tcp_listen_input+0x1f4>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	60da      	str	r2, [r3, #12]
 800e770:	4a2c      	ldr	r2, [pc, #176]	@ (800e824 <tcp_listen_input+0x1f4>)
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	6013      	str	r3, [r2, #0]
 800e776:	f003 fd23 	bl	80121c0 <tcp_timer_needed>
 800e77a:	4b2b      	ldr	r3, [pc, #172]	@ (800e828 <tcp_listen_input+0x1f8>)
 800e77c:	2201      	movs	r2, #1
 800e77e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e780:	6978      	ldr	r0, [r7, #20]
 800e782:	f001 fd8b 	bl	801029c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e786:	4b23      	ldr	r3, [pc, #140]	@ (800e814 <tcp_listen_input+0x1e4>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	89db      	ldrh	r3, [r3, #14]
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	3304      	adds	r3, #4
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f005 f917 	bl	80139dc <ip4_route>
 800e7ae:	4601      	mov	r1, r0
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	3304      	adds	r3, #4
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f7ff fa30 	bl	800dc1c <tcp_eff_send_mss_netif>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	461a      	mov	r2, r3
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e7c4:	2112      	movs	r1, #18
 800e7c6:	6978      	ldr	r0, [r7, #20]
 800e7c8:	f002 fc96 	bl	80110f8 <tcp_enqueue_flags>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e7d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d004      	beq.n	800e7e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e7d8:	2100      	movs	r1, #0
 800e7da:	6978      	ldr	r0, [r7, #20]
 800e7dc:	f7fd fed6 	bl	800c58c <tcp_abandon>
      return;
 800e7e0:	e006      	b.n	800e7f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e7e2:	6978      	ldr	r0, [r7, #20]
 800e7e4:	f002 fd76 	bl	80112d4 <tcp_output>
  return;
 800e7e8:	e001      	b.n	800e7ee <tcp_listen_input+0x1be>
    return;
 800e7ea:	bf00      	nop
 800e7ec:	e000      	b.n	800e7f0 <tcp_listen_input+0x1c0>
  return;
 800e7ee:	bf00      	nop
}
 800e7f0:	371c      	adds	r7, #28
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd90      	pop	{r4, r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	200171f8 	.word	0x200171f8
 800e7fc:	0801835c 	.word	0x0801835c
 800e800:	08018554 	.word	0x08018554
 800e804:	080183a8 	.word	0x080183a8
 800e808:	200171f0 	.word	0x200171f0
 800e80c:	200171f6 	.word	0x200171f6
 800e810:	200171ec 	.word	0x200171ec
 800e814:	200171dc 	.word	0x200171dc
 800e818:	2000f290 	.word	0x2000f290
 800e81c:	2000f294 	.word	0x2000f294
 800e820:	2000f280 	.word	0x2000f280
 800e824:	200171c0 	.word	0x200171c0
 800e828:	200171c8 	.word	0x200171c8

0800e82c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b086      	sub	sp, #24
 800e830:	af04      	add	r7, sp, #16
 800e832:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e834:	4b2f      	ldr	r3, [pc, #188]	@ (800e8f4 <tcp_timewait_input+0xc8>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	f003 0304 	and.w	r3, r3, #4
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d153      	bne.n	800e8e8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d106      	bne.n	800e854 <tcp_timewait_input+0x28>
 800e846:	4b2c      	ldr	r3, [pc, #176]	@ (800e8f8 <tcp_timewait_input+0xcc>)
 800e848:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e84c:	492b      	ldr	r1, [pc, #172]	@ (800e8fc <tcp_timewait_input+0xd0>)
 800e84e:	482c      	ldr	r0, [pc, #176]	@ (800e900 <tcp_timewait_input+0xd4>)
 800e850:	f006 fd4e 	bl	80152f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e854:	4b27      	ldr	r3, [pc, #156]	@ (800e8f4 <tcp_timewait_input+0xc8>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	f003 0302 	and.w	r3, r3, #2
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d02a      	beq.n	800e8b6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e860:	4b28      	ldr	r3, [pc, #160]	@ (800e904 <tcp_timewait_input+0xd8>)
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	db2d      	blt.n	800e8ca <tcp_timewait_input+0x9e>
 800e86e:	4b25      	ldr	r3, [pc, #148]	@ (800e904 <tcp_timewait_input+0xd8>)
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e876:	6879      	ldr	r1, [r7, #4]
 800e878:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e87a:	440b      	add	r3, r1
 800e87c:	1ad3      	subs	r3, r2, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	dc23      	bgt.n	800e8ca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e882:	4b21      	ldr	r3, [pc, #132]	@ (800e908 <tcp_timewait_input+0xdc>)
 800e884:	6819      	ldr	r1, [r3, #0]
 800e886:	4b21      	ldr	r3, [pc, #132]	@ (800e90c <tcp_timewait_input+0xe0>)
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	461a      	mov	r2, r3
 800e88c:	4b1d      	ldr	r3, [pc, #116]	@ (800e904 <tcp_timewait_input+0xd8>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e892:	4b1f      	ldr	r3, [pc, #124]	@ (800e910 <tcp_timewait_input+0xe4>)
 800e894:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e896:	885b      	ldrh	r3, [r3, #2]
 800e898:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e89a:	4a1d      	ldr	r2, [pc, #116]	@ (800e910 <tcp_timewait_input+0xe4>)
 800e89c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e89e:	8812      	ldrh	r2, [r2, #0]
 800e8a0:	b292      	uxth	r2, r2
 800e8a2:	9202      	str	r2, [sp, #8]
 800e8a4:	9301      	str	r3, [sp, #4]
 800e8a6:	4b1b      	ldr	r3, [pc, #108]	@ (800e914 <tcp_timewait_input+0xe8>)
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	4b1b      	ldr	r3, [pc, #108]	@ (800e918 <tcp_timewait_input+0xec>)
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f003 fac4 	bl	8011e3c <tcp_rst>
      return;
 800e8b4:	e01b      	b.n	800e8ee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e8f4 <tcp_timewait_input+0xc8>)
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d003      	beq.n	800e8ca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e8c2:	4b16      	ldr	r3, [pc, #88]	@ (800e91c <tcp_timewait_input+0xf0>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e8ca:	4b10      	ldr	r3, [pc, #64]	@ (800e90c <tcp_timewait_input+0xe0>)
 800e8cc:	881b      	ldrh	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00c      	beq.n	800e8ec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	8b5b      	ldrh	r3, [r3, #26]
 800e8d6:	f043 0302 	orr.w	r3, r3, #2
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f002 fcf7 	bl	80112d4 <tcp_output>
  }
  return;
 800e8e6:	e001      	b.n	800e8ec <tcp_timewait_input+0xc0>
    return;
 800e8e8:	bf00      	nop
 800e8ea:	e000      	b.n	800e8ee <tcp_timewait_input+0xc2>
  return;
 800e8ec:	bf00      	nop
}
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	200171f8 	.word	0x200171f8
 800e8f8:	0801835c 	.word	0x0801835c
 800e8fc:	08018574 	.word	0x08018574
 800e900:	080183a8 	.word	0x080183a8
 800e904:	200171ec 	.word	0x200171ec
 800e908:	200171f0 	.word	0x200171f0
 800e90c:	200171f6 	.word	0x200171f6
 800e910:	200171dc 	.word	0x200171dc
 800e914:	2000f290 	.word	0x2000f290
 800e918:	2000f294 	.word	0x2000f294
 800e91c:	200171b4 	.word	0x200171b4

0800e920 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e920:	b590      	push	{r4, r7, lr}
 800e922:	b08d      	sub	sp, #52	@ 0x34
 800e924:	af04      	add	r7, sp, #16
 800e926:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e928:	2300      	movs	r3, #0
 800e92a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e92c:	2300      	movs	r3, #0
 800e92e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d106      	bne.n	800e944 <tcp_process+0x24>
 800e936:	4b9d      	ldr	r3, [pc, #628]	@ (800ebac <tcp_process+0x28c>)
 800e938:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e93c:	499c      	ldr	r1, [pc, #624]	@ (800ebb0 <tcp_process+0x290>)
 800e93e:	489d      	ldr	r0, [pc, #628]	@ (800ebb4 <tcp_process+0x294>)
 800e940:	f006 fcd6 	bl	80152f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e944:	4b9c      	ldr	r3, [pc, #624]	@ (800ebb8 <tcp_process+0x298>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	f003 0304 	and.w	r3, r3, #4
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d04e      	beq.n	800e9ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	7d1b      	ldrb	r3, [r3, #20]
 800e954:	2b02      	cmp	r3, #2
 800e956:	d108      	bne.n	800e96a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e95c:	4b97      	ldr	r3, [pc, #604]	@ (800ebbc <tcp_process+0x29c>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	429a      	cmp	r2, r3
 800e962:	d123      	bne.n	800e9ac <tcp_process+0x8c>
        acceptable = 1;
 800e964:	2301      	movs	r3, #1
 800e966:	76fb      	strb	r3, [r7, #27]
 800e968:	e020      	b.n	800e9ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e96e:	4b94      	ldr	r3, [pc, #592]	@ (800ebc0 <tcp_process+0x2a0>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	429a      	cmp	r2, r3
 800e974:	d102      	bne.n	800e97c <tcp_process+0x5c>
        acceptable = 1;
 800e976:	2301      	movs	r3, #1
 800e978:	76fb      	strb	r3, [r7, #27]
 800e97a:	e017      	b.n	800e9ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e97c:	4b90      	ldr	r3, [pc, #576]	@ (800ebc0 <tcp_process+0x2a0>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	2b00      	cmp	r3, #0
 800e988:	db10      	blt.n	800e9ac <tcp_process+0x8c>
 800e98a:	4b8d      	ldr	r3, [pc, #564]	@ (800ebc0 <tcp_process+0x2a0>)
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e992:	6879      	ldr	r1, [r7, #4]
 800e994:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e996:	440b      	add	r3, r1
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	dc06      	bgt.n	800e9ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	8b5b      	ldrh	r3, [r3, #26]
 800e9a2:	f043 0302 	orr.w	r3, r3, #2
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e9ac:	7efb      	ldrb	r3, [r7, #27]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d01b      	beq.n	800e9ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	7d1b      	ldrb	r3, [r3, #20]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <tcp_process+0xa8>
 800e9ba:	4b7c      	ldr	r3, [pc, #496]	@ (800ebac <tcp_process+0x28c>)
 800e9bc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e9c0:	4980      	ldr	r1, [pc, #512]	@ (800ebc4 <tcp_process+0x2a4>)
 800e9c2:	487c      	ldr	r0, [pc, #496]	@ (800ebb4 <tcp_process+0x294>)
 800e9c4:	f006 fc94 	bl	80152f0 <iprintf>
      recv_flags |= TF_RESET;
 800e9c8:	4b7f      	ldr	r3, [pc, #508]	@ (800ebc8 <tcp_process+0x2a8>)
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	f043 0308 	orr.w	r3, r3, #8
 800e9d0:	b2da      	uxtb	r2, r3
 800e9d2:	4b7d      	ldr	r3, [pc, #500]	@ (800ebc8 <tcp_process+0x2a8>)
 800e9d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	8b5b      	ldrh	r3, [r3, #26]
 800e9da:	f023 0301 	bic.w	r3, r3, #1
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e9e4:	f06f 030d 	mvn.w	r3, #13
 800e9e8:	e37a      	b.n	800f0e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e378      	b.n	800f0e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e9ee:	4b72      	ldr	r3, [pc, #456]	@ (800ebb8 <tcp_process+0x298>)
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	f003 0302 	and.w	r3, r3, #2
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d010      	beq.n	800ea1c <tcp_process+0xfc>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	7d1b      	ldrb	r3, [r3, #20]
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d00c      	beq.n	800ea1c <tcp_process+0xfc>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	7d1b      	ldrb	r3, [r3, #20]
 800ea06:	2b03      	cmp	r3, #3
 800ea08:	d008      	beq.n	800ea1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	8b5b      	ldrh	r3, [r3, #26]
 800ea0e:	f043 0302 	orr.w	r3, r3, #2
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	e361      	b.n	800f0e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	8b5b      	ldrh	r3, [r3, #26]
 800ea20:	f003 0310 	and.w	r3, r3, #16
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d103      	bne.n	800ea30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ea28:	4b68      	ldr	r3, [pc, #416]	@ (800ebcc <tcp_process+0x2ac>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f001 fc2b 	bl	801029c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	7d1b      	ldrb	r3, [r3, #20]
 800ea4a:	3b02      	subs	r3, #2
 800ea4c:	2b07      	cmp	r3, #7
 800ea4e:	f200 8337 	bhi.w	800f0c0 <tcp_process+0x7a0>
 800ea52:	a201      	add	r2, pc, #4	@ (adr r2, 800ea58 <tcp_process+0x138>)
 800ea54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea58:	0800ea79 	.word	0x0800ea79
 800ea5c:	0800eca9 	.word	0x0800eca9
 800ea60:	0800ee21 	.word	0x0800ee21
 800ea64:	0800ee4b 	.word	0x0800ee4b
 800ea68:	0800ef6f 	.word	0x0800ef6f
 800ea6c:	0800ee21 	.word	0x0800ee21
 800ea70:	0800effb 	.word	0x0800effb
 800ea74:	0800f08b 	.word	0x0800f08b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ea78:	4b4f      	ldr	r3, [pc, #316]	@ (800ebb8 <tcp_process+0x298>)
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	f003 0310 	and.w	r3, r3, #16
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f000 80e4 	beq.w	800ec4e <tcp_process+0x32e>
 800ea86:	4b4c      	ldr	r3, [pc, #304]	@ (800ebb8 <tcp_process+0x298>)
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f000 80dd 	beq.w	800ec4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	4b48      	ldr	r3, [pc, #288]	@ (800ebbc <tcp_process+0x29c>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	f040 80d5 	bne.w	800ec4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eaa4:	4b46      	ldr	r3, [pc, #280]	@ (800ebc0 <tcp_process+0x2a0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800eab6:	4b41      	ldr	r3, [pc, #260]	@ (800ebbc <tcp_process+0x29c>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800eabe:	4b44      	ldr	r3, [pc, #272]	@ (800ebd0 <tcp_process+0x2b0>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	89db      	ldrh	r3, [r3, #14]
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ead8:	4b39      	ldr	r3, [pc, #228]	@ (800ebc0 <tcp_process+0x2a0>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	1e5a      	subs	r2, r3, #1
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2204      	movs	r2, #4
 800eae6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	3304      	adds	r3, #4
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f004 ff73 	bl	80139dc <ip4_route>
 800eaf6:	4601      	mov	r1, r0
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	3304      	adds	r3, #4
 800eafc:	461a      	mov	r2, r3
 800eafe:	4620      	mov	r0, r4
 800eb00:	f7ff f88c 	bl	800dc1c <tcp_eff_send_mss_netif>
 800eb04:	4603      	mov	r3, r0
 800eb06:	461a      	mov	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb10:	009a      	lsls	r2, r3, #2
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb16:	005b      	lsls	r3, r3, #1
 800eb18:	f241 111c 	movw	r1, #4380	@ 0x111c
 800eb1c:	428b      	cmp	r3, r1
 800eb1e:	bf38      	it	cc
 800eb20:	460b      	movcc	r3, r1
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d204      	bcs.n	800eb30 <tcp_process+0x210>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	e00d      	b.n	800eb4c <tcp_process+0x22c>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	f241 121c 	movw	r2, #4380	@ 0x111c
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d904      	bls.n	800eb48 <tcp_process+0x228>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb42:	005b      	lsls	r3, r3, #1
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	e001      	b.n	800eb4c <tcp_process+0x22c>
 800eb48:	f241 131c 	movw	r3, #4380	@ 0x111c
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d106      	bne.n	800eb6a <tcp_process+0x24a>
 800eb5c:	4b13      	ldr	r3, [pc, #76]	@ (800ebac <tcp_process+0x28c>)
 800eb5e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800eb62:	491c      	ldr	r1, [pc, #112]	@ (800ebd4 <tcp_process+0x2b4>)
 800eb64:	4813      	ldr	r0, [pc, #76]	@ (800ebb4 <tcp_process+0x294>)
 800eb66:	f006 fbc3 	bl	80152f0 <iprintf>
        --pcb->snd_queuelen;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eb70:	3b01      	subs	r3, #1
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d12a      	bne.n	800ebdc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d106      	bne.n	800eba0 <tcp_process+0x280>
 800eb92:	4b06      	ldr	r3, [pc, #24]	@ (800ebac <tcp_process+0x28c>)
 800eb94:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800eb98:	490f      	ldr	r1, [pc, #60]	@ (800ebd8 <tcp_process+0x2b8>)
 800eb9a:	4806      	ldr	r0, [pc, #24]	@ (800ebb4 <tcp_process+0x294>)
 800eb9c:	f006 fba8 	bl	80152f0 <iprintf>
          pcb->unsent = rseg->next;
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800eba8:	e01c      	b.n	800ebe4 <tcp_process+0x2c4>
 800ebaa:	bf00      	nop
 800ebac:	0801835c 	.word	0x0801835c
 800ebb0:	08018594 	.word	0x08018594
 800ebb4:	080183a8 	.word	0x080183a8
 800ebb8:	200171f8 	.word	0x200171f8
 800ebbc:	200171f0 	.word	0x200171f0
 800ebc0:	200171ec 	.word	0x200171ec
 800ebc4:	080185b0 	.word	0x080185b0
 800ebc8:	200171f9 	.word	0x200171f9
 800ebcc:	200171b4 	.word	0x200171b4
 800ebd0:	200171dc 	.word	0x200171dc
 800ebd4:	080185d0 	.word	0x080185d0
 800ebd8:	080185e8 	.word	0x080185e8
        } else {
          pcb->unacked = rseg->next;
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ebe4:	69f8      	ldr	r0, [r7, #28]
 800ebe6:	f7fe fc36 	bl	800d456 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d104      	bne.n	800ebfc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ebf8:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ebfa:	e006      	b.n	800ec0a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00a      	beq.n	800ec2a <tcp_process+0x30a>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	6910      	ldr	r0, [r2, #16]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	6879      	ldr	r1, [r7, #4]
 800ec22:	4798      	blx	r3
 800ec24:	4603      	mov	r3, r0
 800ec26:	76bb      	strb	r3, [r7, #26]
 800ec28:	e001      	b.n	800ec2e <tcp_process+0x30e>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ec2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec32:	f113 0f0d 	cmn.w	r3, #13
 800ec36:	d102      	bne.n	800ec3e <tcp_process+0x31e>
          return ERR_ABRT;
 800ec38:	f06f 030c 	mvn.w	r3, #12
 800ec3c:	e250      	b.n	800f0e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	8b5b      	ldrh	r3, [r3, #26]
 800ec42:	f043 0302 	orr.w	r3, r3, #2
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ec4c:	e23a      	b.n	800f0c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ec4e:	4b98      	ldr	r3, [pc, #608]	@ (800eeb0 <tcp_process+0x590>)
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	f003 0310 	and.w	r3, r3, #16
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 8234 	beq.w	800f0c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec5c:	4b95      	ldr	r3, [pc, #596]	@ (800eeb4 <tcp_process+0x594>)
 800ec5e:	6819      	ldr	r1, [r3, #0]
 800ec60:	4b95      	ldr	r3, [pc, #596]	@ (800eeb8 <tcp_process+0x598>)
 800ec62:	881b      	ldrh	r3, [r3, #0]
 800ec64:	461a      	mov	r2, r3
 800ec66:	4b95      	ldr	r3, [pc, #596]	@ (800eebc <tcp_process+0x59c>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec6c:	4b94      	ldr	r3, [pc, #592]	@ (800eec0 <tcp_process+0x5a0>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec70:	885b      	ldrh	r3, [r3, #2]
 800ec72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec74:	4a92      	ldr	r2, [pc, #584]	@ (800eec0 <tcp_process+0x5a0>)
 800ec76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec78:	8812      	ldrh	r2, [r2, #0]
 800ec7a:	b292      	uxth	r2, r2
 800ec7c:	9202      	str	r2, [sp, #8]
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	4b90      	ldr	r3, [pc, #576]	@ (800eec4 <tcp_process+0x5a4>)
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	4b90      	ldr	r3, [pc, #576]	@ (800eec8 <tcp_process+0x5a8>)
 800ec86:	4602      	mov	r2, r0
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f003 f8d7 	bl	8011e3c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec94:	2b05      	cmp	r3, #5
 800ec96:	f200 8215 	bhi.w	800f0c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f002 fea3 	bl	80119ec <tcp_rexmit_rto>
      break;
 800eca6:	e20d      	b.n	800f0c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800eca8:	4b81      	ldr	r3, [pc, #516]	@ (800eeb0 <tcp_process+0x590>)
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	f003 0310 	and.w	r3, r3, #16
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f000 80a1 	beq.w	800edf8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ecb6:	4b7f      	ldr	r3, [pc, #508]	@ (800eeb4 <tcp_process+0x594>)
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	db7e      	blt.n	800edc4 <tcp_process+0x4a4>
 800ecc6:	4b7b      	ldr	r3, [pc, #492]	@ (800eeb4 <tcp_process+0x594>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	dc77      	bgt.n	800edc4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2204      	movs	r2, #4
 800ecd8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d102      	bne.n	800ece8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ece2:	23fa      	movs	r3, #250	@ 0xfa
 800ece4:	76bb      	strb	r3, [r7, #26]
 800ece6:	e01d      	b.n	800ed24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ecec:	699b      	ldr	r3, [r3, #24]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d106      	bne.n	800ed00 <tcp_process+0x3e0>
 800ecf2:	4b76      	ldr	r3, [pc, #472]	@ (800eecc <tcp_process+0x5ac>)
 800ecf4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ecf8:	4975      	ldr	r1, [pc, #468]	@ (800eed0 <tcp_process+0x5b0>)
 800ecfa:	4876      	ldr	r0, [pc, #472]	@ (800eed4 <tcp_process+0x5b4>)
 800ecfc:	f006 faf8 	bl	80152f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <tcp_process+0x400>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed0e:	699b      	ldr	r3, [r3, #24]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	6910      	ldr	r0, [r2, #16]
 800ed14:	2200      	movs	r2, #0
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	4798      	blx	r3
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	76bb      	strb	r3, [r7, #26]
 800ed1e:	e001      	b.n	800ed24 <tcp_process+0x404>
 800ed20:	23f0      	movs	r3, #240	@ 0xf0
 800ed22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ed24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00a      	beq.n	800ed42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ed2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed30:	f113 0f0d 	cmn.w	r3, #13
 800ed34:	d002      	beq.n	800ed3c <tcp_process+0x41c>
              tcp_abort(pcb);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f7fd fce6 	bl	800c708 <tcp_abort>
            }
            return ERR_ABRT;
 800ed3c:	f06f 030c 	mvn.w	r3, #12
 800ed40:	e1ce      	b.n	800f0e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fae0 	bl	800f308 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ed48:	4b63      	ldr	r3, [pc, #396]	@ (800eed8 <tcp_process+0x5b8>)
 800ed4a:	881b      	ldrh	r3, [r3, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d005      	beq.n	800ed5c <tcp_process+0x43c>
            recv_acked--;
 800ed50:	4b61      	ldr	r3, [pc, #388]	@ (800eed8 <tcp_process+0x5b8>)
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	3b01      	subs	r3, #1
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	4b5f      	ldr	r3, [pc, #380]	@ (800eed8 <tcp_process+0x5b8>)
 800ed5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed60:	009a      	lsls	r2, r3, #2
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed66:	005b      	lsls	r3, r3, #1
 800ed68:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ed6c:	428b      	cmp	r3, r1
 800ed6e:	bf38      	it	cc
 800ed70:	460b      	movcc	r3, r1
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d204      	bcs.n	800ed80 <tcp_process+0x460>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	e00d      	b.n	800ed9c <tcp_process+0x47c>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d904      	bls.n	800ed98 <tcp_process+0x478>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed92:	005b      	lsls	r3, r3, #1
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	e001      	b.n	800ed9c <tcp_process+0x47c>
 800ed98:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eda2:	4b4e      	ldr	r3, [pc, #312]	@ (800eedc <tcp_process+0x5bc>)
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	f003 0320 	and.w	r3, r3, #32
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d037      	beq.n	800ee1e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	8b5b      	ldrh	r3, [r3, #26]
 800edb2:	f043 0302 	orr.w	r3, r3, #2
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2207      	movs	r2, #7
 800edc0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800edc2:	e02c      	b.n	800ee1e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edc4:	4b3b      	ldr	r3, [pc, #236]	@ (800eeb4 <tcp_process+0x594>)
 800edc6:	6819      	ldr	r1, [r3, #0]
 800edc8:	4b3b      	ldr	r3, [pc, #236]	@ (800eeb8 <tcp_process+0x598>)
 800edca:	881b      	ldrh	r3, [r3, #0]
 800edcc:	461a      	mov	r2, r3
 800edce:	4b3b      	ldr	r3, [pc, #236]	@ (800eebc <tcp_process+0x59c>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edd4:	4b3a      	ldr	r3, [pc, #232]	@ (800eec0 <tcp_process+0x5a0>)
 800edd6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edd8:	885b      	ldrh	r3, [r3, #2]
 800edda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eddc:	4a38      	ldr	r2, [pc, #224]	@ (800eec0 <tcp_process+0x5a0>)
 800edde:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ede0:	8812      	ldrh	r2, [r2, #0]
 800ede2:	b292      	uxth	r2, r2
 800ede4:	9202      	str	r2, [sp, #8]
 800ede6:	9301      	str	r3, [sp, #4]
 800ede8:	4b36      	ldr	r3, [pc, #216]	@ (800eec4 <tcp_process+0x5a4>)
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	4b36      	ldr	r3, [pc, #216]	@ (800eec8 <tcp_process+0x5a8>)
 800edee:	4602      	mov	r2, r0
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f003 f823 	bl	8011e3c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800edf6:	e167      	b.n	800f0c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800edf8:	4b2d      	ldr	r3, [pc, #180]	@ (800eeb0 <tcp_process+0x590>)
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	f003 0302 	and.w	r3, r3, #2
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 8161 	beq.w	800f0c8 <tcp_process+0x7a8>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee0a:	1e5a      	subs	r2, r3, #1
 800ee0c:	4b2b      	ldr	r3, [pc, #172]	@ (800eebc <tcp_process+0x59c>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	f040 8159 	bne.w	800f0c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f002 fe0a 	bl	8011a30 <tcp_rexmit>
      break;
 800ee1c:	e154      	b.n	800f0c8 <tcp_process+0x7a8>
 800ee1e:	e153      	b.n	800f0c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f000 fa71 	bl	800f308 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee26:	4b2d      	ldr	r3, [pc, #180]	@ (800eedc <tcp_process+0x5bc>)
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	f003 0320 	and.w	r3, r3, #32
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f000 814c 	beq.w	800f0cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	8b5b      	ldrh	r3, [r3, #26]
 800ee38:	f043 0302 	orr.w	r3, r3, #2
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2207      	movs	r2, #7
 800ee46:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee48:	e140      	b.n	800f0cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 fa5c 	bl	800f308 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ee50:	4b22      	ldr	r3, [pc, #136]	@ (800eedc <tcp_process+0x5bc>)
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 0320 	and.w	r3, r3, #32
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d071      	beq.n	800ef40 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee5c:	4b14      	ldr	r3, [pc, #80]	@ (800eeb0 <tcp_process+0x590>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	f003 0310 	and.w	r3, r3, #16
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d060      	beq.n	800ef2a <tcp_process+0x60a>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee6c:	4b11      	ldr	r3, [pc, #68]	@ (800eeb4 <tcp_process+0x594>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d15a      	bne.n	800ef2a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d156      	bne.n	800ef2a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	8b5b      	ldrh	r3, [r3, #26]
 800ee80:	f043 0302 	orr.w	r3, r3, #2
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7fe fdbc 	bl	800da08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ee90:	4b13      	ldr	r3, [pc, #76]	@ (800eee0 <tcp_process+0x5c0>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d105      	bne.n	800eea6 <tcp_process+0x586>
 800ee9a:	4b11      	ldr	r3, [pc, #68]	@ (800eee0 <tcp_process+0x5c0>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68db      	ldr	r3, [r3, #12]
 800eea0:	4a0f      	ldr	r2, [pc, #60]	@ (800eee0 <tcp_process+0x5c0>)
 800eea2:	6013      	str	r3, [r2, #0]
 800eea4:	e02e      	b.n	800ef04 <tcp_process+0x5e4>
 800eea6:	4b0e      	ldr	r3, [pc, #56]	@ (800eee0 <tcp_process+0x5c0>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	617b      	str	r3, [r7, #20]
 800eeac:	e027      	b.n	800eefe <tcp_process+0x5de>
 800eeae:	bf00      	nop
 800eeb0:	200171f8 	.word	0x200171f8
 800eeb4:	200171f0 	.word	0x200171f0
 800eeb8:	200171f6 	.word	0x200171f6
 800eebc:	200171ec 	.word	0x200171ec
 800eec0:	200171dc 	.word	0x200171dc
 800eec4:	2000f290 	.word	0x2000f290
 800eec8:	2000f294 	.word	0x2000f294
 800eecc:	0801835c 	.word	0x0801835c
 800eed0:	080185fc 	.word	0x080185fc
 800eed4:	080183a8 	.word	0x080183a8
 800eed8:	200171f4 	.word	0x200171f4
 800eedc:	200171f9 	.word	0x200171f9
 800eee0:	200171c0 	.word	0x200171c0
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d104      	bne.n	800eef8 <tcp_process+0x5d8>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68da      	ldr	r2, [r3, #12]
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	60da      	str	r2, [r3, #12]
 800eef6:	e005      	b.n	800ef04 <tcp_process+0x5e4>
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	617b      	str	r3, [r7, #20]
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d1ef      	bne.n	800eee4 <tcp_process+0x5c4>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	60da      	str	r2, [r3, #12]
 800ef0a:	4b77      	ldr	r3, [pc, #476]	@ (800f0e8 <tcp_process+0x7c8>)
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	220a      	movs	r2, #10
 800ef14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ef16:	4b75      	ldr	r3, [pc, #468]	@ (800f0ec <tcp_process+0x7cc>)
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	60da      	str	r2, [r3, #12]
 800ef1e:	4a73      	ldr	r2, [pc, #460]	@ (800f0ec <tcp_process+0x7cc>)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6013      	str	r3, [r2, #0]
 800ef24:	f003 f94c 	bl	80121c0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ef28:	e0d2      	b.n	800f0d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	8b5b      	ldrh	r3, [r3, #26]
 800ef2e:	f043 0302 	orr.w	r3, r3, #2
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2208      	movs	r2, #8
 800ef3c:	751a      	strb	r2, [r3, #20]
      break;
 800ef3e:	e0c7      	b.n	800f0d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef40:	4b6b      	ldr	r3, [pc, #428]	@ (800f0f0 <tcp_process+0x7d0>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	f003 0310 	and.w	r3, r3, #16
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f000 80c1 	beq.w	800f0d0 <tcp_process+0x7b0>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef52:	4b68      	ldr	r3, [pc, #416]	@ (800f0f4 <tcp_process+0x7d4>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	f040 80ba 	bne.w	800f0d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f040 80b5 	bne.w	800f0d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2206      	movs	r2, #6
 800ef6a:	751a      	strb	r2, [r3, #20]
      break;
 800ef6c:	e0b0      	b.n	800f0d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f9ca 	bl	800f308 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef74:	4b60      	ldr	r3, [pc, #384]	@ (800f0f8 <tcp_process+0x7d8>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	f003 0320 	and.w	r3, r3, #32
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f000 80a9 	beq.w	800f0d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	8b5b      	ldrh	r3, [r3, #26]
 800ef86:	f043 0302 	orr.w	r3, r3, #2
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7fe fd39 	bl	800da08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef96:	4b59      	ldr	r3, [pc, #356]	@ (800f0fc <tcp_process+0x7dc>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d105      	bne.n	800efac <tcp_process+0x68c>
 800efa0:	4b56      	ldr	r3, [pc, #344]	@ (800f0fc <tcp_process+0x7dc>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	4a55      	ldr	r2, [pc, #340]	@ (800f0fc <tcp_process+0x7dc>)
 800efa8:	6013      	str	r3, [r2, #0]
 800efaa:	e013      	b.n	800efd4 <tcp_process+0x6b4>
 800efac:	4b53      	ldr	r3, [pc, #332]	@ (800f0fc <tcp_process+0x7dc>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	613b      	str	r3, [r7, #16]
 800efb2:	e00c      	b.n	800efce <tcp_process+0x6ae>
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d104      	bne.n	800efc8 <tcp_process+0x6a8>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	68da      	ldr	r2, [r3, #12]
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	60da      	str	r2, [r3, #12]
 800efc6:	e005      	b.n	800efd4 <tcp_process+0x6b4>
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	613b      	str	r3, [r7, #16]
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d1ef      	bne.n	800efb4 <tcp_process+0x694>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	60da      	str	r2, [r3, #12]
 800efda:	4b43      	ldr	r3, [pc, #268]	@ (800f0e8 <tcp_process+0x7c8>)
 800efdc:	2201      	movs	r2, #1
 800efde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	220a      	movs	r2, #10
 800efe4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efe6:	4b41      	ldr	r3, [pc, #260]	@ (800f0ec <tcp_process+0x7cc>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	60da      	str	r2, [r3, #12]
 800efee:	4a3f      	ldr	r2, [pc, #252]	@ (800f0ec <tcp_process+0x7cc>)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6013      	str	r3, [r2, #0]
 800eff4:	f003 f8e4 	bl	80121c0 <tcp_timer_needed>
      }
      break;
 800eff8:	e06c      	b.n	800f0d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 f984 	bl	800f308 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f000:	4b3b      	ldr	r3, [pc, #236]	@ (800f0f0 <tcp_process+0x7d0>)
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	f003 0310 	and.w	r3, r3, #16
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d065      	beq.n	800f0d8 <tcp_process+0x7b8>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f010:	4b38      	ldr	r3, [pc, #224]	@ (800f0f4 <tcp_process+0x7d4>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	429a      	cmp	r2, r3
 800f016:	d15f      	bne.n	800f0d8 <tcp_process+0x7b8>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d15b      	bne.n	800f0d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f7fe fcf1 	bl	800da08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f026:	4b35      	ldr	r3, [pc, #212]	@ (800f0fc <tcp_process+0x7dc>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d105      	bne.n	800f03c <tcp_process+0x71c>
 800f030:	4b32      	ldr	r3, [pc, #200]	@ (800f0fc <tcp_process+0x7dc>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	4a31      	ldr	r2, [pc, #196]	@ (800f0fc <tcp_process+0x7dc>)
 800f038:	6013      	str	r3, [r2, #0]
 800f03a:	e013      	b.n	800f064 <tcp_process+0x744>
 800f03c:	4b2f      	ldr	r3, [pc, #188]	@ (800f0fc <tcp_process+0x7dc>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	60fb      	str	r3, [r7, #12]
 800f042:	e00c      	b.n	800f05e <tcp_process+0x73e>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d104      	bne.n	800f058 <tcp_process+0x738>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	68da      	ldr	r2, [r3, #12]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	60da      	str	r2, [r3, #12]
 800f056:	e005      	b.n	800f064 <tcp_process+0x744>
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	60fb      	str	r3, [r7, #12]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d1ef      	bne.n	800f044 <tcp_process+0x724>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2200      	movs	r2, #0
 800f068:	60da      	str	r2, [r3, #12]
 800f06a:	4b1f      	ldr	r3, [pc, #124]	@ (800f0e8 <tcp_process+0x7c8>)
 800f06c:	2201      	movs	r2, #1
 800f06e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	220a      	movs	r2, #10
 800f074:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f076:	4b1d      	ldr	r3, [pc, #116]	@ (800f0ec <tcp_process+0x7cc>)
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	60da      	str	r2, [r3, #12]
 800f07e:	4a1b      	ldr	r2, [pc, #108]	@ (800f0ec <tcp_process+0x7cc>)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6013      	str	r3, [r2, #0]
 800f084:	f003 f89c 	bl	80121c0 <tcp_timer_needed>
      }
      break;
 800f088:	e026      	b.n	800f0d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f93c 	bl	800f308 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f090:	4b17      	ldr	r3, [pc, #92]	@ (800f0f0 <tcp_process+0x7d0>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	f003 0310 	and.w	r3, r3, #16
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d01f      	beq.n	800f0dc <tcp_process+0x7bc>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f0a0:	4b14      	ldr	r3, [pc, #80]	@ (800f0f4 <tcp_process+0x7d4>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d119      	bne.n	800f0dc <tcp_process+0x7bc>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d115      	bne.n	800f0dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f0b0:	4b11      	ldr	r3, [pc, #68]	@ (800f0f8 <tcp_process+0x7d8>)
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	f043 0310 	orr.w	r3, r3, #16
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	4b0f      	ldr	r3, [pc, #60]	@ (800f0f8 <tcp_process+0x7d8>)
 800f0bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f0be:	e00d      	b.n	800f0dc <tcp_process+0x7bc>
    default:
      break;
 800f0c0:	bf00      	nop
 800f0c2:	e00c      	b.n	800f0de <tcp_process+0x7be>
      break;
 800f0c4:	bf00      	nop
 800f0c6:	e00a      	b.n	800f0de <tcp_process+0x7be>
      break;
 800f0c8:	bf00      	nop
 800f0ca:	e008      	b.n	800f0de <tcp_process+0x7be>
      break;
 800f0cc:	bf00      	nop
 800f0ce:	e006      	b.n	800f0de <tcp_process+0x7be>
      break;
 800f0d0:	bf00      	nop
 800f0d2:	e004      	b.n	800f0de <tcp_process+0x7be>
      break;
 800f0d4:	bf00      	nop
 800f0d6:	e002      	b.n	800f0de <tcp_process+0x7be>
      break;
 800f0d8:	bf00      	nop
 800f0da:	e000      	b.n	800f0de <tcp_process+0x7be>
      break;
 800f0dc:	bf00      	nop
  }
  return ERR_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3724      	adds	r7, #36	@ 0x24
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd90      	pop	{r4, r7, pc}
 800f0e8:	200171c8 	.word	0x200171c8
 800f0ec:	200171c4 	.word	0x200171c4
 800f0f0:	200171f8 	.word	0x200171f8
 800f0f4:	200171f0 	.word	0x200171f0
 800f0f8:	200171f9 	.word	0x200171f9
 800f0fc:	200171c0 	.word	0x200171c0

0800f100 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f100:	b590      	push	{r4, r7, lr}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d106      	bne.n	800f11e <tcp_oos_insert_segment+0x1e>
 800f110:	4b3b      	ldr	r3, [pc, #236]	@ (800f200 <tcp_oos_insert_segment+0x100>)
 800f112:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f116:	493b      	ldr	r1, [pc, #236]	@ (800f204 <tcp_oos_insert_segment+0x104>)
 800f118:	483b      	ldr	r0, [pc, #236]	@ (800f208 <tcp_oos_insert_segment+0x108>)
 800f11a:	f006 f8e9 	bl	80152f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	899b      	ldrh	r3, [r3, #12]
 800f124:	b29b      	uxth	r3, r3
 800f126:	4618      	mov	r0, r3
 800f128:	f7fb f8ee 	bl	800a308 <lwip_htons>
 800f12c:	4603      	mov	r3, r0
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	f003 0301 	and.w	r3, r3, #1
 800f134:	2b00      	cmp	r3, #0
 800f136:	d028      	beq.n	800f18a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f138:	6838      	ldr	r0, [r7, #0]
 800f13a:	f7fe f977 	bl	800d42c <tcp_segs_free>
    next = NULL;
 800f13e:	2300      	movs	r3, #0
 800f140:	603b      	str	r3, [r7, #0]
 800f142:	e056      	b.n	800f1f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	899b      	ldrh	r3, [r3, #12]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fb f8db 	bl	800a308 <lwip_htons>
 800f152:	4603      	mov	r3, r0
 800f154:	b2db      	uxtb	r3, r3
 800f156:	f003 0301 	and.w	r3, r3, #1
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00d      	beq.n	800f17a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	899b      	ldrh	r3, [r3, #12]
 800f164:	b29c      	uxth	r4, r3
 800f166:	2001      	movs	r0, #1
 800f168:	f7fb f8ce 	bl	800a308 <lwip_htons>
 800f16c:	4603      	mov	r3, r0
 800f16e:	461a      	mov	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	4322      	orrs	r2, r4
 800f176:	b292      	uxth	r2, r2
 800f178:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f7fe f966 	bl	800d456 <tcp_seg_free>
    while (next &&
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00e      	beq.n	800f1ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	891b      	ldrh	r3, [r3, #8]
 800f194:	461a      	mov	r2, r3
 800f196:	4b1d      	ldr	r3, [pc, #116]	@ (800f20c <tcp_oos_insert_segment+0x10c>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	441a      	add	r2, r3
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	8909      	ldrh	r1, [r1, #8]
 800f1a6:	440b      	add	r3, r1
 800f1a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	daca      	bge.n	800f144 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d01e      	beq.n	800f1f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	891b      	ldrh	r3, [r3, #8]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	4b14      	ldr	r3, [pc, #80]	@ (800f20c <tcp_oos_insert_segment+0x10c>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	441a      	add	r2, r3
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	dd12      	ble.n	800f1f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	4b0d      	ldr	r3, [pc, #52]	@ (800f20c <tcp_oos_insert_segment+0x10c>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	685a      	ldr	r2, [r3, #4]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	891b      	ldrh	r3, [r3, #8]
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	4610      	mov	r0, r2
 800f1ee:	f7fc fb71 	bl	800b8d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	601a      	str	r2, [r3, #0]
}
 800f1f8:	bf00      	nop
 800f1fa:	3714      	adds	r7, #20
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd90      	pop	{r4, r7, pc}
 800f200:	0801835c 	.word	0x0801835c
 800f204:	0801861c 	.word	0x0801861c
 800f208:	080183a8 	.word	0x080183a8
 800f20c:	200171ec 	.word	0x200171ec

0800f210 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f210:	b5b0      	push	{r4, r5, r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
 800f21c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f21e:	e03e      	b.n	800f29e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fc fd64 	bl	800bcfc <pbuf_clen>
 800f234:	4603      	mov	r3, r0
 800f236:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f23e:	8a7a      	ldrh	r2, [r7, #18]
 800f240:	429a      	cmp	r2, r3
 800f242:	d906      	bls.n	800f252 <tcp_free_acked_segments+0x42>
 800f244:	4b2a      	ldr	r3, [pc, #168]	@ (800f2f0 <tcp_free_acked_segments+0xe0>)
 800f246:	f240 4257 	movw	r2, #1111	@ 0x457
 800f24a:	492a      	ldr	r1, [pc, #168]	@ (800f2f4 <tcp_free_acked_segments+0xe4>)
 800f24c:	482a      	ldr	r0, [pc, #168]	@ (800f2f8 <tcp_free_acked_segments+0xe8>)
 800f24e:	f006 f84f 	bl	80152f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f258:	8a7b      	ldrh	r3, [r7, #18]
 800f25a:	1ad3      	subs	r3, r2, r3
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	891a      	ldrh	r2, [r3, #8]
 800f268:	4b24      	ldr	r3, [pc, #144]	@ (800f2fc <tcp_free_acked_segments+0xec>)
 800f26a:	881b      	ldrh	r3, [r3, #0]
 800f26c:	4413      	add	r3, r2
 800f26e:	b29a      	uxth	r2, r3
 800f270:	4b22      	ldr	r3, [pc, #136]	@ (800f2fc <tcp_free_acked_segments+0xec>)
 800f272:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f274:	6978      	ldr	r0, [r7, #20]
 800f276:	f7fe f8ee 	bl	800d456 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00c      	beq.n	800f29e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d109      	bne.n	800f29e <tcp_free_acked_segments+0x8e>
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d106      	bne.n	800f29e <tcp_free_acked_segments+0x8e>
 800f290:	4b17      	ldr	r3, [pc, #92]	@ (800f2f0 <tcp_free_acked_segments+0xe0>)
 800f292:	f240 4261 	movw	r2, #1121	@ 0x461
 800f296:	491a      	ldr	r1, [pc, #104]	@ (800f300 <tcp_free_acked_segments+0xf0>)
 800f298:	4817      	ldr	r0, [pc, #92]	@ (800f2f8 <tcp_free_acked_segments+0xe8>)
 800f29a:	f006 f829 	bl	80152f0 <iprintf>
  while (seg_list != NULL &&
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d020      	beq.n	800f2e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fb f842 	bl	800a334 <lwip_htonl>
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	891b      	ldrh	r3, [r3, #8]
 800f2b6:	461d      	mov	r5, r3
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	899b      	ldrh	r3, [r3, #12]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fb f821 	bl	800a308 <lwip_htons>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	f003 0303 	and.w	r3, r3, #3
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d001      	beq.n	800f2d6 <tcp_free_acked_segments+0xc6>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e000      	b.n	800f2d8 <tcp_free_acked_segments+0xc8>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	442b      	add	r3, r5
 800f2da:	18e2      	adds	r2, r4, r3
 800f2dc:	4b09      	ldr	r3, [pc, #36]	@ (800f304 <tcp_free_acked_segments+0xf4>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	dd9c      	ble.n	800f220 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f2e6:	68bb      	ldr	r3, [r7, #8]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3718      	adds	r7, #24
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bdb0      	pop	{r4, r5, r7, pc}
 800f2f0:	0801835c 	.word	0x0801835c
 800f2f4:	08018644 	.word	0x08018644
 800f2f8:	080183a8 	.word	0x080183a8
 800f2fc:	200171f4 	.word	0x200171f4
 800f300:	0801866c 	.word	0x0801866c
 800f304:	200171f0 	.word	0x200171f0

0800f308 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f308:	b5b0      	push	{r4, r5, r7, lr}
 800f30a:	b094      	sub	sp, #80	@ 0x50
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f310:	2300      	movs	r3, #0
 800f312:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d106      	bne.n	800f328 <tcp_receive+0x20>
 800f31a:	4b91      	ldr	r3, [pc, #580]	@ (800f560 <tcp_receive+0x258>)
 800f31c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f320:	4990      	ldr	r1, [pc, #576]	@ (800f564 <tcp_receive+0x25c>)
 800f322:	4891      	ldr	r0, [pc, #580]	@ (800f568 <tcp_receive+0x260>)
 800f324:	f005 ffe4 	bl	80152f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	7d1b      	ldrb	r3, [r3, #20]
 800f32c:	2b03      	cmp	r3, #3
 800f32e:	d806      	bhi.n	800f33e <tcp_receive+0x36>
 800f330:	4b8b      	ldr	r3, [pc, #556]	@ (800f560 <tcp_receive+0x258>)
 800f332:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f336:	498d      	ldr	r1, [pc, #564]	@ (800f56c <tcp_receive+0x264>)
 800f338:	488b      	ldr	r0, [pc, #556]	@ (800f568 <tcp_receive+0x260>)
 800f33a:	f005 ffd9 	bl	80152f0 <iprintf>

  if (flags & TCP_ACK) {
 800f33e:	4b8c      	ldr	r3, [pc, #560]	@ (800f570 <tcp_receive+0x268>)
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	f003 0310 	and.w	r3, r3, #16
 800f346:	2b00      	cmp	r3, #0
 800f348:	f000 8264 	beq.w	800f814 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f352:	461a      	mov	r2, r3
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f358:	4413      	add	r3, r2
 800f35a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f360:	4b84      	ldr	r3, [pc, #528]	@ (800f574 <tcp_receive+0x26c>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	db1b      	blt.n	800f3a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f36e:	4b81      	ldr	r3, [pc, #516]	@ (800f574 <tcp_receive+0x26c>)
 800f370:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f372:	429a      	cmp	r2, r3
 800f374:	d106      	bne.n	800f384 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f37a:	4b7f      	ldr	r3, [pc, #508]	@ (800f578 <tcp_receive+0x270>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	1ad3      	subs	r3, r2, r3
 800f380:	2b00      	cmp	r3, #0
 800f382:	db0e      	blt.n	800f3a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f388:	4b7b      	ldr	r3, [pc, #492]	@ (800f578 <tcp_receive+0x270>)
 800f38a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d125      	bne.n	800f3dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f390:	4b7a      	ldr	r3, [pc, #488]	@ (800f57c <tcp_receive+0x274>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	89db      	ldrh	r3, [r3, #14]
 800f396:	b29a      	uxth	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d91c      	bls.n	800f3dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f3a2:	4b76      	ldr	r3, [pc, #472]	@ (800f57c <tcp_receive+0x274>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	89db      	ldrh	r3, [r3, #14]
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d205      	bcs.n	800f3cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f3cc:	4b69      	ldr	r3, [pc, #420]	@ (800f574 <tcp_receive+0x26c>)
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f3d4:	4b68      	ldr	r3, [pc, #416]	@ (800f578 <tcp_receive+0x270>)
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f3dc:	4b66      	ldr	r3, [pc, #408]	@ (800f578 <tcp_receive+0x270>)
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3e4:	1ad3      	subs	r3, r2, r3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	dc58      	bgt.n	800f49c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f3ea:	4b65      	ldr	r3, [pc, #404]	@ (800f580 <tcp_receive+0x278>)
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d14b      	bne.n	800f48a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f3fc:	4413      	add	r3, r2
 800f3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f400:	429a      	cmp	r2, r3
 800f402:	d142      	bne.n	800f48a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	db3d      	blt.n	800f48a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f412:	4b59      	ldr	r3, [pc, #356]	@ (800f578 <tcp_receive+0x270>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	429a      	cmp	r2, r3
 800f418:	d137      	bne.n	800f48a <tcp_receive+0x182>
              found_dupack = 1;
 800f41a:	2301      	movs	r3, #1
 800f41c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f424:	2bff      	cmp	r3, #255	@ 0xff
 800f426:	d007      	beq.n	800f438 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f42e:	3301      	adds	r3, #1
 800f430:	b2da      	uxtb	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f43e:	2b03      	cmp	r3, #3
 800f440:	d91b      	bls.n	800f47a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f44c:	4413      	add	r3, r2
 800f44e:	b29a      	uxth	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f456:	429a      	cmp	r2, r3
 800f458:	d30a      	bcc.n	800f470 <tcp_receive+0x168>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f464:	4413      	add	r3, r2
 800f466:	b29a      	uxth	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f46e:	e004      	b.n	800f47a <tcp_receive+0x172>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f476:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f480:	2b02      	cmp	r3, #2
 800f482:	d902      	bls.n	800f48a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f002 fb3f 	bl	8011b08 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f48a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f040 8161 	bne.w	800f754 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f49a:	e15b      	b.n	800f754 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f49c:	4b36      	ldr	r3, [pc, #216]	@ (800f578 <tcp_receive+0x270>)
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4a4:	1ad3      	subs	r3, r2, r3
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f2c0 814e 	blt.w	800f74a <tcp_receive+0x442>
 800f4ae:	4b32      	ldr	r3, [pc, #200]	@ (800f578 <tcp_receive+0x270>)
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4b6:	1ad3      	subs	r3, r2, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f300 8146 	bgt.w	800f74a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	8b5b      	ldrh	r3, [r3, #26]
 800f4c2:	f003 0304 	and.w	r3, r3, #4
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d010      	beq.n	800f4ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	8b5b      	ldrh	r3, [r3, #26]
 800f4ce:	f023 0304 	bic.w	r3, r3, #4
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f4fa:	10db      	asrs	r3, r3, #3
 800f4fc:	b21b      	sxth	r3, r3
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f506:	b29b      	uxth	r3, r3
 800f508:	4413      	add	r3, r2
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	b21a      	sxth	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f514:	4b18      	ldr	r3, [pc, #96]	@ (800f578 <tcp_receive+0x270>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	b29a      	uxth	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f51e:	b29b      	uxth	r3, r3
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2200      	movs	r2, #0
 800f528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f52c:	4b12      	ldr	r3, [pc, #72]	@ (800f578 <tcp_receive+0x270>)
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	7d1b      	ldrb	r3, [r3, #20]
 800f538:	2b03      	cmp	r3, #3
 800f53a:	f240 8097 	bls.w	800f66c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d245      	bcs.n	800f5da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	8b5b      	ldrh	r3, [r3, #26]
 800f552:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f556:	2b00      	cmp	r3, #0
 800f558:	d014      	beq.n	800f584 <tcp_receive+0x27c>
 800f55a:	2301      	movs	r3, #1
 800f55c:	e013      	b.n	800f586 <tcp_receive+0x27e>
 800f55e:	bf00      	nop
 800f560:	0801835c 	.word	0x0801835c
 800f564:	0801868c 	.word	0x0801868c
 800f568:	080183a8 	.word	0x080183a8
 800f56c:	080186a8 	.word	0x080186a8
 800f570:	200171f8 	.word	0x200171f8
 800f574:	200171ec 	.word	0x200171ec
 800f578:	200171f0 	.word	0x200171f0
 800f57c:	200171dc 	.word	0x200171dc
 800f580:	200171f6 	.word	0x200171f6
 800f584:	2302      	movs	r3, #2
 800f586:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f58a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f58e:	b29a      	uxth	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f594:	fb12 f303 	smulbb	r3, r2, r3
 800f598:	b29b      	uxth	r3, r3
 800f59a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f59c:	4293      	cmp	r3, r2
 800f59e:	bf28      	it	cs
 800f5a0:	4613      	movcs	r3, r2
 800f5a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f5aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f5ac:	4413      	add	r3, r2
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d309      	bcc.n	800f5ce <tcp_receive+0x2c6>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f5c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f5c2:	4413      	add	r3, r2
 800f5c4:	b29a      	uxth	r2, r3
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f5cc:	e04e      	b.n	800f66c <tcp_receive+0x364>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f5d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f5d8:	e048      	b.n	800f66c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f5e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f5e2:	4413      	add	r3, r2
 800f5e4:	b29a      	uxth	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d309      	bcc.n	800f604 <tcp_receive+0x2fc>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f5f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f5f8:	4413      	add	r3, r2
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f602:	e004      	b.n	800f60e <tcp_receive+0x306>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f60a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d326      	bcc.n	800f66c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f63e:	4413      	add	r3, r2
 800f640:	b29a      	uxth	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f648:	429a      	cmp	r2, r3
 800f64a:	d30a      	bcc.n	800f662 <tcp_receive+0x35a>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f656:	4413      	add	r3, r2
 800f658:	b29a      	uxth	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f660:	e004      	b.n	800f66c <tcp_receive+0x364>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f668:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f674:	4a98      	ldr	r2, [pc, #608]	@ (800f8d8 <tcp_receive+0x5d0>)
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f7ff fdca 	bl	800f210 <tcp_free_acked_segments>
 800f67c:	4602      	mov	r2, r0
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f68a:	4a94      	ldr	r2, [pc, #592]	@ (800f8dc <tcp_receive+0x5d4>)
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7ff fdbf 	bl	800f210 <tcp_free_acked_segments>
 800f692:	4602      	mov	r2, r0
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d104      	bne.n	800f6aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6a6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f6a8:	e002      	b.n	800f6b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d103      	bne.n	800f6c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f6cc:	4b84      	ldr	r3, [pc, #528]	@ (800f8e0 <tcp_receive+0x5d8>)
 800f6ce:	881b      	ldrh	r3, [r3, #0]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	b29a      	uxth	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8b5b      	ldrh	r3, [r3, #26]
 800f6de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d035      	beq.n	800f752 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d118      	bne.n	800f720 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00c      	beq.n	800f710 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	4618      	mov	r0, r3
 800f704:	f7fa fe16 	bl	800a334 <lwip_htonl>
 800f708:	4603      	mov	r3, r0
 800f70a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	dc20      	bgt.n	800f752 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	8b5b      	ldrh	r3, [r3, #26]
 800f714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f718:	b29a      	uxth	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f71e:	e018      	b.n	800f752 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fa fe01 	bl	800a334 <lwip_htonl>
 800f732:	4603      	mov	r3, r0
 800f734:	1ae3      	subs	r3, r4, r3
 800f736:	2b00      	cmp	r3, #0
 800f738:	dc0b      	bgt.n	800f752 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	8b5b      	ldrh	r3, [r3, #26]
 800f73e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f742:	b29a      	uxth	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f748:	e003      	b.n	800f752 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f002 fbc8 	bl	8011ee0 <tcp_send_empty_ack>
 800f750:	e000      	b.n	800f754 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f752:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d05b      	beq.n	800f814 <tcp_receive+0x50c>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f760:	4b60      	ldr	r3, [pc, #384]	@ (800f8e4 <tcp_receive+0x5dc>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	2b00      	cmp	r3, #0
 800f768:	da54      	bge.n	800f814 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f76a:	4b5f      	ldr	r3, [pc, #380]	@ (800f8e8 <tcp_receive+0x5e0>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	b29a      	uxth	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f774:	b29b      	uxth	r3, r3
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	b29b      	uxth	r3, r3
 800f77a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f77e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f788:	10db      	asrs	r3, r3, #3
 800f78a:	b21b      	sxth	r3, r3
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	b29b      	uxth	r3, r3
 800f792:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f7a2:	4413      	add	r3, r2
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	b21a      	sxth	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f7ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	da05      	bge.n	800f7c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f7b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f7b8:	425b      	negs	r3, r3
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f7c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f7ca:	109b      	asrs	r3, r3, #2
 800f7cc:	b21b      	sxth	r3, r3
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f7de:	b29a      	uxth	r2, r3
 800f7e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f7e4:	4413      	add	r3, r2
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	b21a      	sxth	r2, r3
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f7f4:	10db      	asrs	r3, r3, #3
 800f7f6:	b21b      	sxth	r3, r3
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f800:	b29b      	uxth	r3, r3
 800f802:	4413      	add	r3, r2
 800f804:	b29b      	uxth	r3, r3
 800f806:	b21a      	sxth	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f814:	4b35      	ldr	r3, [pc, #212]	@ (800f8ec <tcp_receive+0x5e4>)
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f000 84df 	beq.w	80101dc <tcp_receive+0xed4>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	7d1b      	ldrb	r3, [r3, #20]
 800f822:	2b06      	cmp	r3, #6
 800f824:	f200 84da 	bhi.w	80101dc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f82c:	4b30      	ldr	r3, [pc, #192]	@ (800f8f0 <tcp_receive+0x5e8>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	3b01      	subs	r3, #1
 800f834:	2b00      	cmp	r3, #0
 800f836:	f2c0 808f 	blt.w	800f958 <tcp_receive+0x650>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f83e:	4b2b      	ldr	r3, [pc, #172]	@ (800f8ec <tcp_receive+0x5e4>)
 800f840:	881b      	ldrh	r3, [r3, #0]
 800f842:	4619      	mov	r1, r3
 800f844:	4b2a      	ldr	r3, [pc, #168]	@ (800f8f0 <tcp_receive+0x5e8>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	440b      	add	r3, r1
 800f84a:	1ad3      	subs	r3, r2, r3
 800f84c:	3301      	adds	r3, #1
 800f84e:	2b00      	cmp	r3, #0
 800f850:	f300 8082 	bgt.w	800f958 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f854:	4b27      	ldr	r3, [pc, #156]	@ (800f8f4 <tcp_receive+0x5ec>)
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f85e:	4b24      	ldr	r3, [pc, #144]	@ (800f8f0 <tcp_receive+0x5e8>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f866:	4b23      	ldr	r3, [pc, #140]	@ (800f8f4 <tcp_receive+0x5ec>)
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d106      	bne.n	800f87c <tcp_receive+0x574>
 800f86e:	4b22      	ldr	r3, [pc, #136]	@ (800f8f8 <tcp_receive+0x5f0>)
 800f870:	f240 5294 	movw	r2, #1428	@ 0x594
 800f874:	4921      	ldr	r1, [pc, #132]	@ (800f8fc <tcp_receive+0x5f4>)
 800f876:	4822      	ldr	r0, [pc, #136]	@ (800f900 <tcp_receive+0x5f8>)
 800f878:	f005 fd3a 	bl	80152f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f882:	4293      	cmp	r3, r2
 800f884:	d906      	bls.n	800f894 <tcp_receive+0x58c>
 800f886:	4b1c      	ldr	r3, [pc, #112]	@ (800f8f8 <tcp_receive+0x5f0>)
 800f888:	f240 5295 	movw	r2, #1429	@ 0x595
 800f88c:	491d      	ldr	r1, [pc, #116]	@ (800f904 <tcp_receive+0x5fc>)
 800f88e:	481c      	ldr	r0, [pc, #112]	@ (800f900 <tcp_receive+0x5f8>)
 800f890:	f005 fd2e 	bl	80152f0 <iprintf>
      off = (u16_t)off32;
 800f894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f896:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f89a:	4b16      	ldr	r3, [pc, #88]	@ (800f8f4 <tcp_receive+0x5ec>)
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	891b      	ldrh	r3, [r3, #8]
 800f8a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d906      	bls.n	800f8b6 <tcp_receive+0x5ae>
 800f8a8:	4b13      	ldr	r3, [pc, #76]	@ (800f8f8 <tcp_receive+0x5f0>)
 800f8aa:	f240 5297 	movw	r2, #1431	@ 0x597
 800f8ae:	4916      	ldr	r1, [pc, #88]	@ (800f908 <tcp_receive+0x600>)
 800f8b0:	4813      	ldr	r0, [pc, #76]	@ (800f900 <tcp_receive+0x5f8>)
 800f8b2:	f005 fd1d 	bl	80152f0 <iprintf>
      inseg.len -= off;
 800f8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800f8f4 <tcp_receive+0x5ec>)
 800f8b8:	891a      	ldrh	r2, [r3, #8]
 800f8ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	b29a      	uxth	r2, r3
 800f8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f8f4 <tcp_receive+0x5ec>)
 800f8c4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f8f4 <tcp_receive+0x5ec>)
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	891a      	ldrh	r2, [r3, #8]
 800f8cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f8d4:	e02a      	b.n	800f92c <tcp_receive+0x624>
 800f8d6:	bf00      	nop
 800f8d8:	080186c4 	.word	0x080186c4
 800f8dc:	080186cc 	.word	0x080186cc
 800f8e0:	200171f4 	.word	0x200171f4
 800f8e4:	200171f0 	.word	0x200171f0
 800f8e8:	200171b4 	.word	0x200171b4
 800f8ec:	200171f6 	.word	0x200171f6
 800f8f0:	200171ec 	.word	0x200171ec
 800f8f4:	200171cc 	.word	0x200171cc
 800f8f8:	0801835c 	.word	0x0801835c
 800f8fc:	080186d4 	.word	0x080186d4
 800f900:	080183a8 	.word	0x080183a8
 800f904:	080186e4 	.word	0x080186e4
 800f908:	080186f4 	.word	0x080186f4
        off -= p->len;
 800f90c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f90e:	895b      	ldrh	r3, [r3, #10]
 800f910:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f91a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f91c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f91e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f922:	2200      	movs	r2, #0
 800f924:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f92c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f92e:	895b      	ldrh	r3, [r3, #10]
 800f930:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f934:	429a      	cmp	r2, r3
 800f936:	d8e9      	bhi.n	800f90c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f93c:	4619      	mov	r1, r3
 800f93e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f940:	f7fc f8c8 	bl	800bad4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f948:	4a90      	ldr	r2, [pc, #576]	@ (800fb8c <tcp_receive+0x884>)
 800f94a:	6013      	str	r3, [r2, #0]
 800f94c:	4b90      	ldr	r3, [pc, #576]	@ (800fb90 <tcp_receive+0x888>)
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	4a8e      	ldr	r2, [pc, #568]	@ (800fb8c <tcp_receive+0x884>)
 800f952:	6812      	ldr	r2, [r2, #0]
 800f954:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f956:	e00d      	b.n	800f974 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f958:	4b8c      	ldr	r3, [pc, #560]	@ (800fb8c <tcp_receive+0x884>)
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	da06      	bge.n	800f974 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	8b5b      	ldrh	r3, [r3, #26]
 800f96a:	f043 0302 	orr.w	r3, r3, #2
 800f96e:	b29a      	uxth	r2, r3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f974:	4b85      	ldr	r3, [pc, #532]	@ (800fb8c <tcp_receive+0x884>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f2c0 8427 	blt.w	80101d2 <tcp_receive+0xeca>
 800f984:	4b81      	ldr	r3, [pc, #516]	@ (800fb8c <tcp_receive+0x884>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f98c:	6879      	ldr	r1, [r7, #4]
 800f98e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f990:	440b      	add	r3, r1
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	3301      	adds	r3, #1
 800f996:	2b00      	cmp	r3, #0
 800f998:	f300 841b 	bgt.w	80101d2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9a0:	4b7a      	ldr	r3, [pc, #488]	@ (800fb8c <tcp_receive+0x884>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	f040 8298 	bne.w	800feda <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f9aa:	4b79      	ldr	r3, [pc, #484]	@ (800fb90 <tcp_receive+0x888>)
 800f9ac:	891c      	ldrh	r4, [r3, #8]
 800f9ae:	4b78      	ldr	r3, [pc, #480]	@ (800fb90 <tcp_receive+0x888>)
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	899b      	ldrh	r3, [r3, #12]
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fa fca6 	bl	800a308 <lwip_htons>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	f003 0303 	and.w	r3, r3, #3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d001      	beq.n	800f9cc <tcp_receive+0x6c4>
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e000      	b.n	800f9ce <tcp_receive+0x6c6>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	4423      	add	r3, r4
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	4b70      	ldr	r3, [pc, #448]	@ (800fb94 <tcp_receive+0x88c>)
 800f9d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f9da:	4b6e      	ldr	r3, [pc, #440]	@ (800fb94 <tcp_receive+0x88c>)
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d274      	bcs.n	800facc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9e2:	4b6b      	ldr	r3, [pc, #428]	@ (800fb90 <tcp_receive+0x888>)
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	899b      	ldrh	r3, [r3, #12]
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fa fc8c 	bl	800a308 <lwip_htons>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	f003 0301 	and.w	r3, r3, #1
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d01e      	beq.n	800fa3a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f9fc:	4b64      	ldr	r3, [pc, #400]	@ (800fb90 <tcp_receive+0x888>)
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	899b      	ldrh	r3, [r3, #12]
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	b21b      	sxth	r3, r3
 800fa06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fa0a:	b21c      	sxth	r4, r3
 800fa0c:	4b60      	ldr	r3, [pc, #384]	@ (800fb90 <tcp_receive+0x888>)
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fa fc77 	bl	800a308 <lwip_htons>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fa fc6f 	bl	800a308 <lwip_htons>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	b21b      	sxth	r3, r3
 800fa2e:	4323      	orrs	r3, r4
 800fa30:	b21a      	sxth	r2, r3
 800fa32:	4b57      	ldr	r3, [pc, #348]	@ (800fb90 <tcp_receive+0x888>)
 800fa34:	68db      	ldr	r3, [r3, #12]
 800fa36:	b292      	uxth	r2, r2
 800fa38:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fa3e:	4b54      	ldr	r3, [pc, #336]	@ (800fb90 <tcp_receive+0x888>)
 800fa40:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa42:	4b53      	ldr	r3, [pc, #332]	@ (800fb90 <tcp_receive+0x888>)
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	899b      	ldrh	r3, [r3, #12]
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fa fc5c 	bl	800a308 <lwip_htons>
 800fa50:	4603      	mov	r3, r0
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	f003 0302 	and.w	r3, r3, #2
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <tcp_receive+0x760>
            inseg.len -= 1;
 800fa5c:	4b4c      	ldr	r3, [pc, #304]	@ (800fb90 <tcp_receive+0x888>)
 800fa5e:	891b      	ldrh	r3, [r3, #8]
 800fa60:	3b01      	subs	r3, #1
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	4b4a      	ldr	r3, [pc, #296]	@ (800fb90 <tcp_receive+0x888>)
 800fa66:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa68:	4b49      	ldr	r3, [pc, #292]	@ (800fb90 <tcp_receive+0x888>)
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	4a48      	ldr	r2, [pc, #288]	@ (800fb90 <tcp_receive+0x888>)
 800fa6e:	8912      	ldrh	r2, [r2, #8]
 800fa70:	4611      	mov	r1, r2
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fb ff2e 	bl	800b8d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa78:	4b45      	ldr	r3, [pc, #276]	@ (800fb90 <tcp_receive+0x888>)
 800fa7a:	891c      	ldrh	r4, [r3, #8]
 800fa7c:	4b44      	ldr	r3, [pc, #272]	@ (800fb90 <tcp_receive+0x888>)
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	899b      	ldrh	r3, [r3, #12]
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7fa fc3f 	bl	800a308 <lwip_htons>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	f003 0303 	and.w	r3, r3, #3
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d001      	beq.n	800fa9a <tcp_receive+0x792>
 800fa96:	2301      	movs	r3, #1
 800fa98:	e000      	b.n	800fa9c <tcp_receive+0x794>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	4423      	add	r3, r4
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	4b3c      	ldr	r3, [pc, #240]	@ (800fb94 <tcp_receive+0x88c>)
 800faa2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800faa4:	4b3b      	ldr	r3, [pc, #236]	@ (800fb94 <tcp_receive+0x88c>)
 800faa6:	881b      	ldrh	r3, [r3, #0]
 800faa8:	461a      	mov	r2, r3
 800faaa:	4b38      	ldr	r3, [pc, #224]	@ (800fb8c <tcp_receive+0x884>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	441a      	add	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fab4:	6879      	ldr	r1, [r7, #4]
 800fab6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fab8:	440b      	add	r3, r1
 800faba:	429a      	cmp	r2, r3
 800fabc:	d006      	beq.n	800facc <tcp_receive+0x7c4>
 800fabe:	4b36      	ldr	r3, [pc, #216]	@ (800fb98 <tcp_receive+0x890>)
 800fac0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800fac4:	4935      	ldr	r1, [pc, #212]	@ (800fb9c <tcp_receive+0x894>)
 800fac6:	4836      	ldr	r0, [pc, #216]	@ (800fba0 <tcp_receive+0x898>)
 800fac8:	f005 fc12 	bl	80152f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f000 80e6 	beq.w	800fca2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fad6:	4b2e      	ldr	r3, [pc, #184]	@ (800fb90 <tcp_receive+0x888>)
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	899b      	ldrh	r3, [r3, #12]
 800fadc:	b29b      	uxth	r3, r3
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fa fc12 	bl	800a308 <lwip_htons>
 800fae4:	4603      	mov	r3, r0
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	f003 0301 	and.w	r3, r3, #1
 800faec:	2b00      	cmp	r3, #0
 800faee:	d010      	beq.n	800fb12 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800faf0:	e00a      	b.n	800fb08 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faf6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f7fd fca7 	bl	800d456 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1f0      	bne.n	800faf2 <tcp_receive+0x7ea>
 800fb10:	e0c7      	b.n	800fca2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb18:	e051      	b.n	800fbbe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	899b      	ldrh	r3, [r3, #12]
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fa fbf0 	bl	800a308 <lwip_htons>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	f003 0301 	and.w	r3, r3, #1
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d03c      	beq.n	800fbae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fb34:	4b16      	ldr	r3, [pc, #88]	@ (800fb90 <tcp_receive+0x888>)
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	899b      	ldrh	r3, [r3, #12]
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fa fbe3 	bl	800a308 <lwip_htons>
 800fb42:	4603      	mov	r3, r0
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d12f      	bne.n	800fbae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fb4e:	4b10      	ldr	r3, [pc, #64]	@ (800fb90 <tcp_receive+0x888>)
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	899b      	ldrh	r3, [r3, #12]
 800fb54:	b29c      	uxth	r4, r3
 800fb56:	2001      	movs	r0, #1
 800fb58:	f7fa fbd6 	bl	800a308 <lwip_htons>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	461a      	mov	r2, r3
 800fb60:	4b0b      	ldr	r3, [pc, #44]	@ (800fb90 <tcp_receive+0x888>)
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	4322      	orrs	r2, r4
 800fb66:	b292      	uxth	r2, r2
 800fb68:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb6a:	4b09      	ldr	r3, [pc, #36]	@ (800fb90 <tcp_receive+0x888>)
 800fb6c:	891c      	ldrh	r4, [r3, #8]
 800fb6e:	4b08      	ldr	r3, [pc, #32]	@ (800fb90 <tcp_receive+0x888>)
 800fb70:	68db      	ldr	r3, [r3, #12]
 800fb72:	899b      	ldrh	r3, [r3, #12]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fa fbc6 	bl	800a308 <lwip_htons>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	f003 0303 	and.w	r3, r3, #3
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00d      	beq.n	800fba4 <tcp_receive+0x89c>
 800fb88:	2301      	movs	r3, #1
 800fb8a:	e00c      	b.n	800fba6 <tcp_receive+0x89e>
 800fb8c:	200171ec 	.word	0x200171ec
 800fb90:	200171cc 	.word	0x200171cc
 800fb94:	200171f6 	.word	0x200171f6
 800fb98:	0801835c 	.word	0x0801835c
 800fb9c:	08018704 	.word	0x08018704
 800fba0:	080183a8 	.word	0x080183a8
 800fba4:	2300      	movs	r3, #0
 800fba6:	4423      	add	r3, r4
 800fba8:	b29a      	uxth	r2, r3
 800fbaa:	4b98      	ldr	r3, [pc, #608]	@ (800fe0c <tcp_receive+0xb04>)
 800fbac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fbae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbb0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fbb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800fbb8:	6938      	ldr	r0, [r7, #16]
 800fbba:	f7fd fc4c 	bl	800d456 <tcp_seg_free>
            while (next &&
 800fbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d00e      	beq.n	800fbe2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fbc4:	4b91      	ldr	r3, [pc, #580]	@ (800fe0c <tcp_receive+0xb04>)
 800fbc6:	881b      	ldrh	r3, [r3, #0]
 800fbc8:	461a      	mov	r2, r3
 800fbca:	4b91      	ldr	r3, [pc, #580]	@ (800fe10 <tcp_receive+0xb08>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	441a      	add	r2, r3
 800fbd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fbd8:	8909      	ldrh	r1, [r1, #8]
 800fbda:	440b      	add	r3, r1
 800fbdc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	da9b      	bge.n	800fb1a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fbe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d059      	beq.n	800fc9c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fbe8:	4b88      	ldr	r3, [pc, #544]	@ (800fe0c <tcp_receive+0xb04>)
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	461a      	mov	r2, r3
 800fbee:	4b88      	ldr	r3, [pc, #544]	@ (800fe10 <tcp_receive+0xb08>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	441a      	add	r2, r3
 800fbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	dd4d      	ble.n	800fc9c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	4b81      	ldr	r3, [pc, #516]	@ (800fe10 <tcp_receive+0xb08>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	1ad3      	subs	r3, r2, r3
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	4b80      	ldr	r3, [pc, #512]	@ (800fe14 <tcp_receive+0xb0c>)
 800fc14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc16:	4b7f      	ldr	r3, [pc, #508]	@ (800fe14 <tcp_receive+0xb0c>)
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	899b      	ldrh	r3, [r3, #12]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fa fb72 	bl	800a308 <lwip_htons>
 800fc24:	4603      	mov	r3, r0
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	f003 0302 	and.w	r3, r3, #2
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d005      	beq.n	800fc3c <tcp_receive+0x934>
                inseg.len -= 1;
 800fc30:	4b78      	ldr	r3, [pc, #480]	@ (800fe14 <tcp_receive+0xb0c>)
 800fc32:	891b      	ldrh	r3, [r3, #8]
 800fc34:	3b01      	subs	r3, #1
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	4b76      	ldr	r3, [pc, #472]	@ (800fe14 <tcp_receive+0xb0c>)
 800fc3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc3c:	4b75      	ldr	r3, [pc, #468]	@ (800fe14 <tcp_receive+0xb0c>)
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	4a74      	ldr	r2, [pc, #464]	@ (800fe14 <tcp_receive+0xb0c>)
 800fc42:	8912      	ldrh	r2, [r2, #8]
 800fc44:	4611      	mov	r1, r2
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fb fe44 	bl	800b8d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fc4c:	4b71      	ldr	r3, [pc, #452]	@ (800fe14 <tcp_receive+0xb0c>)
 800fc4e:	891c      	ldrh	r4, [r3, #8]
 800fc50:	4b70      	ldr	r3, [pc, #448]	@ (800fe14 <tcp_receive+0xb0c>)
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	899b      	ldrh	r3, [r3, #12]
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7fa fb55 	bl	800a308 <lwip_htons>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	f003 0303 	and.w	r3, r3, #3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <tcp_receive+0x966>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e000      	b.n	800fc70 <tcp_receive+0x968>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	4423      	add	r3, r4
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	4b65      	ldr	r3, [pc, #404]	@ (800fe0c <tcp_receive+0xb04>)
 800fc76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc78:	4b64      	ldr	r3, [pc, #400]	@ (800fe0c <tcp_receive+0xb04>)
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	4b64      	ldr	r3, [pc, #400]	@ (800fe10 <tcp_receive+0xb08>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	441a      	add	r2, r3
 800fc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d006      	beq.n	800fc9c <tcp_receive+0x994>
 800fc8e:	4b62      	ldr	r3, [pc, #392]	@ (800fe18 <tcp_receive+0xb10>)
 800fc90:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800fc94:	4961      	ldr	r1, [pc, #388]	@ (800fe1c <tcp_receive+0xb14>)
 800fc96:	4862      	ldr	r0, [pc, #392]	@ (800fe20 <tcp_receive+0xb18>)
 800fc98:	f005 fb2a 	bl	80152f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fca0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fca2:	4b5a      	ldr	r3, [pc, #360]	@ (800fe0c <tcp_receive+0xb04>)
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	4b59      	ldr	r3, [pc, #356]	@ (800fe10 <tcp_receive+0xb08>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	441a      	add	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fcb6:	4b55      	ldr	r3, [pc, #340]	@ (800fe0c <tcp_receive+0xb04>)
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d206      	bcs.n	800fccc <tcp_receive+0x9c4>
 800fcbe:	4b56      	ldr	r3, [pc, #344]	@ (800fe18 <tcp_receive+0xb10>)
 800fcc0:	f240 6207 	movw	r2, #1543	@ 0x607
 800fcc4:	4957      	ldr	r1, [pc, #348]	@ (800fe24 <tcp_receive+0xb1c>)
 800fcc6:	4856      	ldr	r0, [pc, #344]	@ (800fe20 <tcp_receive+0xb18>)
 800fcc8:	f005 fb12 	bl	80152f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fcd0:	4b4e      	ldr	r3, [pc, #312]	@ (800fe0c <tcp_receive+0xb04>)
 800fcd2:	881b      	ldrh	r3, [r3, #0]
 800fcd4:	1ad3      	subs	r3, r2, r3
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7fc fe93 	bl	800ca08 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fce2:	4b4c      	ldr	r3, [pc, #304]	@ (800fe14 <tcp_receive+0xb0c>)
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	891b      	ldrh	r3, [r3, #8]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d006      	beq.n	800fcfa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fcec:	4b49      	ldr	r3, [pc, #292]	@ (800fe14 <tcp_receive+0xb0c>)
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	4a4d      	ldr	r2, [pc, #308]	@ (800fe28 <tcp_receive+0xb20>)
 800fcf2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fcf4:	4b47      	ldr	r3, [pc, #284]	@ (800fe14 <tcp_receive+0xb0c>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fcfa:	4b46      	ldr	r3, [pc, #280]	@ (800fe14 <tcp_receive+0xb0c>)
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	899b      	ldrh	r3, [r3, #12]
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fa fb00 	bl	800a308 <lwip_htons>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	f003 0301 	and.w	r3, r3, #1
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 80b8 	beq.w	800fe86 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd16:	4b45      	ldr	r3, [pc, #276]	@ (800fe2c <tcp_receive+0xb24>)
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	f043 0320 	orr.w	r3, r3, #32
 800fd1e:	b2da      	uxtb	r2, r3
 800fd20:	4b42      	ldr	r3, [pc, #264]	@ (800fe2c <tcp_receive+0xb24>)
 800fd22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fd24:	e0af      	b.n	800fe86 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	4a36      	ldr	r2, [pc, #216]	@ (800fe10 <tcp_receive+0xb08>)
 800fd36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	891b      	ldrh	r3, [r3, #8]
 800fd3c:	461c      	mov	r4, r3
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	899b      	ldrh	r3, [r3, #12]
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fa fade 	bl	800a308 <lwip_htons>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	f003 0303 	and.w	r3, r3, #3
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d001      	beq.n	800fd5c <tcp_receive+0xa54>
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e000      	b.n	800fd5e <tcp_receive+0xa56>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	191a      	adds	r2, r3, r4
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd64:	441a      	add	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd6e:	461c      	mov	r4, r3
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	891b      	ldrh	r3, [r3, #8]
 800fd74:	461d      	mov	r5, r3
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	68db      	ldr	r3, [r3, #12]
 800fd7a:	899b      	ldrh	r3, [r3, #12]
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fa fac2 	bl	800a308 <lwip_htons>
 800fd84:	4603      	mov	r3, r0
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	f003 0303 	and.w	r3, r3, #3
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d001      	beq.n	800fd94 <tcp_receive+0xa8c>
 800fd90:	2301      	movs	r3, #1
 800fd92:	e000      	b.n	800fd96 <tcp_receive+0xa8e>
 800fd94:	2300      	movs	r3, #0
 800fd96:	442b      	add	r3, r5
 800fd98:	429c      	cmp	r4, r3
 800fd9a:	d206      	bcs.n	800fdaa <tcp_receive+0xaa2>
 800fd9c:	4b1e      	ldr	r3, [pc, #120]	@ (800fe18 <tcp_receive+0xb10>)
 800fd9e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800fda2:	4923      	ldr	r1, [pc, #140]	@ (800fe30 <tcp_receive+0xb28>)
 800fda4:	481e      	ldr	r0, [pc, #120]	@ (800fe20 <tcp_receive+0xb18>)
 800fda6:	f005 faa3 	bl	80152f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	891b      	ldrh	r3, [r3, #8]
 800fdae:	461c      	mov	r4, r3
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	899b      	ldrh	r3, [r3, #12]
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fa faa5 	bl	800a308 <lwip_htons>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	f003 0303 	and.w	r3, r3, #3
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d001      	beq.n	800fdce <tcp_receive+0xac6>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e000      	b.n	800fdd0 <tcp_receive+0xac8>
 800fdce:	2300      	movs	r3, #0
 800fdd0:	1919      	adds	r1, r3, r4
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fdd6:	b28b      	uxth	r3, r1
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7fc fe11 	bl	800ca08 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	891b      	ldrh	r3, [r3, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d028      	beq.n	800fe42 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fdf0:	4b0d      	ldr	r3, [pc, #52]	@ (800fe28 <tcp_receive+0xb20>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d01d      	beq.n	800fe34 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fdf8:	4b0b      	ldr	r3, [pc, #44]	@ (800fe28 <tcp_receive+0xb20>)
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	4619      	mov	r1, r3
 800fe02:	4610      	mov	r0, r2
 800fe04:	f7fb ffba 	bl	800bd7c <pbuf_cat>
 800fe08:	e018      	b.n	800fe3c <tcp_receive+0xb34>
 800fe0a:	bf00      	nop
 800fe0c:	200171f6 	.word	0x200171f6
 800fe10:	200171ec 	.word	0x200171ec
 800fe14:	200171cc 	.word	0x200171cc
 800fe18:	0801835c 	.word	0x0801835c
 800fe1c:	0801873c 	.word	0x0801873c
 800fe20:	080183a8 	.word	0x080183a8
 800fe24:	08018778 	.word	0x08018778
 800fe28:	200171fc 	.word	0x200171fc
 800fe2c:	200171f9 	.word	0x200171f9
 800fe30:	08018798 	.word	0x08018798
            } else {
              recv_data = cseg->p;
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	4a70      	ldr	r2, [pc, #448]	@ (800fffc <tcp_receive+0xcf4>)
 800fe3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	899b      	ldrh	r3, [r3, #12]
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fa fa5c 	bl	800a308 <lwip_htons>
 800fe50:	4603      	mov	r3, r0
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	f003 0301 	and.w	r3, r3, #1
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00d      	beq.n	800fe78 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fe5c:	4b68      	ldr	r3, [pc, #416]	@ (8010000 <tcp_receive+0xcf8>)
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	f043 0320 	orr.w	r3, r3, #32
 800fe64:	b2da      	uxtb	r2, r3
 800fe66:	4b66      	ldr	r3, [pc, #408]	@ (8010000 <tcp_receive+0xcf8>)
 800fe68:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	7d1b      	ldrb	r3, [r3, #20]
 800fe6e:	2b04      	cmp	r3, #4
 800fe70:	d102      	bne.n	800fe78 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2207      	movs	r2, #7
 800fe76:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	681a      	ldr	r2, [r3, #0]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800fe80:	68b8      	ldr	r0, [r7, #8]
 800fe82:	f7fd fae8 	bl	800d456 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d008      	beq.n	800fea0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	685a      	ldr	r2, [r3, #4]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	f43f af43 	beq.w	800fd26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	8b5b      	ldrh	r3, [r3, #26]
 800fea4:	f003 0301 	and.w	r3, r3, #1
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00e      	beq.n	800feca <tcp_receive+0xbc2>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	8b5b      	ldrh	r3, [r3, #26]
 800feb0:	f023 0301 	bic.w	r3, r3, #1
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	835a      	strh	r2, [r3, #26]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8b5b      	ldrh	r3, [r3, #26]
 800febe:	f043 0302 	orr.w	r3, r3, #2
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fec8:	e187      	b.n	80101da <tcp_receive+0xed2>
        tcp_ack(pcb);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	8b5b      	ldrh	r3, [r3, #26]
 800fece:	f043 0301 	orr.w	r3, r3, #1
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fed8:	e17f      	b.n	80101da <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d106      	bne.n	800fef0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fee2:	4848      	ldr	r0, [pc, #288]	@ (8010004 <tcp_receive+0xcfc>)
 800fee4:	f7fd faee 	bl	800d4c4 <tcp_seg_copy>
 800fee8:	4602      	mov	r2, r0
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	675a      	str	r2, [r3, #116]	@ 0x74
 800feee:	e16c      	b.n	80101ca <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fef0:	2300      	movs	r3, #0
 800fef2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fef8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fefa:	e156      	b.n	80101aa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800fefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fefe:	68db      	ldr	r3, [r3, #12]
 800ff00:	685a      	ldr	r2, [r3, #4]
 800ff02:	4b41      	ldr	r3, [pc, #260]	@ (8010008 <tcp_receive+0xd00>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d11d      	bne.n	800ff46 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ff0a:	4b3e      	ldr	r3, [pc, #248]	@ (8010004 <tcp_receive+0xcfc>)
 800ff0c:	891a      	ldrh	r2, [r3, #8]
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff10:	891b      	ldrh	r3, [r3, #8]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	f240 814e 	bls.w	80101b4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff18:	483a      	ldr	r0, [pc, #232]	@ (8010004 <tcp_receive+0xcfc>)
 800ff1a:	f7fd fad3 	bl	800d4c4 <tcp_seg_copy>
 800ff1e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f000 8148 	beq.w	80101b8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ff28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d003      	beq.n	800ff36 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ff2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff30:	697a      	ldr	r2, [r7, #20]
 800ff32:	601a      	str	r2, [r3, #0]
 800ff34:	e002      	b.n	800ff3c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	697a      	ldr	r2, [r7, #20]
 800ff3a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff3e:	6978      	ldr	r0, [r7, #20]
 800ff40:	f7ff f8de 	bl	800f100 <tcp_oos_insert_segment>
                }
                break;
 800ff44:	e138      	b.n	80101b8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d117      	bne.n	800ff7c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ff4c:	4b2e      	ldr	r3, [pc, #184]	@ (8010008 <tcp_receive+0xd00>)
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	da57      	bge.n	801000c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff5c:	4829      	ldr	r0, [pc, #164]	@ (8010004 <tcp_receive+0xcfc>)
 800ff5e:	f7fd fab1 	bl	800d4c4 <tcp_seg_copy>
 800ff62:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ff64:	69bb      	ldr	r3, [r7, #24]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f000 8128 	beq.w	80101bc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	69ba      	ldr	r2, [r7, #24]
 800ff70:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ff72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff74:	69b8      	ldr	r0, [r7, #24]
 800ff76:	f7ff f8c3 	bl	800f100 <tcp_oos_insert_segment>
                  }
                  break;
 800ff7a:	e11f      	b.n	80101bc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ff7c:	4b22      	ldr	r3, [pc, #136]	@ (8010008 <tcp_receive+0xd00>)
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	1ad3      	subs	r3, r2, r3
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	db3e      	blt.n	801000c <tcp_receive+0xd04>
 800ff8e:	4b1e      	ldr	r3, [pc, #120]	@ (8010008 <tcp_receive+0xd00>)
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	1ad3      	subs	r3, r2, r3
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	dc35      	bgt.n	801000c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ffa0:	4818      	ldr	r0, [pc, #96]	@ (8010004 <tcp_receive+0xcfc>)
 800ffa2:	f7fd fa8f 	bl	800d4c4 <tcp_seg_copy>
 800ffa6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f000 8108 	beq.w	80101c0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ffb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ffb8:	8912      	ldrh	r2, [r2, #8]
 800ffba:	441a      	add	r2, r3
 800ffbc:	4b12      	ldr	r3, [pc, #72]	@ (8010008 <tcp_receive+0xd00>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	dd12      	ble.n	800ffec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ffc6:	4b10      	ldr	r3, [pc, #64]	@ (8010008 <tcp_receive+0xd00>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	1ad3      	subs	r3, r2, r3
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffda:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ffdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffde:	685a      	ldr	r2, [r3, #4]
 800ffe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffe2:	891b      	ldrh	r3, [r3, #8]
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4610      	mov	r0, r2
 800ffe8:	f7fb fc74 	bl	800b8d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ffec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffee:	69fa      	ldr	r2, [r7, #28]
 800fff0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fff2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fff4:	69f8      	ldr	r0, [r7, #28]
 800fff6:	f7ff f883 	bl	800f100 <tcp_oos_insert_segment>
                  }
                  break;
 800fffa:	e0e1      	b.n	80101c0 <tcp_receive+0xeb8>
 800fffc:	200171fc 	.word	0x200171fc
 8010000:	200171f9 	.word	0x200171f9
 8010004:	200171cc 	.word	0x200171cc
 8010008:	200171ec 	.word	0x200171ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801000c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801000e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	f040 80c5 	bne.w	80101a4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801001a:	4b7f      	ldr	r3, [pc, #508]	@ (8010218 <tcp_receive+0xf10>)
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010026:	2b00      	cmp	r3, #0
 8010028:	f340 80bc 	ble.w	80101a4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801002c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	899b      	ldrh	r3, [r3, #12]
 8010032:	b29b      	uxth	r3, r3
 8010034:	4618      	mov	r0, r3
 8010036:	f7fa f967 	bl	800a308 <lwip_htons>
 801003a:	4603      	mov	r3, r0
 801003c:	b2db      	uxtb	r3, r3
 801003e:	f003 0301 	and.w	r3, r3, #1
 8010042:	2b00      	cmp	r3, #0
 8010044:	f040 80be 	bne.w	80101c4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010048:	4874      	ldr	r0, [pc, #464]	@ (801021c <tcp_receive+0xf14>)
 801004a:	f7fd fa3b 	bl	800d4c4 <tcp_seg_copy>
 801004e:	4602      	mov	r2, r0
 8010050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010052:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 80b5 	beq.w	80101c8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801005e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010066:	8912      	ldrh	r2, [r2, #8]
 8010068:	441a      	add	r2, r3
 801006a:	4b6b      	ldr	r3, [pc, #428]	@ (8010218 <tcp_receive+0xf10>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	2b00      	cmp	r3, #0
 8010072:	dd12      	ble.n	801009a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010074:	4b68      	ldr	r3, [pc, #416]	@ (8010218 <tcp_receive+0xf10>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	b29a      	uxth	r2, r3
 801007a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	b29b      	uxth	r3, r3
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	b29a      	uxth	r2, r3
 8010086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010088:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801008a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801008c:	685a      	ldr	r2, [r3, #4]
 801008e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010090:	891b      	ldrh	r3, [r3, #8]
 8010092:	4619      	mov	r1, r3
 8010094:	4610      	mov	r0, r2
 8010096:	f7fb fc1d 	bl	800b8d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801009a:	4b61      	ldr	r3, [pc, #388]	@ (8010220 <tcp_receive+0xf18>)
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	461a      	mov	r2, r3
 80100a0:	4b5d      	ldr	r3, [pc, #372]	@ (8010218 <tcp_receive+0xf10>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	441a      	add	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100aa:	6879      	ldr	r1, [r7, #4]
 80100ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80100ae:	440b      	add	r3, r1
 80100b0:	1ad3      	subs	r3, r2, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	f340 8088 	ble.w	80101c8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80100b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	899b      	ldrh	r3, [r3, #12]
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fa f920 	bl	800a308 <lwip_htons>
 80100c8:	4603      	mov	r3, r0
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	f003 0301 	and.w	r3, r3, #1
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d021      	beq.n	8010118 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80100d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	899b      	ldrh	r3, [r3, #12]
 80100dc:	b29b      	uxth	r3, r3
 80100de:	b21b      	sxth	r3, r3
 80100e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80100e4:	b21c      	sxth	r4, r3
 80100e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	899b      	ldrh	r3, [r3, #12]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fa f909 	bl	800a308 <lwip_htons>
 80100f6:	4603      	mov	r3, r0
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80100fe:	b29b      	uxth	r3, r3
 8010100:	4618      	mov	r0, r3
 8010102:	f7fa f901 	bl	800a308 <lwip_htons>
 8010106:	4603      	mov	r3, r0
 8010108:	b21b      	sxth	r3, r3
 801010a:	4323      	orrs	r3, r4
 801010c:	b21a      	sxth	r2, r3
 801010e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	b292      	uxth	r2, r2
 8010116:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801011c:	b29a      	uxth	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010122:	4413      	add	r3, r2
 8010124:	b299      	uxth	r1, r3
 8010126:	4b3c      	ldr	r3, [pc, #240]	@ (8010218 <tcp_receive+0xf10>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	b29a      	uxth	r2, r3
 801012c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	1a8a      	subs	r2, r1, r2
 8010132:	b292      	uxth	r2, r2
 8010134:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	685a      	ldr	r2, [r3, #4]
 801013c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	891b      	ldrh	r3, [r3, #8]
 8010142:	4619      	mov	r1, r3
 8010144:	4610      	mov	r0, r2
 8010146:	f7fb fbc5 	bl	800b8d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801014a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	891c      	ldrh	r4, [r3, #8]
 8010150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	899b      	ldrh	r3, [r3, #12]
 8010158:	b29b      	uxth	r3, r3
 801015a:	4618      	mov	r0, r3
 801015c:	f7fa f8d4 	bl	800a308 <lwip_htons>
 8010160:	4603      	mov	r3, r0
 8010162:	b2db      	uxtb	r3, r3
 8010164:	f003 0303 	and.w	r3, r3, #3
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <tcp_receive+0xe68>
 801016c:	2301      	movs	r3, #1
 801016e:	e000      	b.n	8010172 <tcp_receive+0xe6a>
 8010170:	2300      	movs	r3, #0
 8010172:	4423      	add	r3, r4
 8010174:	b29a      	uxth	r2, r3
 8010176:	4b2a      	ldr	r3, [pc, #168]	@ (8010220 <tcp_receive+0xf18>)
 8010178:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801017a:	4b29      	ldr	r3, [pc, #164]	@ (8010220 <tcp_receive+0xf18>)
 801017c:	881b      	ldrh	r3, [r3, #0]
 801017e:	461a      	mov	r2, r3
 8010180:	4b25      	ldr	r3, [pc, #148]	@ (8010218 <tcp_receive+0xf10>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	441a      	add	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801018a:	6879      	ldr	r1, [r7, #4]
 801018c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801018e:	440b      	add	r3, r1
 8010190:	429a      	cmp	r2, r3
 8010192:	d019      	beq.n	80101c8 <tcp_receive+0xec0>
 8010194:	4b23      	ldr	r3, [pc, #140]	@ (8010224 <tcp_receive+0xf1c>)
 8010196:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801019a:	4923      	ldr	r1, [pc, #140]	@ (8010228 <tcp_receive+0xf20>)
 801019c:	4823      	ldr	r0, [pc, #140]	@ (801022c <tcp_receive+0xf24>)
 801019e:	f005 f8a7 	bl	80152f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80101a2:	e011      	b.n	80101c8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80101a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80101aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f47f aea5 	bne.w	800fefc <tcp_receive+0xbf4>
 80101b2:	e00a      	b.n	80101ca <tcp_receive+0xec2>
                break;
 80101b4:	bf00      	nop
 80101b6:	e008      	b.n	80101ca <tcp_receive+0xec2>
                break;
 80101b8:	bf00      	nop
 80101ba:	e006      	b.n	80101ca <tcp_receive+0xec2>
                  break;
 80101bc:	bf00      	nop
 80101be:	e004      	b.n	80101ca <tcp_receive+0xec2>
                  break;
 80101c0:	bf00      	nop
 80101c2:	e002      	b.n	80101ca <tcp_receive+0xec2>
                  break;
 80101c4:	bf00      	nop
 80101c6:	e000      	b.n	80101ca <tcp_receive+0xec2>
                break;
 80101c8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f001 fe88 	bl	8011ee0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80101d0:	e003      	b.n	80101da <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f001 fe84 	bl	8011ee0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101d8:	e01a      	b.n	8010210 <tcp_receive+0xf08>
 80101da:	e019      	b.n	8010210 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80101dc:	4b0e      	ldr	r3, [pc, #56]	@ (8010218 <tcp_receive+0xf10>)
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	db0a      	blt.n	8010200 <tcp_receive+0xef8>
 80101ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010218 <tcp_receive+0xf10>)
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101f2:	6879      	ldr	r1, [r7, #4]
 80101f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80101f6:	440b      	add	r3, r1
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	3301      	adds	r3, #1
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	dd07      	ble.n	8010210 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	8b5b      	ldrh	r3, [r3, #26]
 8010204:	f043 0302 	orr.w	r3, r3, #2
 8010208:	b29a      	uxth	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801020e:	e7ff      	b.n	8010210 <tcp_receive+0xf08>
 8010210:	bf00      	nop
 8010212:	3750      	adds	r7, #80	@ 0x50
 8010214:	46bd      	mov	sp, r7
 8010216:	bdb0      	pop	{r4, r5, r7, pc}
 8010218:	200171ec 	.word	0x200171ec
 801021c:	200171cc 	.word	0x200171cc
 8010220:	200171f6 	.word	0x200171f6
 8010224:	0801835c 	.word	0x0801835c
 8010228:	08018704 	.word	0x08018704
 801022c:	080183a8 	.word	0x080183a8

08010230 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010236:	4b15      	ldr	r3, [pc, #84]	@ (801028c <tcp_get_next_optbyte+0x5c>)
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	1c5a      	adds	r2, r3, #1
 801023c:	b291      	uxth	r1, r2
 801023e:	4a13      	ldr	r2, [pc, #76]	@ (801028c <tcp_get_next_optbyte+0x5c>)
 8010240:	8011      	strh	r1, [r2, #0]
 8010242:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010244:	4b12      	ldr	r3, [pc, #72]	@ (8010290 <tcp_get_next_optbyte+0x60>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d004      	beq.n	8010256 <tcp_get_next_optbyte+0x26>
 801024c:	4b11      	ldr	r3, [pc, #68]	@ (8010294 <tcp_get_next_optbyte+0x64>)
 801024e:	881b      	ldrh	r3, [r3, #0]
 8010250:	88fa      	ldrh	r2, [r7, #6]
 8010252:	429a      	cmp	r2, r3
 8010254:	d208      	bcs.n	8010268 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010256:	4b10      	ldr	r3, [pc, #64]	@ (8010298 <tcp_get_next_optbyte+0x68>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	3314      	adds	r3, #20
 801025c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801025e:	88fb      	ldrh	r3, [r7, #6]
 8010260:	683a      	ldr	r2, [r7, #0]
 8010262:	4413      	add	r3, r2
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	e00b      	b.n	8010280 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010268:	88fb      	ldrh	r3, [r7, #6]
 801026a:	b2da      	uxtb	r2, r3
 801026c:	4b09      	ldr	r3, [pc, #36]	@ (8010294 <tcp_get_next_optbyte+0x64>)
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	b2db      	uxtb	r3, r3
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010276:	4b06      	ldr	r3, [pc, #24]	@ (8010290 <tcp_get_next_optbyte+0x60>)
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	797b      	ldrb	r3, [r7, #5]
 801027c:	4413      	add	r3, r2
 801027e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010280:	4618      	mov	r0, r3
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	200171e8 	.word	0x200171e8
 8010290:	200171e4 	.word	0x200171e4
 8010294:	200171e2 	.word	0x200171e2
 8010298:	200171dc 	.word	0x200171dc

0801029c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d106      	bne.n	80102b8 <tcp_parseopt+0x1c>
 80102aa:	4b32      	ldr	r3, [pc, #200]	@ (8010374 <tcp_parseopt+0xd8>)
 80102ac:	f240 727d 	movw	r2, #1917	@ 0x77d
 80102b0:	4931      	ldr	r1, [pc, #196]	@ (8010378 <tcp_parseopt+0xdc>)
 80102b2:	4832      	ldr	r0, [pc, #200]	@ (801037c <tcp_parseopt+0xe0>)
 80102b4:	f005 f81c 	bl	80152f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80102b8:	4b31      	ldr	r3, [pc, #196]	@ (8010380 <tcp_parseopt+0xe4>)
 80102ba:	881b      	ldrh	r3, [r3, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d056      	beq.n	801036e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102c0:	4b30      	ldr	r3, [pc, #192]	@ (8010384 <tcp_parseopt+0xe8>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	801a      	strh	r2, [r3, #0]
 80102c6:	e046      	b.n	8010356 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80102c8:	f7ff ffb2 	bl	8010230 <tcp_get_next_optbyte>
 80102cc:	4603      	mov	r3, r0
 80102ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80102d0:	7bfb      	ldrb	r3, [r7, #15]
 80102d2:	2b02      	cmp	r3, #2
 80102d4:	d006      	beq.n	80102e4 <tcp_parseopt+0x48>
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	dc2a      	bgt.n	8010330 <tcp_parseopt+0x94>
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d042      	beq.n	8010364 <tcp_parseopt+0xc8>
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d038      	beq.n	8010354 <tcp_parseopt+0xb8>
 80102e2:	e025      	b.n	8010330 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80102e4:	f7ff ffa4 	bl	8010230 <tcp_get_next_optbyte>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b04      	cmp	r3, #4
 80102ec:	d13c      	bne.n	8010368 <tcp_parseopt+0xcc>
 80102ee:	4b25      	ldr	r3, [pc, #148]	@ (8010384 <tcp_parseopt+0xe8>)
 80102f0:	881b      	ldrh	r3, [r3, #0]
 80102f2:	3301      	adds	r3, #1
 80102f4:	4a22      	ldr	r2, [pc, #136]	@ (8010380 <tcp_parseopt+0xe4>)
 80102f6:	8812      	ldrh	r2, [r2, #0]
 80102f8:	4293      	cmp	r3, r2
 80102fa:	da35      	bge.n	8010368 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80102fc:	f7ff ff98 	bl	8010230 <tcp_get_next_optbyte>
 8010300:	4603      	mov	r3, r0
 8010302:	021b      	lsls	r3, r3, #8
 8010304:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010306:	f7ff ff93 	bl	8010230 <tcp_get_next_optbyte>
 801030a:	4603      	mov	r3, r0
 801030c:	461a      	mov	r2, r3
 801030e:	89bb      	ldrh	r3, [r7, #12]
 8010310:	4313      	orrs	r3, r2
 8010312:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010314:	89bb      	ldrh	r3, [r7, #12]
 8010316:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801031a:	d804      	bhi.n	8010326 <tcp_parseopt+0x8a>
 801031c:	89bb      	ldrh	r3, [r7, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <tcp_parseopt+0x8a>
 8010322:	89ba      	ldrh	r2, [r7, #12]
 8010324:	e001      	b.n	801032a <tcp_parseopt+0x8e>
 8010326:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801032e:	e012      	b.n	8010356 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010330:	f7ff ff7e 	bl	8010230 <tcp_get_next_optbyte>
 8010334:	4603      	mov	r3, r0
 8010336:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010338:	7afb      	ldrb	r3, [r7, #11]
 801033a:	2b01      	cmp	r3, #1
 801033c:	d916      	bls.n	801036c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801033e:	7afb      	ldrb	r3, [r7, #11]
 8010340:	b29a      	uxth	r2, r3
 8010342:	4b10      	ldr	r3, [pc, #64]	@ (8010384 <tcp_parseopt+0xe8>)
 8010344:	881b      	ldrh	r3, [r3, #0]
 8010346:	4413      	add	r3, r2
 8010348:	b29b      	uxth	r3, r3
 801034a:	3b02      	subs	r3, #2
 801034c:	b29a      	uxth	r2, r3
 801034e:	4b0d      	ldr	r3, [pc, #52]	@ (8010384 <tcp_parseopt+0xe8>)
 8010350:	801a      	strh	r2, [r3, #0]
 8010352:	e000      	b.n	8010356 <tcp_parseopt+0xba>
          break;
 8010354:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010356:	4b0b      	ldr	r3, [pc, #44]	@ (8010384 <tcp_parseopt+0xe8>)
 8010358:	881a      	ldrh	r2, [r3, #0]
 801035a:	4b09      	ldr	r3, [pc, #36]	@ (8010380 <tcp_parseopt+0xe4>)
 801035c:	881b      	ldrh	r3, [r3, #0]
 801035e:	429a      	cmp	r2, r3
 8010360:	d3b2      	bcc.n	80102c8 <tcp_parseopt+0x2c>
 8010362:	e004      	b.n	801036e <tcp_parseopt+0xd2>
          return;
 8010364:	bf00      	nop
 8010366:	e002      	b.n	801036e <tcp_parseopt+0xd2>
            return;
 8010368:	bf00      	nop
 801036a:	e000      	b.n	801036e <tcp_parseopt+0xd2>
            return;
 801036c:	bf00      	nop
      }
    }
  }
}
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	0801835c 	.word	0x0801835c
 8010378:	080187c0 	.word	0x080187c0
 801037c:	080183a8 	.word	0x080183a8
 8010380:	200171e0 	.word	0x200171e0
 8010384:	200171e8 	.word	0x200171e8

08010388 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010388:	b480      	push	{r7}
 801038a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801038c:	4b05      	ldr	r3, [pc, #20]	@ (80103a4 <tcp_trigger_input_pcb_close+0x1c>)
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	f043 0310 	orr.w	r3, r3, #16
 8010394:	b2da      	uxtb	r2, r3
 8010396:	4b03      	ldr	r3, [pc, #12]	@ (80103a4 <tcp_trigger_input_pcb_close+0x1c>)
 8010398:	701a      	strb	r2, [r3, #0]
}
 801039a:	bf00      	nop
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	200171f9 	.word	0x200171f9

080103a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00a      	beq.n	80103d0 <tcp_route+0x28>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	7a1b      	ldrb	r3, [r3, #8]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d006      	beq.n	80103d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	7a1b      	ldrb	r3, [r3, #8]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fb f87c 	bl	800b4c4 <netif_get_by_index>
 80103cc:	4603      	mov	r3, r0
 80103ce:	e003      	b.n	80103d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f003 fb03 	bl	80139dc <ip4_route>
 80103d6:	4603      	mov	r3, r0
  }
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80103e0:	b590      	push	{r4, r7, lr}
 80103e2:	b087      	sub	sp, #28
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	603b      	str	r3, [r7, #0]
 80103ec:	4613      	mov	r3, r2
 80103ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d105      	bne.n	8010402 <tcp_create_segment+0x22>
 80103f6:	4b43      	ldr	r3, [pc, #268]	@ (8010504 <tcp_create_segment+0x124>)
 80103f8:	22a3      	movs	r2, #163	@ 0xa3
 80103fa:	4943      	ldr	r1, [pc, #268]	@ (8010508 <tcp_create_segment+0x128>)
 80103fc:	4843      	ldr	r0, [pc, #268]	@ (801050c <tcp_create_segment+0x12c>)
 80103fe:	f004 ff77 	bl	80152f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d105      	bne.n	8010414 <tcp_create_segment+0x34>
 8010408:	4b3e      	ldr	r3, [pc, #248]	@ (8010504 <tcp_create_segment+0x124>)
 801040a:	22a4      	movs	r2, #164	@ 0xa4
 801040c:	4940      	ldr	r1, [pc, #256]	@ (8010510 <tcp_create_segment+0x130>)
 801040e:	483f      	ldr	r0, [pc, #252]	@ (801050c <tcp_create_segment+0x12c>)
 8010410:	f004 ff6e 	bl	80152f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010414:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010422:	2003      	movs	r0, #3
 8010424:	f7fa fcc2 	bl	800adac <memp_malloc>
 8010428:	6138      	str	r0, [r7, #16]
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d104      	bne.n	801043a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010430:	68b8      	ldr	r0, [r7, #8]
 8010432:	f7fb fbd5 	bl	800bbe0 <pbuf_free>
    return NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	e060      	b.n	80104fc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010440:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	2200      	movs	r2, #0
 8010446:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	891a      	ldrh	r2, [r3, #8]
 8010452:	7dfb      	ldrb	r3, [r7, #23]
 8010454:	b29b      	uxth	r3, r3
 8010456:	429a      	cmp	r2, r3
 8010458:	d205      	bcs.n	8010466 <tcp_create_segment+0x86>
 801045a:	4b2a      	ldr	r3, [pc, #168]	@ (8010504 <tcp_create_segment+0x124>)
 801045c:	22b0      	movs	r2, #176	@ 0xb0
 801045e:	492d      	ldr	r1, [pc, #180]	@ (8010514 <tcp_create_segment+0x134>)
 8010460:	482a      	ldr	r0, [pc, #168]	@ (801050c <tcp_create_segment+0x12c>)
 8010462:	f004 ff45 	bl	80152f0 <iprintf>
  seg->len = p->tot_len - optlen;
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	891a      	ldrh	r2, [r3, #8]
 801046a:	7dfb      	ldrb	r3, [r7, #23]
 801046c:	b29b      	uxth	r3, r3
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	b29a      	uxth	r2, r3
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010476:	2114      	movs	r1, #20
 8010478:	68b8      	ldr	r0, [r7, #8]
 801047a:	f7fb fb1b 	bl	800bab4 <pbuf_add_header>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d004      	beq.n	801048e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010484:	6938      	ldr	r0, [r7, #16]
 8010486:	f7fc ffe6 	bl	800d456 <tcp_seg_free>
    return NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	e036      	b.n	80104fc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	685a      	ldr	r2, [r3, #4]
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	8ada      	ldrh	r2, [r3, #22]
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	68dc      	ldr	r4, [r3, #12]
 80104a0:	4610      	mov	r0, r2
 80104a2:	f7f9 ff31 	bl	800a308 <lwip_htons>
 80104a6:	4603      	mov	r3, r0
 80104a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	8b1a      	ldrh	r2, [r3, #24]
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	68dc      	ldr	r4, [r3, #12]
 80104b2:	4610      	mov	r0, r2
 80104b4:	f7f9 ff28 	bl	800a308 <lwip_htons>
 80104b8:	4603      	mov	r3, r0
 80104ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	68dc      	ldr	r4, [r3, #12]
 80104c0:	6838      	ldr	r0, [r7, #0]
 80104c2:	f7f9 ff37 	bl	800a334 <lwip_htonl>
 80104c6:	4603      	mov	r3, r0
 80104c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80104ca:	7dfb      	ldrb	r3, [r7, #23]
 80104cc:	089b      	lsrs	r3, r3, #2
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	3305      	adds	r3, #5
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	031b      	lsls	r3, r3, #12
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	4313      	orrs	r3, r2
 80104de:	b29a      	uxth	r2, r3
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	68dc      	ldr	r4, [r3, #12]
 80104e4:	4610      	mov	r0, r2
 80104e6:	f7f9 ff0f 	bl	800a308 <lwip_htons>
 80104ea:	4603      	mov	r3, r0
 80104ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	2200      	movs	r2, #0
 80104f4:	749a      	strb	r2, [r3, #18]
 80104f6:	2200      	movs	r2, #0
 80104f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80104fa:	693b      	ldr	r3, [r7, #16]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	371c      	adds	r7, #28
 8010500:	46bd      	mov	sp, r7
 8010502:	bd90      	pop	{r4, r7, pc}
 8010504:	080187dc 	.word	0x080187dc
 8010508:	08018810 	.word	0x08018810
 801050c:	08018830 	.word	0x08018830
 8010510:	08018858 	.word	0x08018858
 8010514:	0801887c 	.word	0x0801887c

08010518 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b086      	sub	sp, #24
 801051c:	af00      	add	r7, sp, #0
 801051e:	607b      	str	r3, [r7, #4]
 8010520:	4603      	mov	r3, r0
 8010522:	73fb      	strb	r3, [r7, #15]
 8010524:	460b      	mov	r3, r1
 8010526:	81bb      	strh	r3, [r7, #12]
 8010528:	4613      	mov	r3, r2
 801052a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801052c:	89bb      	ldrh	r3, [r7, #12]
 801052e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d105      	bne.n	8010542 <tcp_pbuf_prealloc+0x2a>
 8010536:	4b30      	ldr	r3, [pc, #192]	@ (80105f8 <tcp_pbuf_prealloc+0xe0>)
 8010538:	22e8      	movs	r2, #232	@ 0xe8
 801053a:	4930      	ldr	r1, [pc, #192]	@ (80105fc <tcp_pbuf_prealloc+0xe4>)
 801053c:	4830      	ldr	r0, [pc, #192]	@ (8010600 <tcp_pbuf_prealloc+0xe8>)
 801053e:	f004 fed7 	bl	80152f0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010542:	6a3b      	ldr	r3, [r7, #32]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d105      	bne.n	8010554 <tcp_pbuf_prealloc+0x3c>
 8010548:	4b2b      	ldr	r3, [pc, #172]	@ (80105f8 <tcp_pbuf_prealloc+0xe0>)
 801054a:	22e9      	movs	r2, #233	@ 0xe9
 801054c:	492d      	ldr	r1, [pc, #180]	@ (8010604 <tcp_pbuf_prealloc+0xec>)
 801054e:	482c      	ldr	r0, [pc, #176]	@ (8010600 <tcp_pbuf_prealloc+0xe8>)
 8010550:	f004 fece 	bl	80152f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010554:	89ba      	ldrh	r2, [r7, #12]
 8010556:	897b      	ldrh	r3, [r7, #10]
 8010558:	429a      	cmp	r2, r3
 801055a:	d221      	bcs.n	80105a0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801055c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010560:	f003 0302 	and.w	r3, r3, #2
 8010564:	2b00      	cmp	r3, #0
 8010566:	d111      	bne.n	801058c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010568:	6a3b      	ldr	r3, [r7, #32]
 801056a:	8b5b      	ldrh	r3, [r3, #26]
 801056c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010570:	2b00      	cmp	r3, #0
 8010572:	d115      	bne.n	80105a0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010574:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010578:	2b00      	cmp	r3, #0
 801057a:	d007      	beq.n	801058c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801057c:	6a3b      	ldr	r3, [r7, #32]
 801057e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8010580:	2b00      	cmp	r3, #0
 8010582:	d103      	bne.n	801058c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8010588:	2b00      	cmp	r3, #0
 801058a:	d009      	beq.n	80105a0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801058c:	89bb      	ldrh	r3, [r7, #12]
 801058e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8010592:	f023 0203 	bic.w	r2, r3, #3
 8010596:	897b      	ldrh	r3, [r7, #10]
 8010598:	4293      	cmp	r3, r2
 801059a:	bf28      	it	cs
 801059c:	4613      	movcs	r3, r2
 801059e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80105a0:	8af9      	ldrh	r1, [r7, #22]
 80105a2:	7bfb      	ldrb	r3, [r7, #15]
 80105a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fb f835 	bl	800b618 <pbuf_alloc>
 80105ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d101      	bne.n	80105ba <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80105b6:	2300      	movs	r3, #0
 80105b8:	e019      	b.n	80105ee <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d006      	beq.n	80105d0 <tcp_pbuf_prealloc+0xb8>
 80105c2:	4b0d      	ldr	r3, [pc, #52]	@ (80105f8 <tcp_pbuf_prealloc+0xe0>)
 80105c4:	f240 120b 	movw	r2, #267	@ 0x10b
 80105c8:	490f      	ldr	r1, [pc, #60]	@ (8010608 <tcp_pbuf_prealloc+0xf0>)
 80105ca:	480d      	ldr	r0, [pc, #52]	@ (8010600 <tcp_pbuf_prealloc+0xe8>)
 80105cc:	f004 fe90 	bl	80152f0 <iprintf>
  *oversize = p->len - length;
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	895a      	ldrh	r2, [r3, #10]
 80105d4:	89bb      	ldrh	r3, [r7, #12]
 80105d6:	1ad3      	subs	r3, r2, r3
 80105d8:	b29a      	uxth	r2, r3
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	89ba      	ldrh	r2, [r7, #12]
 80105e2:	811a      	strh	r2, [r3, #8]
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	891a      	ldrh	r2, [r3, #8]
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	815a      	strh	r2, [r3, #10]
  return p;
 80105ec:	693b      	ldr	r3, [r7, #16]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3718      	adds	r7, #24
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	080187dc 	.word	0x080187dc
 80105fc:	08018894 	.word	0x08018894
 8010600:	08018830 	.word	0x08018830
 8010604:	080188b8 	.word	0x080188b8
 8010608:	080188d8 	.word	0x080188d8

0801060c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	460b      	mov	r3, r1
 8010616:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d106      	bne.n	801062c <tcp_write_checks+0x20>
 801061e:	4b33      	ldr	r3, [pc, #204]	@ (80106ec <tcp_write_checks+0xe0>)
 8010620:	f240 1233 	movw	r2, #307	@ 0x133
 8010624:	4932      	ldr	r1, [pc, #200]	@ (80106f0 <tcp_write_checks+0xe4>)
 8010626:	4833      	ldr	r0, [pc, #204]	@ (80106f4 <tcp_write_checks+0xe8>)
 8010628:	f004 fe62 	bl	80152f0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7d1b      	ldrb	r3, [r3, #20]
 8010630:	2b04      	cmp	r3, #4
 8010632:	d00e      	beq.n	8010652 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010638:	2b07      	cmp	r3, #7
 801063a:	d00a      	beq.n	8010652 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010640:	2b02      	cmp	r3, #2
 8010642:	d006      	beq.n	8010652 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010648:	2b03      	cmp	r3, #3
 801064a:	d002      	beq.n	8010652 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801064c:	f06f 030a 	mvn.w	r3, #10
 8010650:	e048      	b.n	80106e4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010652:	887b      	ldrh	r3, [r7, #2]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d101      	bne.n	801065c <tcp_write_checks+0x50>
    return ERR_OK;
 8010658:	2300      	movs	r3, #0
 801065a:	e043      	b.n	80106e4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010662:	887a      	ldrh	r2, [r7, #2]
 8010664:	429a      	cmp	r2, r3
 8010666:	d909      	bls.n	801067c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	8b5b      	ldrh	r3, [r3, #26]
 801066c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010670:	b29a      	uxth	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010676:	f04f 33ff 	mov.w	r3, #4294967295
 801067a:	e033      	b.n	80106e4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010682:	2b08      	cmp	r3, #8
 8010684:	d909      	bls.n	801069a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	8b5b      	ldrh	r3, [r3, #26]
 801068a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801068e:	b29a      	uxth	r2, r3
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010694:	f04f 33ff 	mov.w	r3, #4294967295
 8010698:	e024      	b.n	80106e4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00f      	beq.n	80106c4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d11a      	bne.n	80106e2 <tcp_write_checks+0xd6>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d116      	bne.n	80106e2 <tcp_write_checks+0xd6>
 80106b4:	4b0d      	ldr	r3, [pc, #52]	@ (80106ec <tcp_write_checks+0xe0>)
 80106b6:	f240 1255 	movw	r2, #341	@ 0x155
 80106ba:	490f      	ldr	r1, [pc, #60]	@ (80106f8 <tcp_write_checks+0xec>)
 80106bc:	480d      	ldr	r0, [pc, #52]	@ (80106f4 <tcp_write_checks+0xe8>)
 80106be:	f004 fe17 	bl	80152f0 <iprintf>
 80106c2:	e00e      	b.n	80106e2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d103      	bne.n	80106d4 <tcp_write_checks+0xc8>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d006      	beq.n	80106e2 <tcp_write_checks+0xd6>
 80106d4:	4b05      	ldr	r3, [pc, #20]	@ (80106ec <tcp_write_checks+0xe0>)
 80106d6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80106da:	4908      	ldr	r1, [pc, #32]	@ (80106fc <tcp_write_checks+0xf0>)
 80106dc:	4805      	ldr	r0, [pc, #20]	@ (80106f4 <tcp_write_checks+0xe8>)
 80106de:	f004 fe07 	bl	80152f0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80106e2:	2300      	movs	r3, #0
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	080187dc 	.word	0x080187dc
 80106f0:	080188ec 	.word	0x080188ec
 80106f4:	08018830 	.word	0x08018830
 80106f8:	0801890c 	.word	0x0801890c
 80106fc:	08018948 	.word	0x08018948

08010700 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010700:	b590      	push	{r4, r7, lr}
 8010702:	b09b      	sub	sp, #108	@ 0x6c
 8010704:	af04      	add	r7, sp, #16
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	4611      	mov	r1, r2
 801070c:	461a      	mov	r2, r3
 801070e:	460b      	mov	r3, r1
 8010710:	80fb      	strh	r3, [r7, #6]
 8010712:	4613      	mov	r3, r2
 8010714:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010716:	2300      	movs	r3, #0
 8010718:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801071a:	2300      	movs	r3, #0
 801071c:	653b      	str	r3, [r7, #80]	@ 0x50
 801071e:	2300      	movs	r3, #0
 8010720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010722:	2300      	movs	r3, #0
 8010724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010726:	2300      	movs	r3, #0
 8010728:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801072a:	2300      	movs	r3, #0
 801072c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010730:	2300      	movs	r3, #0
 8010732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010736:	2300      	movs	r3, #0
 8010738:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801073a:	2300      	movs	r3, #0
 801073c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801073e:	2300      	movs	r3, #0
 8010740:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d109      	bne.n	801075c <tcp_write+0x5c>
 8010748:	4ba4      	ldr	r3, [pc, #656]	@ (80109dc <tcp_write+0x2dc>)
 801074a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801074e:	49a4      	ldr	r1, [pc, #656]	@ (80109e0 <tcp_write+0x2e0>)
 8010750:	48a4      	ldr	r0, [pc, #656]	@ (80109e4 <tcp_write+0x2e4>)
 8010752:	f004 fdcd 	bl	80152f0 <iprintf>
 8010756:	f06f 030f 	mvn.w	r3, #15
 801075a:	e32a      	b.n	8010db2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010762:	085b      	lsrs	r3, r3, #1
 8010764:	b29a      	uxth	r2, r3
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801076a:	4293      	cmp	r3, r2
 801076c:	bf28      	it	cs
 801076e:	4613      	movcs	r3, r2
 8010770:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010774:	2b00      	cmp	r3, #0
 8010776:	d102      	bne.n	801077e <tcp_write+0x7e>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801077c:	e000      	b.n	8010780 <tcp_write+0x80>
 801077e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010780:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d109      	bne.n	801079c <tcp_write+0x9c>
 8010788:	4b94      	ldr	r3, [pc, #592]	@ (80109dc <tcp_write+0x2dc>)
 801078a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801078e:	4996      	ldr	r1, [pc, #600]	@ (80109e8 <tcp_write+0x2e8>)
 8010790:	4894      	ldr	r0, [pc, #592]	@ (80109e4 <tcp_write+0x2e4>)
 8010792:	f004 fdad 	bl	80152f0 <iprintf>
 8010796:	f06f 030f 	mvn.w	r3, #15
 801079a:	e30a      	b.n	8010db2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801079c:	88fb      	ldrh	r3, [r7, #6]
 801079e:	4619      	mov	r1, r3
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f7ff ff33 	bl	801060c <tcp_write_checks>
 80107a6:	4603      	mov	r3, r0
 80107a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80107ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d002      	beq.n	80107ba <tcp_write+0xba>
    return err;
 80107b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80107b8:	e2fb      	b.n	8010db2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80107c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80107c4:	2300      	movs	r3, #0
 80107c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f000 80f6 	beq.w	80109c0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80107da:	e002      	b.n	80107e2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80107dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d1f8      	bne.n	80107dc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80107ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107ec:	7a9b      	ldrb	r3, [r3, #10]
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	f003 0304 	and.w	r3, r3, #4
 80107f6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80107f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80107fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107fc:	891b      	ldrh	r3, [r3, #8]
 80107fe:	4619      	mov	r1, r3
 8010800:	8c3b      	ldrh	r3, [r7, #32]
 8010802:	440b      	add	r3, r1
 8010804:	429a      	cmp	r2, r3
 8010806:	da06      	bge.n	8010816 <tcp_write+0x116>
 8010808:	4b74      	ldr	r3, [pc, #464]	@ (80109dc <tcp_write+0x2dc>)
 801080a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801080e:	4977      	ldr	r1, [pc, #476]	@ (80109ec <tcp_write+0x2ec>)
 8010810:	4874      	ldr	r0, [pc, #464]	@ (80109e4 <tcp_write+0x2e4>)
 8010812:	f004 fd6d 	bl	80152f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010818:	891a      	ldrh	r2, [r3, #8]
 801081a:	8c3b      	ldrh	r3, [r7, #32]
 801081c:	4413      	add	r3, r2
 801081e:	b29b      	uxth	r3, r3
 8010820:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801082c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801082e:	8a7b      	ldrh	r3, [r7, #18]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d026      	beq.n	8010882 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010834:	8a7b      	ldrh	r3, [r7, #18]
 8010836:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010838:	429a      	cmp	r2, r3
 801083a:	d206      	bcs.n	801084a <tcp_write+0x14a>
 801083c:	4b67      	ldr	r3, [pc, #412]	@ (80109dc <tcp_write+0x2dc>)
 801083e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8010842:	496b      	ldr	r1, [pc, #428]	@ (80109f0 <tcp_write+0x2f0>)
 8010844:	4867      	ldr	r0, [pc, #412]	@ (80109e4 <tcp_write+0x2e4>)
 8010846:	f004 fd53 	bl	80152f0 <iprintf>
      seg = last_unsent;
 801084a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801084c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801084e:	8a7b      	ldrh	r3, [r7, #18]
 8010850:	88fa      	ldrh	r2, [r7, #6]
 8010852:	4293      	cmp	r3, r2
 8010854:	bf28      	it	cs
 8010856:	4613      	movcs	r3, r2
 8010858:	b29b      	uxth	r3, r3
 801085a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801085c:	4293      	cmp	r3, r2
 801085e:	bf28      	it	cs
 8010860:	4613      	movcs	r3, r2
 8010862:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8010864:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010868:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801086a:	4413      	add	r3, r2
 801086c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8010870:	8a7a      	ldrh	r2, [r7, #18]
 8010872:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010874:	1ad3      	subs	r3, r2, r3
 8010876:	b29b      	uxth	r3, r3
 8010878:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801087a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801087c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010882:	8a7b      	ldrh	r3, [r7, #18]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d00b      	beq.n	80108a0 <tcp_write+0x1a0>
 8010888:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801088c:	88fb      	ldrh	r3, [r7, #6]
 801088e:	429a      	cmp	r2, r3
 8010890:	d006      	beq.n	80108a0 <tcp_write+0x1a0>
 8010892:	4b52      	ldr	r3, [pc, #328]	@ (80109dc <tcp_write+0x2dc>)
 8010894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010898:	4956      	ldr	r1, [pc, #344]	@ (80109f4 <tcp_write+0x2f4>)
 801089a:	4852      	ldr	r0, [pc, #328]	@ (80109e4 <tcp_write+0x2e4>)
 801089c:	f004 fd28 	bl	80152f0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80108a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80108a4:	88fb      	ldrh	r3, [r7, #6]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	f080 8167 	bcs.w	8010b7a <tcp_write+0x47a>
 80108ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f000 8163 	beq.w	8010b7a <tcp_write+0x47a>
 80108b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108b6:	891b      	ldrh	r3, [r3, #8]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f000 815e 	beq.w	8010b7a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80108be:	88fa      	ldrh	r2, [r7, #6]
 80108c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80108c4:	1ad2      	subs	r2, r2, r3
 80108c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80108c8:	4293      	cmp	r3, r2
 80108ca:	bfa8      	it	ge
 80108cc:	4613      	movge	r3, r2
 80108ce:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80108d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108d2:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80108d4:	797b      	ldrb	r3, [r7, #5]
 80108d6:	f003 0301 	and.w	r3, r3, #1
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d027      	beq.n	801092e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80108de:	f107 0012 	add.w	r0, r7, #18
 80108e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80108e4:	8bf9      	ldrh	r1, [r7, #30]
 80108e6:	2301      	movs	r3, #1
 80108e8:	9302      	str	r3, [sp, #8]
 80108ea:	797b      	ldrb	r3, [r7, #5]
 80108ec:	9301      	str	r3, [sp, #4]
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	4603      	mov	r3, r0
 80108f4:	2000      	movs	r0, #0
 80108f6:	f7ff fe0f 	bl	8010518 <tcp_pbuf_prealloc>
 80108fa:	6578      	str	r0, [r7, #84]	@ 0x54
 80108fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 8225 	beq.w	8010d4e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010906:	6858      	ldr	r0, [r3, #4]
 8010908:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	4413      	add	r3, r2
 8010910:	8bfa      	ldrh	r2, [r7, #30]
 8010912:	4619      	mov	r1, r3
 8010914:	f004 ff95 	bl	8015842 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010918:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801091a:	f7fb f9ef 	bl	800bcfc <pbuf_clen>
 801091e:	4603      	mov	r3, r0
 8010920:	461a      	mov	r2, r3
 8010922:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010926:	4413      	add	r3, r2
 8010928:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801092c:	e041      	b.n	80109b2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801092e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	637b      	str	r3, [r7, #52]	@ 0x34
 8010934:	e002      	b.n	801093c <tcp_write+0x23c>
 8010936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	637b      	str	r3, [r7, #52]	@ 0x34
 801093c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1f8      	bne.n	8010936 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010946:	7b1b      	ldrb	r3, [r3, #12]
 8010948:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d115      	bne.n	801097c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010956:	8952      	ldrh	r2, [r2, #10]
 8010958:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801095a:	68ba      	ldr	r2, [r7, #8]
 801095c:	429a      	cmp	r2, r3
 801095e:	d10d      	bne.n	801097c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010964:	2b00      	cmp	r3, #0
 8010966:	d006      	beq.n	8010976 <tcp_write+0x276>
 8010968:	4b1c      	ldr	r3, [pc, #112]	@ (80109dc <tcp_write+0x2dc>)
 801096a:	f240 2231 	movw	r2, #561	@ 0x231
 801096e:	4922      	ldr	r1, [pc, #136]	@ (80109f8 <tcp_write+0x2f8>)
 8010970:	481c      	ldr	r0, [pc, #112]	@ (80109e4 <tcp_write+0x2e4>)
 8010972:	f004 fcbd 	bl	80152f0 <iprintf>
          extendlen = seglen;
 8010976:	8bfb      	ldrh	r3, [r7, #30]
 8010978:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801097a:	e01a      	b.n	80109b2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801097c:	8bfb      	ldrh	r3, [r7, #30]
 801097e:	2201      	movs	r2, #1
 8010980:	4619      	mov	r1, r3
 8010982:	2000      	movs	r0, #0
 8010984:	f7fa fe48 	bl	800b618 <pbuf_alloc>
 8010988:	6578      	str	r0, [r7, #84]	@ 0x54
 801098a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 81e0 	beq.w	8010d52 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010992:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	441a      	add	r2, r3
 801099a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801099c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801099e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80109a0:	f7fb f9ac 	bl	800bcfc <pbuf_clen>
 80109a4:	4603      	mov	r3, r0
 80109a6:	461a      	mov	r2, r3
 80109a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80109ac:	4413      	add	r3, r2
 80109ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80109b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80109b6:	8bfb      	ldrh	r3, [r7, #30]
 80109b8:	4413      	add	r3, r2
 80109ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80109be:	e0dc      	b.n	8010b7a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f000 80d7 	beq.w	8010b7a <tcp_write+0x47a>
 80109cc:	4b03      	ldr	r3, [pc, #12]	@ (80109dc <tcp_write+0x2dc>)
 80109ce:	f240 224a 	movw	r2, #586	@ 0x24a
 80109d2:	490a      	ldr	r1, [pc, #40]	@ (80109fc <tcp_write+0x2fc>)
 80109d4:	4803      	ldr	r0, [pc, #12]	@ (80109e4 <tcp_write+0x2e4>)
 80109d6:	f004 fc8b 	bl	80152f0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80109da:	e0ce      	b.n	8010b7a <tcp_write+0x47a>
 80109dc:	080187dc 	.word	0x080187dc
 80109e0:	0801897c 	.word	0x0801897c
 80109e4:	08018830 	.word	0x08018830
 80109e8:	08018994 	.word	0x08018994
 80109ec:	080189c8 	.word	0x080189c8
 80109f0:	080189e0 	.word	0x080189e0
 80109f4:	08018a00 	.word	0x08018a00
 80109f8:	08018a20 	.word	0x08018a20
 80109fc:	08018a4c 	.word	0x08018a4c
    struct pbuf *p;
    u16_t left = len - pos;
 8010a00:	88fa      	ldrh	r2, [r7, #6]
 8010a02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010a06:	1ad3      	subs	r3, r2, r3
 8010a08:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010a0a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010a12:	1ad3      	subs	r3, r2, r3
 8010a14:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010a16:	8b7a      	ldrh	r2, [r7, #26]
 8010a18:	8bbb      	ldrh	r3, [r7, #28]
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	bf28      	it	cs
 8010a1e:	4613      	movcs	r3, r2
 8010a20:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010a22:	797b      	ldrb	r3, [r7, #5]
 8010a24:	f003 0301 	and.w	r3, r3, #1
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d036      	beq.n	8010a9a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010a2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	8b3b      	ldrh	r3, [r7, #24]
 8010a34:	4413      	add	r3, r2
 8010a36:	b299      	uxth	r1, r3
 8010a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	bf0c      	ite	eq
 8010a3e:	2301      	moveq	r3, #1
 8010a40:	2300      	movne	r3, #0
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	f107 0012 	add.w	r0, r7, #18
 8010a48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010a4a:	9302      	str	r3, [sp, #8]
 8010a4c:	797b      	ldrb	r3, [r7, #5]
 8010a4e:	9301      	str	r3, [sp, #4]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	4603      	mov	r3, r0
 8010a56:	2036      	movs	r0, #54	@ 0x36
 8010a58:	f7ff fd5e 	bl	8010518 <tcp_pbuf_prealloc>
 8010a5c:	6338      	str	r0, [r7, #48]	@ 0x30
 8010a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f000 8178 	beq.w	8010d56 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a68:	895b      	ldrh	r3, [r3, #10]
 8010a6a:	8b3a      	ldrh	r2, [r7, #24]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d906      	bls.n	8010a7e <tcp_write+0x37e>
 8010a70:	4b8c      	ldr	r3, [pc, #560]	@ (8010ca4 <tcp_write+0x5a4>)
 8010a72:	f240 2266 	movw	r2, #614	@ 0x266
 8010a76:	498c      	ldr	r1, [pc, #560]	@ (8010ca8 <tcp_write+0x5a8>)
 8010a78:	488c      	ldr	r0, [pc, #560]	@ (8010cac <tcp_write+0x5ac>)
 8010a7a:	f004 fc39 	bl	80152f0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010a86:	18d0      	adds	r0, r2, r3
 8010a88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	4413      	add	r3, r2
 8010a90:	8b3a      	ldrh	r2, [r7, #24]
 8010a92:	4619      	mov	r1, r3
 8010a94:	f004 fed5 	bl	8015842 <memcpy>
 8010a98:	e02f      	b.n	8010afa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010a9a:	8a7b      	ldrh	r3, [r7, #18]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d006      	beq.n	8010aae <tcp_write+0x3ae>
 8010aa0:	4b80      	ldr	r3, [pc, #512]	@ (8010ca4 <tcp_write+0x5a4>)
 8010aa2:	f240 2271 	movw	r2, #625	@ 0x271
 8010aa6:	4982      	ldr	r1, [pc, #520]	@ (8010cb0 <tcp_write+0x5b0>)
 8010aa8:	4880      	ldr	r0, [pc, #512]	@ (8010cac <tcp_write+0x5ac>)
 8010aaa:	f004 fc21 	bl	80152f0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010aae:	8b3b      	ldrh	r3, [r7, #24]
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	2036      	movs	r0, #54	@ 0x36
 8010ab6:	f7fa fdaf 	bl	800b618 <pbuf_alloc>
 8010aba:	6178      	str	r0, [r7, #20]
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	f000 814b 	beq.w	8010d5a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010ac4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	441a      	add	r2, r3
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ad0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ada:	4619      	mov	r1, r3
 8010adc:	2036      	movs	r0, #54	@ 0x36
 8010ade:	f7fa fd9b 	bl	800b618 <pbuf_alloc>
 8010ae2:	6338      	str	r0, [r7, #48]	@ 0x30
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d103      	bne.n	8010af2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010aea:	6978      	ldr	r0, [r7, #20]
 8010aec:	f7fb f878 	bl	800bbe0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010af0:	e136      	b.n	8010d60 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010af2:	6979      	ldr	r1, [r7, #20]
 8010af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010af6:	f7fb f941 	bl	800bd7c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010afa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010afc:	f7fb f8fe 	bl	800bcfc <pbuf_clen>
 8010b00:	4603      	mov	r3, r0
 8010b02:	461a      	mov	r2, r3
 8010b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010b08:	4413      	add	r3, r2
 8010b0a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010b0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010b12:	2b09      	cmp	r3, #9
 8010b14:	d903      	bls.n	8010b1e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010b16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b18:	f7fb f862 	bl	800bbe0 <pbuf_free>
      goto memerr;
 8010b1c:	e120      	b.n	8010d60 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010b22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b26:	441a      	add	r2, r3
 8010b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	4613      	mov	r3, r2
 8010b30:	2200      	movs	r2, #0
 8010b32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f7ff fc53 	bl	80103e0 <tcp_create_segment>
 8010b3a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f000 810d 	beq.w	8010d5e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d102      	bne.n	8010b50 <tcp_write+0x450>
      queue = seg;
 8010b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b4e:	e00c      	b.n	8010b6a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <tcp_write+0x464>
 8010b56:	4b53      	ldr	r3, [pc, #332]	@ (8010ca4 <tcp_write+0x5a4>)
 8010b58:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010b5c:	4955      	ldr	r1, [pc, #340]	@ (8010cb4 <tcp_write+0x5b4>)
 8010b5e:	4853      	ldr	r0, [pc, #332]	@ (8010cac <tcp_write+0x5ac>)
 8010b60:	f004 fbc6 	bl	80152f0 <iprintf>
      prev_seg->next = seg;
 8010b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010b68:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b6c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010b6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b72:	8b3b      	ldrh	r3, [r7, #24]
 8010b74:	4413      	add	r3, r2
 8010b76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8010b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b7e:	88fb      	ldrh	r3, [r7, #6]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	f4ff af3d 	bcc.w	8010a00 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010b86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d02c      	beq.n	8010be6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b92:	e01e      	b.n	8010bd2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b96:	891a      	ldrh	r2, [r3, #8]
 8010b98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010b9a:	4413      	add	r3, r2
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d110      	bne.n	8010bcc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010bb0:	8952      	ldrh	r2, [r2, #10]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010bb6:	68b9      	ldr	r1, [r7, #8]
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f004 fe42 	bl	8015842 <memcpy>
        p->len += oversize_used;
 8010bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bc0:	895a      	ldrh	r2, [r3, #10]
 8010bc2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010bc4:	4413      	add	r3, r2
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bca:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1dd      	bne.n	8010b94 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bda:	891a      	ldrh	r2, [r3, #8]
 8010bdc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010bde:	4413      	add	r3, r2
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010be4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010be6:	8a7a      	ldrh	r2, [r7, #18]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d018      	beq.n	8010c26 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d106      	bne.n	8010c08 <tcp_write+0x508>
 8010bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8010ca4 <tcp_write+0x5a4>)
 8010bfc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8010c00:	492d      	ldr	r1, [pc, #180]	@ (8010cb8 <tcp_write+0x5b8>)
 8010c02:	482a      	ldr	r0, [pc, #168]	@ (8010cac <tcp_write+0x5ac>)
 8010c04:	f004 fb74 	bl	80152f0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fb f8b4 	bl	800bd7c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c16:	891a      	ldrh	r2, [r3, #8]
 8010c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c1a:	891b      	ldrh	r3, [r3, #8]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c22:	811a      	strh	r2, [r3, #8]
 8010c24:	e037      	b.n	8010c96 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010c26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d034      	beq.n	8010c96 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d003      	beq.n	8010c3a <tcp_write+0x53a>
 8010c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d106      	bne.n	8010c48 <tcp_write+0x548>
 8010c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8010ca4 <tcp_write+0x5a4>)
 8010c3c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8010c40:	491e      	ldr	r1, [pc, #120]	@ (8010cbc <tcp_write+0x5bc>)
 8010c42:	481a      	ldr	r0, [pc, #104]	@ (8010cac <tcp_write+0x5ac>)
 8010c44:	f004 fb54 	bl	80152f0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c4e:	e009      	b.n	8010c64 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c52:	891a      	ldrh	r2, [r3, #8]
 8010c54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c56:	4413      	add	r3, r2
 8010c58:	b29a      	uxth	r2, r3
 8010c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c5c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1f1      	bne.n	8010c50 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c6e:	891a      	ldrh	r2, [r3, #8]
 8010c70:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c72:	4413      	add	r3, r2
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c78:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c7c:	895a      	ldrh	r2, [r3, #10]
 8010c7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c80:	4413      	add	r3, r2
 8010c82:	b29a      	uxth	r2, r3
 8010c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c86:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c8a:	891a      	ldrh	r2, [r3, #8]
 8010c8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c8e:	4413      	add	r3, r2
 8010c90:	b29a      	uxth	r2, r3
 8010c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c94:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d111      	bne.n	8010cc0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ca0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010ca2:	e010      	b.n	8010cc6 <tcp_write+0x5c6>
 8010ca4:	080187dc 	.word	0x080187dc
 8010ca8:	08018a7c 	.word	0x08018a7c
 8010cac:	08018830 	.word	0x08018830
 8010cb0:	08018abc 	.word	0x08018abc
 8010cb4:	08018acc 	.word	0x08018acc
 8010cb8:	08018ae0 	.word	0x08018ae0
 8010cbc:	08018b18 	.word	0x08018b18
  } else {
    last_unsent->next = queue;
 8010cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cc4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010cca:	88fb      	ldrh	r3, [r7, #6]
 8010ccc:	441a      	add	r2, r3
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010cd8:	88fb      	ldrh	r3, [r7, #6]
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010cea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d00e      	beq.n	8010d16 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d10a      	bne.n	8010d16 <tcp_write+0x616>
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d106      	bne.n	8010d16 <tcp_write+0x616>
 8010d08:	4b2c      	ldr	r3, [pc, #176]	@ (8010dbc <tcp_write+0x6bc>)
 8010d0a:	f240 3212 	movw	r2, #786	@ 0x312
 8010d0e:	492c      	ldr	r1, [pc, #176]	@ (8010dc0 <tcp_write+0x6c0>)
 8010d10:	482c      	ldr	r0, [pc, #176]	@ (8010dc4 <tcp_write+0x6c4>)
 8010d12:	f004 faed 	bl	80152f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d016      	beq.n	8010d4a <tcp_write+0x64a>
 8010d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d012      	beq.n	8010d4a <tcp_write+0x64a>
 8010d24:	797b      	ldrb	r3, [r7, #5]
 8010d26:	f003 0302 	and.w	r3, r3, #2
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d10d      	bne.n	8010d4a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	899b      	ldrh	r3, [r3, #12]
 8010d34:	b29c      	uxth	r4, r3
 8010d36:	2008      	movs	r0, #8
 8010d38:	f7f9 fae6 	bl	800a308 <lwip_htons>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	461a      	mov	r2, r3
 8010d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	4322      	orrs	r2, r4
 8010d46:	b292      	uxth	r2, r2
 8010d48:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	e031      	b.n	8010db2 <tcp_write+0x6b2>
          goto memerr;
 8010d4e:	bf00      	nop
 8010d50:	e006      	b.n	8010d60 <tcp_write+0x660>
            goto memerr;
 8010d52:	bf00      	nop
 8010d54:	e004      	b.n	8010d60 <tcp_write+0x660>
        goto memerr;
 8010d56:	bf00      	nop
 8010d58:	e002      	b.n	8010d60 <tcp_write+0x660>
        goto memerr;
 8010d5a:	bf00      	nop
 8010d5c:	e000      	b.n	8010d60 <tcp_write+0x660>
      goto memerr;
 8010d5e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	8b5b      	ldrh	r3, [r3, #26]
 8010d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d002      	beq.n	8010d7a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010d74:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010d76:	f7fa ff33 	bl	800bbe0 <pbuf_free>
  }
  if (queue != NULL) {
 8010d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <tcp_write+0x686>
    tcp_segs_free(queue);
 8010d80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010d82:	f7fc fb53 	bl	800d42c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00e      	beq.n	8010dae <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d10a      	bne.n	8010dae <tcp_write+0x6ae>
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d106      	bne.n	8010dae <tcp_write+0x6ae>
 8010da0:	4b06      	ldr	r3, [pc, #24]	@ (8010dbc <tcp_write+0x6bc>)
 8010da2:	f240 3227 	movw	r2, #807	@ 0x327
 8010da6:	4906      	ldr	r1, [pc, #24]	@ (8010dc0 <tcp_write+0x6c0>)
 8010da8:	4806      	ldr	r0, [pc, #24]	@ (8010dc4 <tcp_write+0x6c4>)
 8010daa:	f004 faa1 	bl	80152f0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	375c      	adds	r7, #92	@ 0x5c
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd90      	pop	{r4, r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	080187dc 	.word	0x080187dc
 8010dc0:	08018b50 	.word	0x08018b50
 8010dc4:	08018830 	.word	0x08018830

08010dc8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010dc8:	b590      	push	{r4, r7, lr}
 8010dca:	b08b      	sub	sp, #44	@ 0x2c
 8010dcc:	af02      	add	r7, sp, #8
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	61fb      	str	r3, [r7, #28]
 8010dd8:	2300      	movs	r3, #0
 8010dda:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d106      	bne.n	8010df4 <tcp_split_unsent_seg+0x2c>
 8010de6:	4b95      	ldr	r3, [pc, #596]	@ (801103c <tcp_split_unsent_seg+0x274>)
 8010de8:	f240 324b 	movw	r2, #843	@ 0x34b
 8010dec:	4994      	ldr	r1, [pc, #592]	@ (8011040 <tcp_split_unsent_seg+0x278>)
 8010dee:	4895      	ldr	r0, [pc, #596]	@ (8011044 <tcp_split_unsent_seg+0x27c>)
 8010df0:	f004 fa7e 	bl	80152f0 <iprintf>

  useg = pcb->unsent;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010df8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d102      	bne.n	8010e06 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010e00:	f04f 33ff 	mov.w	r3, #4294967295
 8010e04:	e116      	b.n	8011034 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010e06:	887b      	ldrh	r3, [r7, #2]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d109      	bne.n	8010e20 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010e0c:	4b8b      	ldr	r3, [pc, #556]	@ (801103c <tcp_split_unsent_seg+0x274>)
 8010e0e:	f240 3253 	movw	r2, #851	@ 0x353
 8010e12:	498d      	ldr	r1, [pc, #564]	@ (8011048 <tcp_split_unsent_seg+0x280>)
 8010e14:	488b      	ldr	r0, [pc, #556]	@ (8011044 <tcp_split_unsent_seg+0x27c>)
 8010e16:	f004 fa6b 	bl	80152f0 <iprintf>
    return ERR_VAL;
 8010e1a:	f06f 0305 	mvn.w	r3, #5
 8010e1e:	e109      	b.n	8011034 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	891b      	ldrh	r3, [r3, #8]
 8010e24:	887a      	ldrh	r2, [r7, #2]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d301      	bcc.n	8010e2e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	e102      	b.n	8011034 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e32:	887a      	ldrh	r2, [r7, #2]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d906      	bls.n	8010e46 <tcp_split_unsent_seg+0x7e>
 8010e38:	4b80      	ldr	r3, [pc, #512]	@ (801103c <tcp_split_unsent_seg+0x274>)
 8010e3a:	f240 325b 	movw	r2, #859	@ 0x35b
 8010e3e:	4983      	ldr	r1, [pc, #524]	@ (801104c <tcp_split_unsent_seg+0x284>)
 8010e40:	4880      	ldr	r0, [pc, #512]	@ (8011044 <tcp_split_unsent_seg+0x27c>)
 8010e42:	f004 fa55 	bl	80152f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	891b      	ldrh	r3, [r3, #8]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d106      	bne.n	8010e5c <tcp_split_unsent_seg+0x94>
 8010e4e:	4b7b      	ldr	r3, [pc, #492]	@ (801103c <tcp_split_unsent_seg+0x274>)
 8010e50:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010e54:	497e      	ldr	r1, [pc, #504]	@ (8011050 <tcp_split_unsent_seg+0x288>)
 8010e56:	487b      	ldr	r0, [pc, #492]	@ (8011044 <tcp_split_unsent_seg+0x27c>)
 8010e58:	f004 fa4a 	bl	80152f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	7a9b      	ldrb	r3, [r3, #10]
 8010e60:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010e62:	7bfb      	ldrb	r3, [r7, #15]
 8010e64:	009b      	lsls	r3, r3, #2
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	f003 0304 	and.w	r3, r3, #4
 8010e6c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	891a      	ldrh	r2, [r3, #8]
 8010e72:	887b      	ldrh	r3, [r7, #2]
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010e78:	7bbb      	ldrb	r3, [r7, #14]
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	89bb      	ldrh	r3, [r7, #12]
 8010e7e:	4413      	add	r3, r2
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010e86:	4619      	mov	r1, r3
 8010e88:	2036      	movs	r0, #54	@ 0x36
 8010e8a:	f7fa fbc5 	bl	800b618 <pbuf_alloc>
 8010e8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f000 80b7 	beq.w	8011006 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	891a      	ldrh	r2, [r3, #8]
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	891b      	ldrh	r3, [r3, #8]
 8010ea2:	1ad3      	subs	r3, r2, r3
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	887b      	ldrh	r3, [r7, #2]
 8010ea8:	4413      	add	r3, r2
 8010eaa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	6858      	ldr	r0, [r3, #4]
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	685a      	ldr	r2, [r3, #4]
 8010eb4:	7bbb      	ldrb	r3, [r7, #14]
 8010eb6:	18d1      	adds	r1, r2, r3
 8010eb8:	897b      	ldrh	r3, [r7, #10]
 8010eba:	89ba      	ldrh	r2, [r7, #12]
 8010ebc:	f7fb f886 	bl	800bfcc <pbuf_copy_partial>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	89bb      	ldrh	r3, [r7, #12]
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	f040 809f 	bne.w	801100a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	68db      	ldr	r3, [r3, #12]
 8010ed0:	899b      	ldrh	r3, [r3, #12]
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7f9 fa17 	bl	800a308 <lwip_htons>
 8010eda:	4603      	mov	r3, r0
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010ee2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010ee8:	7efb      	ldrb	r3, [r7, #27]
 8010eea:	f003 0308 	and.w	r3, r3, #8
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d007      	beq.n	8010f02 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010ef2:	7efb      	ldrb	r3, [r7, #27]
 8010ef4:	f023 0308 	bic.w	r3, r3, #8
 8010ef8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010efa:	7ebb      	ldrb	r3, [r7, #26]
 8010efc:	f043 0308 	orr.w	r3, r3, #8
 8010f00:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010f02:	7efb      	ldrb	r3, [r7, #27]
 8010f04:	f003 0301 	and.w	r3, r3, #1
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d007      	beq.n	8010f1c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010f0c:	7efb      	ldrb	r3, [r7, #27]
 8010f0e:	f023 0301 	bic.w	r3, r3, #1
 8010f12:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010f14:	7ebb      	ldrb	r3, [r7, #26]
 8010f16:	f043 0301 	orr.w	r3, r3, #1
 8010f1a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7f9 fa06 	bl	800a334 <lwip_htonl>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	887b      	ldrh	r3, [r7, #2]
 8010f2c:	18d1      	adds	r1, r2, r3
 8010f2e:	7eba      	ldrb	r2, [r7, #26]
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	460b      	mov	r3, r1
 8010f36:	6939      	ldr	r1, [r7, #16]
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7ff fa51 	bl	80103e0 <tcp_create_segment>
 8010f3e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d063      	beq.n	801100e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fa fed6 	bl	800bcfc <pbuf_clen>
 8010f50:	4603      	mov	r3, r0
 8010f52:	461a      	mov	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f5a:	1a9b      	subs	r3, r3, r2
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	6858      	ldr	r0, [r3, #4]
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	891a      	ldrh	r2, [r3, #8]
 8010f6e:	89bb      	ldrh	r3, [r7, #12]
 8010f70:	1ad3      	subs	r3, r2, r3
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	4619      	mov	r1, r3
 8010f76:	f7fa fcad 	bl	800b8d4 <pbuf_realloc>
  useg->len -= remainder;
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	891a      	ldrh	r2, [r3, #8]
 8010f7e:	89bb      	ldrh	r3, [r7, #12]
 8010f80:	1ad3      	subs	r3, r2, r3
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	899b      	ldrh	r3, [r3, #12]
 8010f8e:	b29c      	uxth	r4, r3
 8010f90:	7efb      	ldrb	r3, [r7, #27]
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7f9 f9b7 	bl	800a308 <lwip_htons>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	4322      	orrs	r2, r4
 8010fa4:	b292      	uxth	r2, r2
 8010fa6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fa fea5 	bl	800bcfc <pbuf_clen>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010fbc:	4413      	add	r3, r2
 8010fbe:	b29a      	uxth	r2, r3
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fa fe96 	bl	800bcfc <pbuf_clen>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010fda:	4413      	add	r3, r2
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	69fa      	ldr	r2, [r7, #28]
 8010ff0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d103      	bne.n	8011002 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011002:	2300      	movs	r3, #0
 8011004:	e016      	b.n	8011034 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011006:	bf00      	nop
 8011008:	e002      	b.n	8011010 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801100a:	bf00      	nop
 801100c:	e000      	b.n	8011010 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801100e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d006      	beq.n	8011024 <tcp_split_unsent_seg+0x25c>
 8011016:	4b09      	ldr	r3, [pc, #36]	@ (801103c <tcp_split_unsent_seg+0x274>)
 8011018:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801101c:	490d      	ldr	r1, [pc, #52]	@ (8011054 <tcp_split_unsent_seg+0x28c>)
 801101e:	4809      	ldr	r0, [pc, #36]	@ (8011044 <tcp_split_unsent_seg+0x27c>)
 8011020:	f004 f966 	bl	80152f0 <iprintf>
  if (p != NULL) {
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d002      	beq.n	8011030 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801102a:	6938      	ldr	r0, [r7, #16]
 801102c:	f7fa fdd8 	bl	800bbe0 <pbuf_free>
  }

  return ERR_MEM;
 8011030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011034:	4618      	mov	r0, r3
 8011036:	3724      	adds	r7, #36	@ 0x24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd90      	pop	{r4, r7, pc}
 801103c:	080187dc 	.word	0x080187dc
 8011040:	08018b70 	.word	0x08018b70
 8011044:	08018830 	.word	0x08018830
 8011048:	08018b94 	.word	0x08018b94
 801104c:	08018bb8 	.word	0x08018bb8
 8011050:	08018bc8 	.word	0x08018bc8
 8011054:	08018bd8 	.word	0x08018bd8

08011058 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011058:	b590      	push	{r4, r7, lr}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <tcp_send_fin+0x1c>
 8011066:	4b21      	ldr	r3, [pc, #132]	@ (80110ec <tcp_send_fin+0x94>)
 8011068:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801106c:	4920      	ldr	r1, [pc, #128]	@ (80110f0 <tcp_send_fin+0x98>)
 801106e:	4821      	ldr	r0, [pc, #132]	@ (80110f4 <tcp_send_fin+0x9c>)
 8011070:	f004 f93e 	bl	80152f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011078:	2b00      	cmp	r3, #0
 801107a:	d02e      	beq.n	80110da <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011080:	60fb      	str	r3, [r7, #12]
 8011082:	e002      	b.n	801108a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1f8      	bne.n	8011084 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	899b      	ldrh	r3, [r3, #12]
 8011098:	b29b      	uxth	r3, r3
 801109a:	4618      	mov	r0, r3
 801109c:	f7f9 f934 	bl	800a308 <lwip_htons>
 80110a0:	4603      	mov	r3, r0
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f003 0307 	and.w	r3, r3, #7
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d116      	bne.n	80110da <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	899b      	ldrh	r3, [r3, #12]
 80110b2:	b29c      	uxth	r4, r3
 80110b4:	2001      	movs	r0, #1
 80110b6:	f7f9 f927 	bl	800a308 <lwip_htons>
 80110ba:	4603      	mov	r3, r0
 80110bc:	461a      	mov	r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	4322      	orrs	r2, r4
 80110c4:	b292      	uxth	r2, r2
 80110c6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8b5b      	ldrh	r3, [r3, #26]
 80110cc:	f043 0320 	orr.w	r3, r3, #32
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80110d6:	2300      	movs	r3, #0
 80110d8:	e004      	b.n	80110e4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80110da:	2101      	movs	r1, #1
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 f80b 	bl	80110f8 <tcp_enqueue_flags>
 80110e2:	4603      	mov	r3, r0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd90      	pop	{r4, r7, pc}
 80110ec:	080187dc 	.word	0x080187dc
 80110f0:	08018be4 	.word	0x08018be4
 80110f4:	08018830 	.word	0x08018830

080110f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b08a      	sub	sp, #40	@ 0x28
 80110fc:	af02      	add	r7, sp, #8
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	460b      	mov	r3, r1
 8011102:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011104:	2300      	movs	r3, #0
 8011106:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011108:	2300      	movs	r3, #0
 801110a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801110c:	78fb      	ldrb	r3, [r7, #3]
 801110e:	f003 0303 	and.w	r3, r3, #3
 8011112:	2b00      	cmp	r3, #0
 8011114:	d106      	bne.n	8011124 <tcp_enqueue_flags+0x2c>
 8011116:	4b67      	ldr	r3, [pc, #412]	@ (80112b4 <tcp_enqueue_flags+0x1bc>)
 8011118:	f240 4211 	movw	r2, #1041	@ 0x411
 801111c:	4966      	ldr	r1, [pc, #408]	@ (80112b8 <tcp_enqueue_flags+0x1c0>)
 801111e:	4867      	ldr	r0, [pc, #412]	@ (80112bc <tcp_enqueue_flags+0x1c4>)
 8011120:	f004 f8e6 	bl	80152f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d106      	bne.n	8011138 <tcp_enqueue_flags+0x40>
 801112a:	4b62      	ldr	r3, [pc, #392]	@ (80112b4 <tcp_enqueue_flags+0x1bc>)
 801112c:	f240 4213 	movw	r2, #1043	@ 0x413
 8011130:	4963      	ldr	r1, [pc, #396]	@ (80112c0 <tcp_enqueue_flags+0x1c8>)
 8011132:	4862      	ldr	r0, [pc, #392]	@ (80112bc <tcp_enqueue_flags+0x1c4>)
 8011134:	f004 f8dc 	bl	80152f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011138:	78fb      	ldrb	r3, [r7, #3]
 801113a:	f003 0302 	and.w	r3, r3, #2
 801113e:	2b00      	cmp	r3, #0
 8011140:	d001      	beq.n	8011146 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011142:	2301      	movs	r3, #1
 8011144:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011146:	7ffb      	ldrb	r3, [r7, #31]
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	b2db      	uxtb	r3, r3
 801114c:	f003 0304 	and.w	r3, r3, #4
 8011150:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011152:	7dfb      	ldrb	r3, [r7, #23]
 8011154:	b29b      	uxth	r3, r3
 8011156:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801115a:	4619      	mov	r1, r3
 801115c:	2036      	movs	r0, #54	@ 0x36
 801115e:	f7fa fa5b 	bl	800b618 <pbuf_alloc>
 8011162:	6138      	str	r0, [r7, #16]
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d109      	bne.n	801117e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	8b5b      	ldrh	r3, [r3, #26]
 801116e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011172:	b29a      	uxth	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011178:	f04f 33ff 	mov.w	r3, #4294967295
 801117c:	e095      	b.n	80112aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	895a      	ldrh	r2, [r3, #10]
 8011182:	7dfb      	ldrb	r3, [r7, #23]
 8011184:	b29b      	uxth	r3, r3
 8011186:	429a      	cmp	r2, r3
 8011188:	d206      	bcs.n	8011198 <tcp_enqueue_flags+0xa0>
 801118a:	4b4a      	ldr	r3, [pc, #296]	@ (80112b4 <tcp_enqueue_flags+0x1bc>)
 801118c:	f240 4239 	movw	r2, #1081	@ 0x439
 8011190:	494c      	ldr	r1, [pc, #304]	@ (80112c4 <tcp_enqueue_flags+0x1cc>)
 8011192:	484a      	ldr	r0, [pc, #296]	@ (80112bc <tcp_enqueue_flags+0x1c4>)
 8011194:	f004 f8ac 	bl	80152f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801119c:	78fa      	ldrb	r2, [r7, #3]
 801119e:	7ffb      	ldrb	r3, [r7, #31]
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	460b      	mov	r3, r1
 80111a4:	6939      	ldr	r1, [r7, #16]
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f7ff f91a 	bl	80103e0 <tcp_create_segment>
 80111ac:	60f8      	str	r0, [r7, #12]
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d109      	bne.n	80111c8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	8b5b      	ldrh	r3, [r3, #26]
 80111b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111bc:	b29a      	uxth	r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80111c2:	f04f 33ff 	mov.w	r3, #4294967295
 80111c6:	e070      	b.n	80112aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	f003 0303 	and.w	r3, r3, #3
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d006      	beq.n	80111e2 <tcp_enqueue_flags+0xea>
 80111d4:	4b37      	ldr	r3, [pc, #220]	@ (80112b4 <tcp_enqueue_flags+0x1bc>)
 80111d6:	f240 4242 	movw	r2, #1090	@ 0x442
 80111da:	493b      	ldr	r1, [pc, #236]	@ (80112c8 <tcp_enqueue_flags+0x1d0>)
 80111dc:	4837      	ldr	r0, [pc, #220]	@ (80112bc <tcp_enqueue_flags+0x1c4>)
 80111de:	f004 f887 	bl	80152f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	891b      	ldrh	r3, [r3, #8]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d006      	beq.n	80111f8 <tcp_enqueue_flags+0x100>
 80111ea:	4b32      	ldr	r3, [pc, #200]	@ (80112b4 <tcp_enqueue_flags+0x1bc>)
 80111ec:	f240 4243 	movw	r2, #1091	@ 0x443
 80111f0:	4936      	ldr	r1, [pc, #216]	@ (80112cc <tcp_enqueue_flags+0x1d4>)
 80111f2:	4832      	ldr	r0, [pc, #200]	@ (80112bc <tcp_enqueue_flags+0x1c4>)
 80111f4:	f004 f87c 	bl	80152f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d103      	bne.n	8011208 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	68fa      	ldr	r2, [r7, #12]
 8011204:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011206:	e00d      	b.n	8011224 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801120c:	61bb      	str	r3, [r7, #24]
 801120e:	e002      	b.n	8011216 <tcp_enqueue_flags+0x11e>
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	61bb      	str	r3, [r7, #24]
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d1f8      	bne.n	8011210 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801121e:	69bb      	ldr	r3, [r7, #24]
 8011220:	68fa      	ldr	r2, [r7, #12]
 8011222:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2200      	movs	r2, #0
 8011228:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801122c:	78fb      	ldrb	r3, [r7, #3]
 801122e:	f003 0302 	and.w	r3, r3, #2
 8011232:	2b00      	cmp	r3, #0
 8011234:	d104      	bne.n	8011240 <tcp_enqueue_flags+0x148>
 8011236:	78fb      	ldrb	r3, [r7, #3]
 8011238:	f003 0301 	and.w	r3, r3, #1
 801123c:	2b00      	cmp	r3, #0
 801123e:	d004      	beq.n	801124a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011244:	1c5a      	adds	r2, r3, #1
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801124a:	78fb      	ldrb	r3, [r7, #3]
 801124c:	f003 0301 	and.w	r3, r3, #1
 8011250:	2b00      	cmp	r3, #0
 8011252:	d006      	beq.n	8011262 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	8b5b      	ldrh	r3, [r3, #26]
 8011258:	f043 0320 	orr.w	r3, r3, #32
 801125c:	b29a      	uxth	r2, r3
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	4618      	mov	r0, r3
 8011268:	f7fa fd48 	bl	800bcfc <pbuf_clen>
 801126c:	4603      	mov	r3, r0
 801126e:	461a      	mov	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011276:	4413      	add	r3, r2
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00e      	beq.n	80112a8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801128e:	2b00      	cmp	r3, #0
 8011290:	d10a      	bne.n	80112a8 <tcp_enqueue_flags+0x1b0>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011296:	2b00      	cmp	r3, #0
 8011298:	d106      	bne.n	80112a8 <tcp_enqueue_flags+0x1b0>
 801129a:	4b06      	ldr	r3, [pc, #24]	@ (80112b4 <tcp_enqueue_flags+0x1bc>)
 801129c:	f240 4265 	movw	r2, #1125	@ 0x465
 80112a0:	490b      	ldr	r1, [pc, #44]	@ (80112d0 <tcp_enqueue_flags+0x1d8>)
 80112a2:	4806      	ldr	r0, [pc, #24]	@ (80112bc <tcp_enqueue_flags+0x1c4>)
 80112a4:	f004 f824 	bl	80152f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3720      	adds	r7, #32
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	080187dc 	.word	0x080187dc
 80112b8:	08018c00 	.word	0x08018c00
 80112bc:	08018830 	.word	0x08018830
 80112c0:	08018c58 	.word	0x08018c58
 80112c4:	08018c78 	.word	0x08018c78
 80112c8:	08018cb4 	.word	0x08018cb4
 80112cc:	08018ccc 	.word	0x08018ccc
 80112d0:	08018cf8 	.word	0x08018cf8

080112d4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80112d4:	b5b0      	push	{r4, r5, r7, lr}
 80112d6:	b08a      	sub	sp, #40	@ 0x28
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d106      	bne.n	80112f0 <tcp_output+0x1c>
 80112e2:	4b8a      	ldr	r3, [pc, #552]	@ (801150c <tcp_output+0x238>)
 80112e4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80112e8:	4989      	ldr	r1, [pc, #548]	@ (8011510 <tcp_output+0x23c>)
 80112ea:	488a      	ldr	r0, [pc, #552]	@ (8011514 <tcp_output+0x240>)
 80112ec:	f004 f800 	bl	80152f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	7d1b      	ldrb	r3, [r3, #20]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d106      	bne.n	8011306 <tcp_output+0x32>
 80112f8:	4b84      	ldr	r3, [pc, #528]	@ (801150c <tcp_output+0x238>)
 80112fa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80112fe:	4986      	ldr	r1, [pc, #536]	@ (8011518 <tcp_output+0x244>)
 8011300:	4884      	ldr	r0, [pc, #528]	@ (8011514 <tcp_output+0x240>)
 8011302:	f003 fff5 	bl	80152f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011306:	4b85      	ldr	r3, [pc, #532]	@ (801151c <tcp_output+0x248>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	429a      	cmp	r2, r3
 801130e:	d101      	bne.n	8011314 <tcp_output+0x40>
    return ERR_OK;
 8011310:	2300      	movs	r3, #0
 8011312:	e1ce      	b.n	80116b2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011320:	4293      	cmp	r3, r2
 8011322:	bf28      	it	cs
 8011324:	4613      	movcs	r3, r2
 8011326:	b29b      	uxth	r3, r3
 8011328:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801132e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011332:	2b00      	cmp	r3, #0
 8011334:	d10b      	bne.n	801134e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	8b5b      	ldrh	r3, [r3, #26]
 801133a:	f003 0302 	and.w	r3, r3, #2
 801133e:	2b00      	cmp	r3, #0
 8011340:	f000 81aa 	beq.w	8011698 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f000 fdcb 	bl	8011ee0 <tcp_send_empty_ack>
 801134a:	4603      	mov	r3, r0
 801134c:	e1b1      	b.n	80116b2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801134e:	6879      	ldr	r1, [r7, #4]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	3304      	adds	r3, #4
 8011354:	461a      	mov	r2, r3
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7ff f826 	bl	80103a8 <tcp_route>
 801135c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d102      	bne.n	801136a <tcp_output+0x96>
    return ERR_RTE;
 8011364:	f06f 0303 	mvn.w	r3, #3
 8011368:	e1a3      	b.n	80116b2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d003      	beq.n	8011378 <tcp_output+0xa4>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d111      	bne.n	801139c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d002      	beq.n	8011384 <tcp_output+0xb0>
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	3304      	adds	r3, #4
 8011382:	e000      	b.n	8011386 <tcp_output+0xb2>
 8011384:	2300      	movs	r3, #0
 8011386:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d102      	bne.n	8011394 <tcp_output+0xc0>
      return ERR_RTE;
 801138e:	f06f 0303 	mvn.w	r3, #3
 8011392:	e18e      	b.n	80116b2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	681a      	ldr	r2, [r3, #0]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7f8 ffc6 	bl	800a334 <lwip_htonl>
 80113a8:	4602      	mov	r2, r0
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113b2:	8912      	ldrh	r2, [r2, #8]
 80113b4:	4413      	add	r3, r2
 80113b6:	69ba      	ldr	r2, [r7, #24]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d227      	bcs.n	801140c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80113c2:	461a      	mov	r2, r3
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d114      	bne.n	80113f4 <tcp_output+0x120>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d110      	bne.n	80113f4 <tcp_output+0x120>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d10b      	bne.n	80113f4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2200      	movs	r2, #0
 80113e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2201      	movs	r2, #1
 80113e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	8b5b      	ldrh	r3, [r3, #26]
 80113f8:	f003 0302 	and.w	r3, r3, #2
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f000 814d 	beq.w	801169c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f000 fd6c 	bl	8011ee0 <tcp_send_empty_ack>
 8011408:	4603      	mov	r3, r0
 801140a:	e152      	b.n	80116b2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011418:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801141a:	6a3b      	ldr	r3, [r7, #32]
 801141c:	2b00      	cmp	r3, #0
 801141e:	f000 811c 	beq.w	801165a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011422:	e002      	b.n	801142a <tcp_output+0x156>
 8011424:	6a3b      	ldr	r3, [r7, #32]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	623b      	str	r3, [r7, #32]
 801142a:	6a3b      	ldr	r3, [r7, #32]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d1f8      	bne.n	8011424 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011432:	e112      	b.n	801165a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	899b      	ldrh	r3, [r3, #12]
 801143a:	b29b      	uxth	r3, r3
 801143c:	4618      	mov	r0, r3
 801143e:	f7f8 ff63 	bl	800a308 <lwip_htons>
 8011442:	4603      	mov	r3, r0
 8011444:	b2db      	uxtb	r3, r3
 8011446:	f003 0304 	and.w	r3, r3, #4
 801144a:	2b00      	cmp	r3, #0
 801144c:	d006      	beq.n	801145c <tcp_output+0x188>
 801144e:	4b2f      	ldr	r3, [pc, #188]	@ (801150c <tcp_output+0x238>)
 8011450:	f240 5236 	movw	r2, #1334	@ 0x536
 8011454:	4932      	ldr	r1, [pc, #200]	@ (8011520 <tcp_output+0x24c>)
 8011456:	482f      	ldr	r0, [pc, #188]	@ (8011514 <tcp_output+0x240>)
 8011458:	f003 ff4a 	bl	80152f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011460:	2b00      	cmp	r3, #0
 8011462:	d01f      	beq.n	80114a4 <tcp_output+0x1d0>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	8b5b      	ldrh	r3, [r3, #26]
 8011468:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801146c:	2b00      	cmp	r3, #0
 801146e:	d119      	bne.n	80114a4 <tcp_output+0x1d0>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011474:	2b00      	cmp	r3, #0
 8011476:	d00b      	beq.n	8011490 <tcp_output+0x1bc>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d110      	bne.n	80114a4 <tcp_output+0x1d0>
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011486:	891a      	ldrh	r2, [r3, #8]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801148c:	429a      	cmp	r2, r3
 801148e:	d209      	bcs.n	80114a4 <tcp_output+0x1d0>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011496:	2b00      	cmp	r3, #0
 8011498:	d004      	beq.n	80114a4 <tcp_output+0x1d0>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80114a0:	2b08      	cmp	r3, #8
 80114a2:	d901      	bls.n	80114a8 <tcp_output+0x1d4>
 80114a4:	2301      	movs	r3, #1
 80114a6:	e000      	b.n	80114aa <tcp_output+0x1d6>
 80114a8:	2300      	movs	r3, #0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d106      	bne.n	80114bc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8b5b      	ldrh	r3, [r3, #26]
 80114b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	f000 80e4 	beq.w	8011684 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	7d1b      	ldrb	r3, [r3, #20]
 80114c0:	2b02      	cmp	r3, #2
 80114c2:	d00d      	beq.n	80114e0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80114c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	899b      	ldrh	r3, [r3, #12]
 80114ca:	b29c      	uxth	r4, r3
 80114cc:	2010      	movs	r0, #16
 80114ce:	f7f8 ff1b 	bl	800a308 <lwip_htons>
 80114d2:	4603      	mov	r3, r0
 80114d4:	461a      	mov	r2, r3
 80114d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	4322      	orrs	r2, r4
 80114dc:	b292      	uxth	r2, r2
 80114de:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80114e0:	697a      	ldr	r2, [r7, #20]
 80114e2:	6879      	ldr	r1, [r7, #4]
 80114e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80114e6:	f000 f909 	bl	80116fc <tcp_output_segment>
 80114ea:	4603      	mov	r3, r0
 80114ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80114ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d016      	beq.n	8011524 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	8b5b      	ldrh	r3, [r3, #26]
 80114fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114fe:	b29a      	uxth	r2, r3
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	835a      	strh	r2, [r3, #26]
      return err;
 8011504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011508:	e0d3      	b.n	80116b2 <tcp_output+0x3de>
 801150a:	bf00      	nop
 801150c:	080187dc 	.word	0x080187dc
 8011510:	08018d20 	.word	0x08018d20
 8011514:	08018830 	.word	0x08018830
 8011518:	08018d38 	.word	0x08018d38
 801151c:	20017200 	.word	0x20017200
 8011520:	08018d60 	.word	0x08018d60
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	7d1b      	ldrb	r3, [r3, #20]
 8011530:	2b02      	cmp	r3, #2
 8011532:	d006      	beq.n	8011542 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	8b5b      	ldrh	r3, [r3, #26]
 8011538:	f023 0303 	bic.w	r3, r3, #3
 801153c:	b29a      	uxth	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	4618      	mov	r0, r3
 801154a:	f7f8 fef3 	bl	800a334 <lwip_htonl>
 801154e:	4604      	mov	r4, r0
 8011550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011552:	891b      	ldrh	r3, [r3, #8]
 8011554:	461d      	mov	r5, r3
 8011556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	899b      	ldrh	r3, [r3, #12]
 801155c:	b29b      	uxth	r3, r3
 801155e:	4618      	mov	r0, r3
 8011560:	f7f8 fed2 	bl	800a308 <lwip_htons>
 8011564:	4603      	mov	r3, r0
 8011566:	b2db      	uxtb	r3, r3
 8011568:	f003 0303 	and.w	r3, r3, #3
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <tcp_output+0x2a0>
 8011570:	2301      	movs	r3, #1
 8011572:	e000      	b.n	8011576 <tcp_output+0x2a2>
 8011574:	2300      	movs	r3, #0
 8011576:	442b      	add	r3, r5
 8011578:	4423      	add	r3, r4
 801157a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	2b00      	cmp	r3, #0
 8011586:	da02      	bge.n	801158e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	68ba      	ldr	r2, [r7, #8]
 801158c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011590:	891b      	ldrh	r3, [r3, #8]
 8011592:	461c      	mov	r4, r3
 8011594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	899b      	ldrh	r3, [r3, #12]
 801159a:	b29b      	uxth	r3, r3
 801159c:	4618      	mov	r0, r3
 801159e:	f7f8 feb3 	bl	800a308 <lwip_htons>
 80115a2:	4603      	mov	r3, r0
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	f003 0303 	and.w	r3, r3, #3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d001      	beq.n	80115b2 <tcp_output+0x2de>
 80115ae:	2301      	movs	r3, #1
 80115b0:	e000      	b.n	80115b4 <tcp_output+0x2e0>
 80115b2:	2300      	movs	r3, #0
 80115b4:	4423      	add	r3, r4
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d049      	beq.n	801164e <tcp_output+0x37a>
      seg->next = NULL;
 80115ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115bc:	2200      	movs	r2, #0
 80115be:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d105      	bne.n	80115d4 <tcp_output+0x300>
        pcb->unacked = seg;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115cc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80115ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d0:	623b      	str	r3, [r7, #32]
 80115d2:	e03f      	b.n	8011654 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80115d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	4618      	mov	r0, r3
 80115dc:	f7f8 feaa 	bl	800a334 <lwip_htonl>
 80115e0:	4604      	mov	r4, r0
 80115e2:	6a3b      	ldr	r3, [r7, #32]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7f8 fea3 	bl	800a334 <lwip_htonl>
 80115ee:	4603      	mov	r3, r0
 80115f0:	1ae3      	subs	r3, r4, r3
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	da24      	bge.n	8011640 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	3370      	adds	r3, #112	@ 0x70
 80115fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115fc:	e002      	b.n	8011604 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d011      	beq.n	8011630 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	4618      	mov	r0, r3
 8011616:	f7f8 fe8d 	bl	800a334 <lwip_htonl>
 801161a:	4604      	mov	r4, r0
 801161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	4618      	mov	r0, r3
 8011624:	f7f8 fe86 	bl	800a334 <lwip_htonl>
 8011628:	4603      	mov	r3, r0
 801162a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801162c:	2b00      	cmp	r3, #0
 801162e:	dbe6      	blt.n	80115fe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011636:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801163c:	601a      	str	r2, [r3, #0]
 801163e:	e009      	b.n	8011654 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011640:	6a3b      	ldr	r3, [r7, #32]
 8011642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011644:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	623b      	str	r3, [r7, #32]
 801164c:	e002      	b.n	8011654 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801164e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011650:	f7fb ff01 	bl	800d456 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011658:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165c:	2b00      	cmp	r3, #0
 801165e:	d012      	beq.n	8011686 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	4618      	mov	r0, r3
 8011668:	f7f8 fe64 	bl	800a334 <lwip_htonl>
 801166c:	4602      	mov	r2, r0
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011672:	1ad3      	subs	r3, r2, r3
 8011674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011676:	8912      	ldrh	r2, [r2, #8]
 8011678:	4413      	add	r3, r2
  while (seg != NULL &&
 801167a:	69ba      	ldr	r2, [r7, #24]
 801167c:	429a      	cmp	r2, r3
 801167e:	f4bf aed9 	bcs.w	8011434 <tcp_output+0x160>
 8011682:	e000      	b.n	8011686 <tcp_output+0x3b2>
      break;
 8011684:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801168a:	2b00      	cmp	r3, #0
 801168c:	d108      	bne.n	80116a0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2200      	movs	r2, #0
 8011692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011696:	e004      	b.n	80116a2 <tcp_output+0x3ce>
    goto output_done;
 8011698:	bf00      	nop
 801169a:	e002      	b.n	80116a2 <tcp_output+0x3ce>
    goto output_done;
 801169c:	bf00      	nop
 801169e:	e000      	b.n	80116a2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80116a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	8b5b      	ldrh	r3, [r3, #26]
 80116a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80116b0:	2300      	movs	r3, #0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3728      	adds	r7, #40	@ 0x28
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bdb0      	pop	{r4, r5, r7, pc}
 80116ba:	bf00      	nop

080116bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d106      	bne.n	80116d8 <tcp_output_segment_busy+0x1c>
 80116ca:	4b09      	ldr	r3, [pc, #36]	@ (80116f0 <tcp_output_segment_busy+0x34>)
 80116cc:	f240 529a 	movw	r2, #1434	@ 0x59a
 80116d0:	4908      	ldr	r1, [pc, #32]	@ (80116f4 <tcp_output_segment_busy+0x38>)
 80116d2:	4809      	ldr	r0, [pc, #36]	@ (80116f8 <tcp_output_segment_busy+0x3c>)
 80116d4:	f003 fe0c 	bl	80152f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	7b9b      	ldrb	r3, [r3, #14]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d001      	beq.n	80116e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80116e2:	2301      	movs	r3, #1
 80116e4:	e000      	b.n	80116e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80116e6:	2300      	movs	r3, #0
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	080187dc 	.word	0x080187dc
 80116f4:	08018d78 	.word	0x08018d78
 80116f8:	08018830 	.word	0x08018830

080116fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80116fc:	b5b0      	push	{r4, r5, r7, lr}
 80116fe:	b08c      	sub	sp, #48	@ 0x30
 8011700:	af04      	add	r7, sp, #16
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d106      	bne.n	801171c <tcp_output_segment+0x20>
 801170e:	4b64      	ldr	r3, [pc, #400]	@ (80118a0 <tcp_output_segment+0x1a4>)
 8011710:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011714:	4963      	ldr	r1, [pc, #396]	@ (80118a4 <tcp_output_segment+0x1a8>)
 8011716:	4864      	ldr	r0, [pc, #400]	@ (80118a8 <tcp_output_segment+0x1ac>)
 8011718:	f003 fdea 	bl	80152f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d106      	bne.n	8011730 <tcp_output_segment+0x34>
 8011722:	4b5f      	ldr	r3, [pc, #380]	@ (80118a0 <tcp_output_segment+0x1a4>)
 8011724:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011728:	4960      	ldr	r1, [pc, #384]	@ (80118ac <tcp_output_segment+0x1b0>)
 801172a:	485f      	ldr	r0, [pc, #380]	@ (80118a8 <tcp_output_segment+0x1ac>)
 801172c:	f003 fde0 	bl	80152f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <tcp_output_segment+0x48>
 8011736:	4b5a      	ldr	r3, [pc, #360]	@ (80118a0 <tcp_output_segment+0x1a4>)
 8011738:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801173c:	495c      	ldr	r1, [pc, #368]	@ (80118b0 <tcp_output_segment+0x1b4>)
 801173e:	485a      	ldr	r0, [pc, #360]	@ (80118a8 <tcp_output_segment+0x1ac>)
 8011740:	f003 fdd6 	bl	80152f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f7ff ffb9 	bl	80116bc <tcp_output_segment_busy>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	d001      	beq.n	8011754 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011750:	2300      	movs	r3, #0
 8011752:	e0a1      	b.n	8011898 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	68dc      	ldr	r4, [r3, #12]
 801175c:	4610      	mov	r0, r2
 801175e:	f7f8 fde9 	bl	800a334 <lwip_htonl>
 8011762:	4603      	mov	r3, r0
 8011764:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	68dc      	ldr	r4, [r3, #12]
 801176e:	4610      	mov	r0, r2
 8011770:	f7f8 fdca 	bl	800a308 <lwip_htons>
 8011774:	4603      	mov	r3, r0
 8011776:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801177c:	68ba      	ldr	r2, [r7, #8]
 801177e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011780:	441a      	add	r2, r3
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	3314      	adds	r3, #20
 801178c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	7a9b      	ldrb	r3, [r3, #10]
 8011792:	f003 0301 	and.w	r3, r3, #1
 8011796:	2b00      	cmp	r3, #0
 8011798:	d015      	beq.n	80117c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	3304      	adds	r3, #4
 801179e:	461a      	mov	r2, r3
 80117a0:	6879      	ldr	r1, [r7, #4]
 80117a2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80117a6:	f7fc fa39 	bl	800dc1c <tcp_eff_send_mss_netif>
 80117aa:	4603      	mov	r3, r0
 80117ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80117ae:	8b7b      	ldrh	r3, [r7, #26]
 80117b0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7f8 fdbd 	bl	800a334 <lwip_htonl>
 80117ba:	4602      	mov	r2, r0
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	601a      	str	r2, [r3, #0]
    opts += 1;
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	3304      	adds	r3, #4
 80117c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	da02      	bge.n	80117d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	2200      	movs	r2, #0
 80117d4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d10c      	bne.n	80117f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80117de:	4b35      	ldr	r3, [pc, #212]	@ (80118b4 <tcp_output_segment+0x1b8>)
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7f8 fda1 	bl	800a334 <lwip_htonl>
 80117f2:	4602      	mov	r2, r0
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	68da      	ldr	r2, [r3, #12]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	8959      	ldrh	r1, [r3, #10]
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	8b3a      	ldrh	r2, [r7, #24]
 8011812:	1a8a      	subs	r2, r1, r2
 8011814:	b292      	uxth	r2, r2
 8011816:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	8919      	ldrh	r1, [r3, #8]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	8b3a      	ldrh	r2, [r7, #24]
 8011824:	1a8a      	subs	r2, r1, r2
 8011826:	b292      	uxth	r2, r2
 8011828:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	68fa      	ldr	r2, [r7, #12]
 8011830:	68d2      	ldr	r2, [r2, #12]
 8011832:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	2200      	movs	r2, #0
 801183a:	741a      	strb	r2, [r3, #16]
 801183c:	2200      	movs	r2, #0
 801183e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	68da      	ldr	r2, [r3, #12]
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	7a9b      	ldrb	r3, [r3, #10]
 8011848:	f003 0301 	and.w	r3, r3, #1
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <tcp_output_segment+0x158>
 8011850:	2318      	movs	r3, #24
 8011852:	e000      	b.n	8011856 <tcp_output_segment+0x15a>
 8011854:	2314      	movs	r3, #20
 8011856:	4413      	add	r3, r2
 8011858:	69fa      	ldr	r2, [r7, #28]
 801185a:	429a      	cmp	r2, r3
 801185c:	d006      	beq.n	801186c <tcp_output_segment+0x170>
 801185e:	4b10      	ldr	r3, [pc, #64]	@ (80118a0 <tcp_output_segment+0x1a4>)
 8011860:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011864:	4914      	ldr	r1, [pc, #80]	@ (80118b8 <tcp_output_segment+0x1bc>)
 8011866:	4810      	ldr	r0, [pc, #64]	@ (80118a8 <tcp_output_segment+0x1ac>)
 8011868:	f003 fd42 	bl	80152f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	6858      	ldr	r0, [r3, #4]
 8011870:	68b9      	ldr	r1, [r7, #8]
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	1d1c      	adds	r4, r3, #4
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	7add      	ldrb	r5, [r3, #11]
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	7a9b      	ldrb	r3, [r3, #10]
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	9202      	str	r2, [sp, #8]
 8011882:	2206      	movs	r2, #6
 8011884:	9201      	str	r2, [sp, #4]
 8011886:	9300      	str	r3, [sp, #0]
 8011888:	462b      	mov	r3, r5
 801188a:	4622      	mov	r2, r4
 801188c:	f002 fa64 	bl	8013d58 <ip4_output_if>
 8011890:	4603      	mov	r3, r0
 8011892:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011894:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011898:	4618      	mov	r0, r3
 801189a:	3720      	adds	r7, #32
 801189c:	46bd      	mov	sp, r7
 801189e:	bdb0      	pop	{r4, r5, r7, pc}
 80118a0:	080187dc 	.word	0x080187dc
 80118a4:	08018da0 	.word	0x08018da0
 80118a8:	08018830 	.word	0x08018830
 80118ac:	08018dc0 	.word	0x08018dc0
 80118b0:	08018de0 	.word	0x08018de0
 80118b4:	200171b4 	.word	0x200171b4
 80118b8:	08018e04 	.word	0x08018e04

080118bc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80118bc:	b5b0      	push	{r4, r5, r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d106      	bne.n	80118d8 <tcp_rexmit_rto_prepare+0x1c>
 80118ca:	4b31      	ldr	r3, [pc, #196]	@ (8011990 <tcp_rexmit_rto_prepare+0xd4>)
 80118cc:	f240 6263 	movw	r2, #1635	@ 0x663
 80118d0:	4930      	ldr	r1, [pc, #192]	@ (8011994 <tcp_rexmit_rto_prepare+0xd8>)
 80118d2:	4831      	ldr	r0, [pc, #196]	@ (8011998 <tcp_rexmit_rto_prepare+0xdc>)
 80118d4:	f003 fd0c 	bl	80152f0 <iprintf>

  if (pcb->unacked == NULL) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d102      	bne.n	80118e6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80118e0:	f06f 0305 	mvn.w	r3, #5
 80118e4:	e050      	b.n	8011988 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118ea:	60fb      	str	r3, [r7, #12]
 80118ec:	e00b      	b.n	8011906 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f7ff fee4 	bl	80116bc <tcp_output_segment_busy>
 80118f4:	4603      	mov	r3, r0
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d002      	beq.n	8011900 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80118fa:	f06f 0305 	mvn.w	r3, #5
 80118fe:	e043      	b.n	8011988 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	60fb      	str	r3, [r7, #12]
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d1ef      	bne.n	80118ee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801190e:	68f8      	ldr	r0, [r7, #12]
 8011910:	f7ff fed4 	bl	80116bc <tcp_output_segment_busy>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d002      	beq.n	8011920 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801191a:	f06f 0305 	mvn.w	r3, #5
 801191e:	e033      	b.n	8011988 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2200      	movs	r2, #0
 8011934:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	8b5b      	ldrh	r3, [r3, #26]
 801193a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801193e:	b29a      	uxth	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	4618      	mov	r0, r3
 801194c:	f7f8 fcf2 	bl	800a334 <lwip_htonl>
 8011950:	4604      	mov	r4, r0
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	891b      	ldrh	r3, [r3, #8]
 8011956:	461d      	mov	r5, r3
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	899b      	ldrh	r3, [r3, #12]
 801195e:	b29b      	uxth	r3, r3
 8011960:	4618      	mov	r0, r3
 8011962:	f7f8 fcd1 	bl	800a308 <lwip_htons>
 8011966:	4603      	mov	r3, r0
 8011968:	b2db      	uxtb	r3, r3
 801196a:	f003 0303 	and.w	r3, r3, #3
 801196e:	2b00      	cmp	r3, #0
 8011970:	d001      	beq.n	8011976 <tcp_rexmit_rto_prepare+0xba>
 8011972:	2301      	movs	r3, #1
 8011974:	e000      	b.n	8011978 <tcp_rexmit_rto_prepare+0xbc>
 8011976:	2300      	movs	r3, #0
 8011978:	442b      	add	r3, r5
 801197a:	18e2      	adds	r2, r4, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2200      	movs	r2, #0
 8011984:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8011986:	2300      	movs	r3, #0
}
 8011988:	4618      	mov	r0, r3
 801198a:	3710      	adds	r7, #16
 801198c:	46bd      	mov	sp, r7
 801198e:	bdb0      	pop	{r4, r5, r7, pc}
 8011990:	080187dc 	.word	0x080187dc
 8011994:	08018e18 	.word	0x08018e18
 8011998:	08018830 	.word	0x08018830

0801199c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d106      	bne.n	80119b8 <tcp_rexmit_rto_commit+0x1c>
 80119aa:	4b0d      	ldr	r3, [pc, #52]	@ (80119e0 <tcp_rexmit_rto_commit+0x44>)
 80119ac:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80119b0:	490c      	ldr	r1, [pc, #48]	@ (80119e4 <tcp_rexmit_rto_commit+0x48>)
 80119b2:	480d      	ldr	r0, [pc, #52]	@ (80119e8 <tcp_rexmit_rto_commit+0x4c>)
 80119b4:	f003 fc9c 	bl	80152f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80119be:	2bff      	cmp	r3, #255	@ 0xff
 80119c0:	d007      	beq.n	80119d2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80119c8:	3301      	adds	r3, #1
 80119ca:	b2da      	uxtb	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f7ff fc7e 	bl	80112d4 <tcp_output>
}
 80119d8:	bf00      	nop
 80119da:	3708      	adds	r7, #8
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	080187dc 	.word	0x080187dc
 80119e4:	08018e3c 	.word	0x08018e3c
 80119e8:	08018830 	.word	0x08018830

080119ec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d106      	bne.n	8011a08 <tcp_rexmit_rto+0x1c>
 80119fa:	4b0a      	ldr	r3, [pc, #40]	@ (8011a24 <tcp_rexmit_rto+0x38>)
 80119fc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011a00:	4909      	ldr	r1, [pc, #36]	@ (8011a28 <tcp_rexmit_rto+0x3c>)
 8011a02:	480a      	ldr	r0, [pc, #40]	@ (8011a2c <tcp_rexmit_rto+0x40>)
 8011a04:	f003 fc74 	bl	80152f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f7ff ff57 	bl	80118bc <tcp_rexmit_rto_prepare>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d102      	bne.n	8011a1a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f7ff ffc1 	bl	801199c <tcp_rexmit_rto_commit>
  }
}
 8011a1a:	bf00      	nop
 8011a1c:	3708      	adds	r7, #8
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	080187dc 	.word	0x080187dc
 8011a28:	08018e60 	.word	0x08018e60
 8011a2c:	08018830 	.word	0x08018830

08011a30 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011a30:	b590      	push	{r4, r7, lr}
 8011a32:	b085      	sub	sp, #20
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d106      	bne.n	8011a4c <tcp_rexmit+0x1c>
 8011a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8011afc <tcp_rexmit+0xcc>)
 8011a40:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8011a44:	492e      	ldr	r1, [pc, #184]	@ (8011b00 <tcp_rexmit+0xd0>)
 8011a46:	482f      	ldr	r0, [pc, #188]	@ (8011b04 <tcp_rexmit+0xd4>)
 8011a48:	f003 fc52 	bl	80152f0 <iprintf>

  if (pcb->unacked == NULL) {
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d102      	bne.n	8011a5a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011a54:	f06f 0305 	mvn.w	r3, #5
 8011a58:	e04c      	b.n	8011af4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a5e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011a60:	68b8      	ldr	r0, [r7, #8]
 8011a62:	f7ff fe2b 	bl	80116bc <tcp_output_segment_busy>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d002      	beq.n	8011a72 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011a6c:	f06f 0305 	mvn.w	r3, #5
 8011a70:	e040      	b.n	8011af4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	336c      	adds	r3, #108	@ 0x6c
 8011a7e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a80:	e002      	b.n	8011a88 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d011      	beq.n	8011ab4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7f8 fc4b 	bl	800a334 <lwip_htonl>
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7f8 fc44 	bl	800a334 <lwip_htonl>
 8011aac:	4603      	mov	r3, r0
 8011aae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	dbe6      	blt.n	8011a82 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d103      	bne.n	8011ad2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2200      	movs	r2, #0
 8011ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011ad8:	2bff      	cmp	r3, #255	@ 0xff
 8011ada:	d007      	beq.n	8011aec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	b2da      	uxtb	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2200      	movs	r2, #0
 8011af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3714      	adds	r7, #20
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd90      	pop	{r4, r7, pc}
 8011afc:	080187dc 	.word	0x080187dc
 8011b00:	08018e7c 	.word	0x08018e7c
 8011b04:	08018830 	.word	0x08018830

08011b08 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d106      	bne.n	8011b24 <tcp_rexmit_fast+0x1c>
 8011b16:	4b2a      	ldr	r3, [pc, #168]	@ (8011bc0 <tcp_rexmit_fast+0xb8>)
 8011b18:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8011b1c:	4929      	ldr	r1, [pc, #164]	@ (8011bc4 <tcp_rexmit_fast+0xbc>)
 8011b1e:	482a      	ldr	r0, [pc, #168]	@ (8011bc8 <tcp_rexmit_fast+0xc0>)
 8011b20:	f003 fbe6 	bl	80152f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d044      	beq.n	8011bb6 <tcp_rexmit_fast+0xae>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	8b5b      	ldrh	r3, [r3, #26]
 8011b30:	f003 0304 	and.w	r3, r3, #4
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d13e      	bne.n	8011bb6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f7ff ff79 	bl	8011a30 <tcp_rexmit>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d138      	bne.n	8011bb6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011b50:	4293      	cmp	r3, r2
 8011b52:	bf28      	it	cs
 8011b54:	4613      	movcs	r3, r2
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	0fda      	lsrs	r2, r3, #31
 8011b5a:	4413      	add	r3, r2
 8011b5c:	105b      	asrs	r3, r3, #1
 8011b5e:	b29a      	uxth	r2, r3
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b72:	005b      	lsls	r3, r3, #1
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d206      	bcs.n	8011b86 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b7c:	005b      	lsls	r3, r3, #1
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b90:	4619      	mov	r1, r3
 8011b92:	0049      	lsls	r1, r1, #1
 8011b94:	440b      	add	r3, r1
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	4413      	add	r3, r2
 8011b9a:	b29a      	uxth	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	8b5b      	ldrh	r3, [r3, #26]
 8011ba6:	f043 0304 	orr.w	r3, r3, #4
 8011baa:	b29a      	uxth	r2, r3
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011bb6:	bf00      	nop
 8011bb8:	3708      	adds	r7, #8
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	080187dc 	.word	0x080187dc
 8011bc4:	08018e94 	.word	0x08018e94
 8011bc8:	08018830 	.word	0x08018830

08011bcc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b086      	sub	sp, #24
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	607b      	str	r3, [r7, #4]
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	817b      	strh	r3, [r7, #10]
 8011bda:	4613      	mov	r3, r2
 8011bdc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011bde:	897a      	ldrh	r2, [r7, #10]
 8011be0:	893b      	ldrh	r3, [r7, #8]
 8011be2:	4413      	add	r3, r2
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	3314      	adds	r3, #20
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011bee:	4619      	mov	r1, r3
 8011bf0:	2022      	movs	r0, #34	@ 0x22
 8011bf2:	f7f9 fd11 	bl	800b618 <pbuf_alloc>
 8011bf6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d04d      	beq.n	8011c9a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011bfe:	897b      	ldrh	r3, [r7, #10]
 8011c00:	3313      	adds	r3, #19
 8011c02:	697a      	ldr	r2, [r7, #20]
 8011c04:	8952      	ldrh	r2, [r2, #10]
 8011c06:	4293      	cmp	r3, r2
 8011c08:	db06      	blt.n	8011c18 <tcp_output_alloc_header_common+0x4c>
 8011c0a:	4b26      	ldr	r3, [pc, #152]	@ (8011ca4 <tcp_output_alloc_header_common+0xd8>)
 8011c0c:	f240 7223 	movw	r2, #1827	@ 0x723
 8011c10:	4925      	ldr	r1, [pc, #148]	@ (8011ca8 <tcp_output_alloc_header_common+0xdc>)
 8011c12:	4826      	ldr	r0, [pc, #152]	@ (8011cac <tcp_output_alloc_header_common+0xe0>)
 8011c14:	f003 fb6c 	bl	80152f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011c1e:	8c3b      	ldrh	r3, [r7, #32]
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7f8 fb71 	bl	800a308 <lwip_htons>
 8011c26:	4603      	mov	r3, r0
 8011c28:	461a      	mov	r2, r3
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011c2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7f8 fb69 	bl	800a308 <lwip_htons>
 8011c36:	4603      	mov	r3, r0
 8011c38:	461a      	mov	r2, r3
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f7f8 fb75 	bl	800a334 <lwip_htonl>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011c50:	897b      	ldrh	r3, [r7, #10]
 8011c52:	089b      	lsrs	r3, r3, #2
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	3305      	adds	r3, #5
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	031b      	lsls	r3, r3, #12
 8011c5c:	b29a      	uxth	r2, r3
 8011c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011c62:	b29b      	uxth	r3, r3
 8011c64:	4313      	orrs	r3, r2
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7f8 fb4d 	bl	800a308 <lwip_htons>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	461a      	mov	r2, r3
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011c76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7f8 fb45 	bl	800a308 <lwip_htons>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	461a      	mov	r2, r3
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	741a      	strb	r2, [r3, #16]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	2200      	movs	r2, #0
 8011c94:	749a      	strb	r2, [r3, #18]
 8011c96:	2200      	movs	r2, #0
 8011c98:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011c9a:	697b      	ldr	r3, [r7, #20]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3718      	adds	r7, #24
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	080187dc 	.word	0x080187dc
 8011ca8:	08018eb4 	.word	0x08018eb4
 8011cac:	08018830 	.word	0x08018830

08011cb0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011cb0:	b5b0      	push	{r4, r5, r7, lr}
 8011cb2:	b08a      	sub	sp, #40	@ 0x28
 8011cb4:	af04      	add	r7, sp, #16
 8011cb6:	60f8      	str	r0, [r7, #12]
 8011cb8:	607b      	str	r3, [r7, #4]
 8011cba:	460b      	mov	r3, r1
 8011cbc:	817b      	strh	r3, [r7, #10]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d106      	bne.n	8011cd6 <tcp_output_alloc_header+0x26>
 8011cc8:	4b15      	ldr	r3, [pc, #84]	@ (8011d20 <tcp_output_alloc_header+0x70>)
 8011cca:	f240 7242 	movw	r2, #1858	@ 0x742
 8011cce:	4915      	ldr	r1, [pc, #84]	@ (8011d24 <tcp_output_alloc_header+0x74>)
 8011cd0:	4815      	ldr	r0, [pc, #84]	@ (8011d28 <tcp_output_alloc_header+0x78>)
 8011cd2:	f003 fb0d 	bl	80152f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	8adb      	ldrh	r3, [r3, #22]
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	8b12      	ldrh	r2, [r2, #24]
 8011ce2:	68f9      	ldr	r1, [r7, #12]
 8011ce4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011ce6:	893d      	ldrh	r5, [r7, #8]
 8011ce8:	897c      	ldrh	r4, [r7, #10]
 8011cea:	9103      	str	r1, [sp, #12]
 8011cec:	2110      	movs	r1, #16
 8011cee:	9102      	str	r1, [sp, #8]
 8011cf0:	9201      	str	r2, [sp, #4]
 8011cf2:	9300      	str	r3, [sp, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	462a      	mov	r2, r5
 8011cf8:	4621      	mov	r1, r4
 8011cfa:	f7ff ff67 	bl	8011bcc <tcp_output_alloc_header_common>
 8011cfe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d006      	beq.n	8011d14 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011d0e:	441a      	add	r2, r3
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011d14:	697b      	ldr	r3, [r7, #20]
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3718      	adds	r7, #24
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	080187dc 	.word	0x080187dc
 8011d24:	08018ee4 	.word	0x08018ee4
 8011d28:	08018830 	.word	0x08018830

08011d2c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b088      	sub	sp, #32
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	4611      	mov	r1, r2
 8011d38:	461a      	mov	r2, r3
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	71fb      	strb	r3, [r7, #7]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d106      	bne.n	8011d5a <tcp_output_fill_options+0x2e>
 8011d4c:	4b12      	ldr	r3, [pc, #72]	@ (8011d98 <tcp_output_fill_options+0x6c>)
 8011d4e:	f240 7256 	movw	r2, #1878	@ 0x756
 8011d52:	4912      	ldr	r1, [pc, #72]	@ (8011d9c <tcp_output_fill_options+0x70>)
 8011d54:	4812      	ldr	r0, [pc, #72]	@ (8011da0 <tcp_output_fill_options+0x74>)
 8011d56:	f003 facb 	bl	80152f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	3314      	adds	r3, #20
 8011d64:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011d66:	8bfb      	ldrh	r3, [r7, #30]
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	79fb      	ldrb	r3, [r7, #7]
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	f003 0304 	and.w	r3, r3, #4
 8011d74:	4413      	add	r3, r2
 8011d76:	3314      	adds	r3, #20
 8011d78:	69ba      	ldr	r2, [r7, #24]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	697a      	ldr	r2, [r7, #20]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d006      	beq.n	8011d90 <tcp_output_fill_options+0x64>
 8011d82:	4b05      	ldr	r3, [pc, #20]	@ (8011d98 <tcp_output_fill_options+0x6c>)
 8011d84:	f240 7275 	movw	r2, #1909	@ 0x775
 8011d88:	4906      	ldr	r1, [pc, #24]	@ (8011da4 <tcp_output_fill_options+0x78>)
 8011d8a:	4805      	ldr	r0, [pc, #20]	@ (8011da0 <tcp_output_fill_options+0x74>)
 8011d8c:	f003 fab0 	bl	80152f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011d90:	bf00      	nop
 8011d92:	3720      	adds	r7, #32
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	080187dc 	.word	0x080187dc
 8011d9c:	08018f0c 	.word	0x08018f0c
 8011da0:	08018830 	.word	0x08018830
 8011da4:	08018e04 	.word	0x08018e04

08011da8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b08a      	sub	sp, #40	@ 0x28
 8011dac:	af04      	add	r7, sp, #16
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	607a      	str	r2, [r7, #4]
 8011db4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d106      	bne.n	8011dca <tcp_output_control_segment+0x22>
 8011dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8011e30 <tcp_output_control_segment+0x88>)
 8011dbe:	f240 7287 	movw	r2, #1927	@ 0x787
 8011dc2:	491c      	ldr	r1, [pc, #112]	@ (8011e34 <tcp_output_control_segment+0x8c>)
 8011dc4:	481c      	ldr	r0, [pc, #112]	@ (8011e38 <tcp_output_control_segment+0x90>)
 8011dc6:	f003 fa93 	bl	80152f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011dca:	683a      	ldr	r2, [r7, #0]
 8011dcc:	6879      	ldr	r1, [r7, #4]
 8011dce:	68f8      	ldr	r0, [r7, #12]
 8011dd0:	f7fe faea 	bl	80103a8 <tcp_route>
 8011dd4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d102      	bne.n	8011de2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011ddc:	23fc      	movs	r3, #252	@ 0xfc
 8011dde:	75fb      	strb	r3, [r7, #23]
 8011de0:	e01c      	b.n	8011e1c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d006      	beq.n	8011df6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	7adb      	ldrb	r3, [r3, #11]
 8011dec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	7a9b      	ldrb	r3, [r3, #10]
 8011df2:	757b      	strb	r3, [r7, #21]
 8011df4:	e003      	b.n	8011dfe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011df6:	23ff      	movs	r3, #255	@ 0xff
 8011df8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011dfe:	7dba      	ldrb	r2, [r7, #22]
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	9302      	str	r3, [sp, #8]
 8011e04:	2306      	movs	r3, #6
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	7d7b      	ldrb	r3, [r7, #21]
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	683a      	ldr	r2, [r7, #0]
 8011e10:	6879      	ldr	r1, [r7, #4]
 8011e12:	68b8      	ldr	r0, [r7, #8]
 8011e14:	f001 ffa0 	bl	8013d58 <ip4_output_if>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011e1c:	68b8      	ldr	r0, [r7, #8]
 8011e1e:	f7f9 fedf 	bl	800bbe0 <pbuf_free>
  return err;
 8011e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3718      	adds	r7, #24
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	080187dc 	.word	0x080187dc
 8011e34:	08018f34 	.word	0x08018f34
 8011e38:	08018830 	.word	0x08018830

08011e3c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011e3c:	b590      	push	{r4, r7, lr}
 8011e3e:	b08b      	sub	sp, #44	@ 0x2c
 8011e40:	af04      	add	r7, sp, #16
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
 8011e48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d106      	bne.n	8011e5e <tcp_rst+0x22>
 8011e50:	4b1f      	ldr	r3, [pc, #124]	@ (8011ed0 <tcp_rst+0x94>)
 8011e52:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011e56:	491f      	ldr	r1, [pc, #124]	@ (8011ed4 <tcp_rst+0x98>)
 8011e58:	481f      	ldr	r0, [pc, #124]	@ (8011ed8 <tcp_rst+0x9c>)
 8011e5a:	f003 fa49 	bl	80152f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d106      	bne.n	8011e72 <tcp_rst+0x36>
 8011e64:	4b1a      	ldr	r3, [pc, #104]	@ (8011ed0 <tcp_rst+0x94>)
 8011e66:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011e6a:	491c      	ldr	r1, [pc, #112]	@ (8011edc <tcp_rst+0xa0>)
 8011e6c:	481a      	ldr	r0, [pc, #104]	@ (8011ed8 <tcp_rst+0x9c>)
 8011e6e:	f003 fa3f 	bl	80152f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e72:	2300      	movs	r3, #0
 8011e74:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011e76:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011e7a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011e7c:	7dfb      	ldrb	r3, [r7, #23]
 8011e7e:	b29c      	uxth	r4, r3
 8011e80:	68b8      	ldr	r0, [r7, #8]
 8011e82:	f7f8 fa57 	bl	800a334 <lwip_htonl>
 8011e86:	4602      	mov	r2, r0
 8011e88:	8abb      	ldrh	r3, [r7, #20]
 8011e8a:	9303      	str	r3, [sp, #12]
 8011e8c:	2314      	movs	r3, #20
 8011e8e:	9302      	str	r3, [sp, #8]
 8011e90:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011e92:	9301      	str	r3, [sp, #4]
 8011e94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	4613      	mov	r3, r2
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	4621      	mov	r1, r4
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f7ff fe94 	bl	8011bcc <tcp_output_alloc_header_common>
 8011ea4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00c      	beq.n	8011ec6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011eac:	7dfb      	ldrb	r3, [r7, #23]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	6939      	ldr	r1, [r7, #16]
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f7ff ff3a 	bl	8011d2c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eba:	683a      	ldr	r2, [r7, #0]
 8011ebc:	6939      	ldr	r1, [r7, #16]
 8011ebe:	68f8      	ldr	r0, [r7, #12]
 8011ec0:	f7ff ff72 	bl	8011da8 <tcp_output_control_segment>
 8011ec4:	e000      	b.n	8011ec8 <tcp_rst+0x8c>
    return;
 8011ec6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011ec8:	371c      	adds	r7, #28
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd90      	pop	{r4, r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	080187dc 	.word	0x080187dc
 8011ed4:	08018f60 	.word	0x08018f60
 8011ed8:	08018830 	.word	0x08018830
 8011edc:	08018f7c 	.word	0x08018f7c

08011ee0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011ee0:	b590      	push	{r4, r7, lr}
 8011ee2:	b087      	sub	sp, #28
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d106      	bne.n	8011f04 <tcp_send_empty_ack+0x24>
 8011ef6:	4b28      	ldr	r3, [pc, #160]	@ (8011f98 <tcp_send_empty_ack+0xb8>)
 8011ef8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011efc:	4927      	ldr	r1, [pc, #156]	@ (8011f9c <tcp_send_empty_ack+0xbc>)
 8011efe:	4828      	ldr	r0, [pc, #160]	@ (8011fa0 <tcp_send_empty_ack+0xc0>)
 8011f00:	f003 f9f6 	bl	80152f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011f04:	7dfb      	ldrb	r3, [r7, #23]
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	f003 0304 	and.w	r3, r3, #4
 8011f0e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011f10:	7d7b      	ldrb	r3, [r7, #21]
 8011f12:	b29c      	uxth	r4, r3
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7f8 fa0b 	bl	800a334 <lwip_htonl>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2200      	movs	r2, #0
 8011f22:	4621      	mov	r1, r4
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7ff fec3 	bl	8011cb0 <tcp_output_alloc_header>
 8011f2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d109      	bne.n	8011f46 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	8b5b      	ldrh	r3, [r3, #26]
 8011f36:	f043 0303 	orr.w	r3, r3, #3
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011f40:	f06f 0301 	mvn.w	r3, #1
 8011f44:	e023      	b.n	8011f8e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011f46:	7dbb      	ldrb	r3, [r7, #22]
 8011f48:	7dfa      	ldrb	r2, [r7, #23]
 8011f4a:	6939      	ldr	r1, [r7, #16]
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f7ff feed 	bl	8011d2c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	3304      	adds	r3, #4
 8011f58:	6939      	ldr	r1, [r7, #16]
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7ff ff24 	bl	8011da8 <tcp_output_control_segment>
 8011f60:	4603      	mov	r3, r0
 8011f62:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d007      	beq.n	8011f7c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	8b5b      	ldrh	r3, [r3, #26]
 8011f70:	f043 0303 	orr.w	r3, r3, #3
 8011f74:	b29a      	uxth	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	835a      	strh	r2, [r3, #26]
 8011f7a:	e006      	b.n	8011f8a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	8b5b      	ldrh	r3, [r3, #26]
 8011f80:	f023 0303 	bic.w	r3, r3, #3
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	371c      	adds	r7, #28
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd90      	pop	{r4, r7, pc}
 8011f96:	bf00      	nop
 8011f98:	080187dc 	.word	0x080187dc
 8011f9c:	08018f98 	.word	0x08018f98
 8011fa0:	08018830 	.word	0x08018830

08011fa4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011fa4:	b590      	push	{r4, r7, lr}
 8011fa6:	b087      	sub	sp, #28
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011fac:	2300      	movs	r3, #0
 8011fae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d106      	bne.n	8011fc4 <tcp_keepalive+0x20>
 8011fb6:	4b18      	ldr	r3, [pc, #96]	@ (8012018 <tcp_keepalive+0x74>)
 8011fb8:	f640 0224 	movw	r2, #2084	@ 0x824
 8011fbc:	4917      	ldr	r1, [pc, #92]	@ (801201c <tcp_keepalive+0x78>)
 8011fbe:	4818      	ldr	r0, [pc, #96]	@ (8012020 <tcp_keepalive+0x7c>)
 8011fc0:	f003 f996 	bl	80152f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011fc4:	7dfb      	ldrb	r3, [r7, #23]
 8011fc6:	b29c      	uxth	r4, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fcc:	3b01      	subs	r3, #1
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7f8 f9b0 	bl	800a334 <lwip_htonl>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	4621      	mov	r1, r4
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff fe68 	bl	8011cb0 <tcp_output_alloc_header>
 8011fe0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d102      	bne.n	8011fee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8011fec:	e010      	b.n	8012010 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011fee:	7dfb      	ldrb	r3, [r7, #23]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	6939      	ldr	r1, [r7, #16]
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7ff fe99 	bl	8011d2c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	3304      	adds	r3, #4
 8012000:	6939      	ldr	r1, [r7, #16]
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f7ff fed0 	bl	8011da8 <tcp_output_control_segment>
 8012008:	4603      	mov	r3, r0
 801200a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801200c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012010:	4618      	mov	r0, r3
 8012012:	371c      	adds	r7, #28
 8012014:	46bd      	mov	sp, r7
 8012016:	bd90      	pop	{r4, r7, pc}
 8012018:	080187dc 	.word	0x080187dc
 801201c:	08018fb8 	.word	0x08018fb8
 8012020:	08018830 	.word	0x08018830

08012024 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012024:	b590      	push	{r4, r7, lr}
 8012026:	b08b      	sub	sp, #44	@ 0x2c
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801202c:	2300      	movs	r3, #0
 801202e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d106      	bne.n	8012046 <tcp_zero_window_probe+0x22>
 8012038:	4b4c      	ldr	r3, [pc, #304]	@ (801216c <tcp_zero_window_probe+0x148>)
 801203a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801203e:	494c      	ldr	r1, [pc, #304]	@ (8012170 <tcp_zero_window_probe+0x14c>)
 8012040:	484c      	ldr	r0, [pc, #304]	@ (8012174 <tcp_zero_window_probe+0x150>)
 8012042:	f003 f955 	bl	80152f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801204a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801204c:	6a3b      	ldr	r3, [r7, #32]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d101      	bne.n	8012056 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012052:	2300      	movs	r3, #0
 8012054:	e086      	b.n	8012164 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801205c:	2bff      	cmp	r3, #255	@ 0xff
 801205e:	d007      	beq.n	8012070 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012066:	3301      	adds	r3, #1
 8012068:	b2da      	uxtb	r2, r3
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012070:	6a3b      	ldr	r3, [r7, #32]
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	899b      	ldrh	r3, [r3, #12]
 8012076:	b29b      	uxth	r3, r3
 8012078:	4618      	mov	r0, r3
 801207a:	f7f8 f945 	bl	800a308 <lwip_htons>
 801207e:	4603      	mov	r3, r0
 8012080:	b2db      	uxtb	r3, r3
 8012082:	f003 0301 	and.w	r3, r3, #1
 8012086:	2b00      	cmp	r3, #0
 8012088:	d005      	beq.n	8012096 <tcp_zero_window_probe+0x72>
 801208a:	6a3b      	ldr	r3, [r7, #32]
 801208c:	891b      	ldrh	r3, [r3, #8]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d101      	bne.n	8012096 <tcp_zero_window_probe+0x72>
 8012092:	2301      	movs	r3, #1
 8012094:	e000      	b.n	8012098 <tcp_zero_window_probe+0x74>
 8012096:	2300      	movs	r3, #0
 8012098:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801209a:	7ffb      	ldrb	r3, [r7, #31]
 801209c:	2b00      	cmp	r3, #0
 801209e:	bf0c      	ite	eq
 80120a0:	2301      	moveq	r3, #1
 80120a2:	2300      	movne	r3, #0
 80120a4:	b2db      	uxtb	r3, r3
 80120a6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80120a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120ac:	b299      	uxth	r1, r3
 80120ae:	6a3b      	ldr	r3, [r7, #32]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	8bba      	ldrh	r2, [r7, #28]
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7ff fdfa 	bl	8011cb0 <tcp_output_alloc_header>
 80120bc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d102      	bne.n	80120ca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80120c4:	f04f 33ff 	mov.w	r3, #4294967295
 80120c8:	e04c      	b.n	8012164 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80120ca:	69bb      	ldr	r3, [r7, #24]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80120d0:	7ffb      	ldrb	r3, [r7, #31]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d011      	beq.n	80120fa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	899b      	ldrh	r3, [r3, #12]
 80120da:	b29b      	uxth	r3, r3
 80120dc:	b21b      	sxth	r3, r3
 80120de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80120e2:	b21c      	sxth	r4, r3
 80120e4:	2011      	movs	r0, #17
 80120e6:	f7f8 f90f 	bl	800a308 <lwip_htons>
 80120ea:	4603      	mov	r3, r0
 80120ec:	b21b      	sxth	r3, r3
 80120ee:	4323      	orrs	r3, r4
 80120f0:	b21b      	sxth	r3, r3
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	819a      	strh	r2, [r3, #12]
 80120f8:	e010      	b.n	801211c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	3314      	adds	r3, #20
 8012100:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	6858      	ldr	r0, [r3, #4]
 8012106:	6a3b      	ldr	r3, [r7, #32]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	891a      	ldrh	r2, [r3, #8]
 801210c:	6a3b      	ldr	r3, [r7, #32]
 801210e:	891b      	ldrh	r3, [r3, #8]
 8012110:	1ad3      	subs	r3, r2, r3
 8012112:	b29b      	uxth	r3, r3
 8012114:	2201      	movs	r2, #1
 8012116:	6939      	ldr	r1, [r7, #16]
 8012118:	f7f9 ff58 	bl	800bfcc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801211c:	6a3b      	ldr	r3, [r7, #32]
 801211e:	68db      	ldr	r3, [r3, #12]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	4618      	mov	r0, r3
 8012124:	f7f8 f906 	bl	800a334 <lwip_htonl>
 8012128:	4603      	mov	r3, r0
 801212a:	3301      	adds	r3, #1
 801212c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	1ad3      	subs	r3, r2, r3
 8012136:	2b00      	cmp	r3, #0
 8012138:	da02      	bge.n	8012140 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	68fa      	ldr	r2, [r7, #12]
 801213e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012144:	2200      	movs	r2, #0
 8012146:	69b9      	ldr	r1, [r7, #24]
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7ff fdef 	bl	8011d2c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	3304      	adds	r3, #4
 8012154:	69b9      	ldr	r1, [r7, #24]
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ff fe26 	bl	8011da8 <tcp_output_control_segment>
 801215c:	4603      	mov	r3, r0
 801215e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012160:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012164:	4618      	mov	r0, r3
 8012166:	372c      	adds	r7, #44	@ 0x2c
 8012168:	46bd      	mov	sp, r7
 801216a:	bd90      	pop	{r4, r7, pc}
 801216c:	080187dc 	.word	0x080187dc
 8012170:	08018fd4 	.word	0x08018fd4
 8012174:	08018830 	.word	0x08018830

08012178 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012180:	f7fa f812 	bl	800c1a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012184:	4b0a      	ldr	r3, [pc, #40]	@ (80121b0 <tcpip_tcp_timer+0x38>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d103      	bne.n	8012194 <tcpip_tcp_timer+0x1c>
 801218c:	4b09      	ldr	r3, [pc, #36]	@ (80121b4 <tcpip_tcp_timer+0x3c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d005      	beq.n	80121a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012194:	2200      	movs	r2, #0
 8012196:	4908      	ldr	r1, [pc, #32]	@ (80121b8 <tcpip_tcp_timer+0x40>)
 8012198:	20fa      	movs	r0, #250	@ 0xfa
 801219a:	f000 f8f3 	bl	8012384 <sys_timeout>
 801219e:	e003      	b.n	80121a8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80121a0:	4b06      	ldr	r3, [pc, #24]	@ (80121bc <tcpip_tcp_timer+0x44>)
 80121a2:	2200      	movs	r2, #0
 80121a4:	601a      	str	r2, [r3, #0]
  }
}
 80121a6:	bf00      	nop
 80121a8:	bf00      	nop
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	200171c0 	.word	0x200171c0
 80121b4:	200171c4 	.word	0x200171c4
 80121b8:	08012179 	.word	0x08012179
 80121bc:	2001720c 	.word	0x2001720c

080121c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80121c4:	4b0a      	ldr	r3, [pc, #40]	@ (80121f0 <tcp_timer_needed+0x30>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d10f      	bne.n	80121ec <tcp_timer_needed+0x2c>
 80121cc:	4b09      	ldr	r3, [pc, #36]	@ (80121f4 <tcp_timer_needed+0x34>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d103      	bne.n	80121dc <tcp_timer_needed+0x1c>
 80121d4:	4b08      	ldr	r3, [pc, #32]	@ (80121f8 <tcp_timer_needed+0x38>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d007      	beq.n	80121ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80121dc:	4b04      	ldr	r3, [pc, #16]	@ (80121f0 <tcp_timer_needed+0x30>)
 80121de:	2201      	movs	r2, #1
 80121e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121e2:	2200      	movs	r2, #0
 80121e4:	4905      	ldr	r1, [pc, #20]	@ (80121fc <tcp_timer_needed+0x3c>)
 80121e6:	20fa      	movs	r0, #250	@ 0xfa
 80121e8:	f000 f8cc 	bl	8012384 <sys_timeout>
  }
}
 80121ec:	bf00      	nop
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	2001720c 	.word	0x2001720c
 80121f4:	200171c0 	.word	0x200171c0
 80121f8:	200171c4 	.word	0x200171c4
 80121fc:	08012179 	.word	0x08012179

08012200 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b086      	sub	sp, #24
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801220c:	200a      	movs	r0, #10
 801220e:	f7f8 fdcd 	bl	800adac <memp_malloc>
 8012212:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d109      	bne.n	801222e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d151      	bne.n	80122c4 <sys_timeout_abs+0xc4>
 8012220:	4b2a      	ldr	r3, [pc, #168]	@ (80122cc <sys_timeout_abs+0xcc>)
 8012222:	22be      	movs	r2, #190	@ 0xbe
 8012224:	492a      	ldr	r1, [pc, #168]	@ (80122d0 <sys_timeout_abs+0xd0>)
 8012226:	482b      	ldr	r0, [pc, #172]	@ (80122d4 <sys_timeout_abs+0xd4>)
 8012228:	f003 f862 	bl	80152f0 <iprintf>
    return;
 801222c:	e04a      	b.n	80122c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801222e:	693b      	ldr	r3, [r7, #16]
 8012230:	2200      	movs	r2, #0
 8012232:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	68ba      	ldr	r2, [r7, #8]
 8012238:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	68fa      	ldr	r2, [r7, #12]
 8012244:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012246:	4b24      	ldr	r3, [pc, #144]	@ (80122d8 <sys_timeout_abs+0xd8>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d103      	bne.n	8012256 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801224e:	4a22      	ldr	r2, [pc, #136]	@ (80122d8 <sys_timeout_abs+0xd8>)
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	6013      	str	r3, [r2, #0]
    return;
 8012254:	e037      	b.n	80122c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	685a      	ldr	r2, [r3, #4]
 801225a:	4b1f      	ldr	r3, [pc, #124]	@ (80122d8 <sys_timeout_abs+0xd8>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	1ad3      	subs	r3, r2, r3
 8012262:	0fdb      	lsrs	r3, r3, #31
 8012264:	f003 0301 	and.w	r3, r3, #1
 8012268:	b2db      	uxtb	r3, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	d007      	beq.n	801227e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801226e:	4b1a      	ldr	r3, [pc, #104]	@ (80122d8 <sys_timeout_abs+0xd8>)
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012276:	4a18      	ldr	r2, [pc, #96]	@ (80122d8 <sys_timeout_abs+0xd8>)
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	6013      	str	r3, [r2, #0]
 801227c:	e023      	b.n	80122c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801227e:	4b16      	ldr	r3, [pc, #88]	@ (80122d8 <sys_timeout_abs+0xd8>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	617b      	str	r3, [r7, #20]
 8012284:	e01a      	b.n	80122bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d00b      	beq.n	80122a6 <sys_timeout_abs+0xa6>
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	685a      	ldr	r2, [r3, #4]
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	0fdb      	lsrs	r3, r3, #31
 801229c:	f003 0301 	and.w	r3, r3, #1
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d007      	beq.n	80122b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	693a      	ldr	r2, [r7, #16]
 80122b2:	601a      	str	r2, [r3, #0]
        break;
 80122b4:	e007      	b.n	80122c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	617b      	str	r3, [r7, #20]
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1e1      	bne.n	8012286 <sys_timeout_abs+0x86>
 80122c2:	e000      	b.n	80122c6 <sys_timeout_abs+0xc6>
    return;
 80122c4:	bf00      	nop
      }
    }
  }
}
 80122c6:	3718      	adds	r7, #24
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	08018ff8 	.word	0x08018ff8
 80122d0:	0801902c 	.word	0x0801902c
 80122d4:	0801906c 	.word	0x0801906c
 80122d8:	20017204 	.word	0x20017204

080122dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b086      	sub	sp, #24
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	4798      	blx	r3

  now = sys_now();
 80122ee:	f7f3 f939 	bl	8005564 <sys_now>
 80122f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	4b0f      	ldr	r3, [pc, #60]	@ (8012338 <lwip_cyclic_timer+0x5c>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4413      	add	r3, r2
 80122fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	1ad3      	subs	r3, r2, r3
 8012306:	0fdb      	lsrs	r3, r3, #31
 8012308:	f003 0301 	and.w	r3, r3, #1
 801230c:	b2db      	uxtb	r3, r3
 801230e:	2b00      	cmp	r3, #0
 8012310:	d009      	beq.n	8012326 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	4413      	add	r3, r2
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	4907      	ldr	r1, [pc, #28]	@ (801233c <lwip_cyclic_timer+0x60>)
 801231e:	4618      	mov	r0, r3
 8012320:	f7ff ff6e 	bl	8012200 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012324:	e004      	b.n	8012330 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	4904      	ldr	r1, [pc, #16]	@ (801233c <lwip_cyclic_timer+0x60>)
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	f7ff ff68 	bl	8012200 <sys_timeout_abs>
}
 8012330:	bf00      	nop
 8012332:	3718      	adds	r7, #24
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	20017208 	.word	0x20017208
 801233c:	080122dd 	.word	0x080122dd

08012340 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012346:	2301      	movs	r3, #1
 8012348:	607b      	str	r3, [r7, #4]
 801234a:	e00e      	b.n	801236a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801234c:	4a0b      	ldr	r2, [pc, #44]	@ (801237c <sys_timeouts_init+0x3c>)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	4a08      	ldr	r2, [pc, #32]	@ (801237c <sys_timeouts_init+0x3c>)
 801235a:	4413      	add	r3, r2
 801235c:	461a      	mov	r2, r3
 801235e:	4908      	ldr	r1, [pc, #32]	@ (8012380 <sys_timeouts_init+0x40>)
 8012360:	f000 f810 	bl	8012384 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	3301      	adds	r3, #1
 8012368:	607b      	str	r3, [r7, #4]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b02      	cmp	r3, #2
 801236e:	d9ed      	bls.n	801234c <sys_timeouts_init+0xc>
  }
}
 8012370:	bf00      	nop
 8012372:	bf00      	nop
 8012374:	3708      	adds	r7, #8
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	0801a390 	.word	0x0801a390
 8012380:	080122dd 	.word	0x080122dd

08012384 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b086      	sub	sp, #24
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012396:	d306      	bcc.n	80123a6 <sys_timeout+0x22>
 8012398:	4b0a      	ldr	r3, [pc, #40]	@ (80123c4 <sys_timeout+0x40>)
 801239a:	f240 1229 	movw	r2, #297	@ 0x129
 801239e:	490a      	ldr	r1, [pc, #40]	@ (80123c8 <sys_timeout+0x44>)
 80123a0:	480a      	ldr	r0, [pc, #40]	@ (80123cc <sys_timeout+0x48>)
 80123a2:	f002 ffa5 	bl	80152f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80123a6:	f7f3 f8dd 	bl	8005564 <sys_now>
 80123aa:	4602      	mov	r2, r0
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	4413      	add	r3, r2
 80123b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	68b9      	ldr	r1, [r7, #8]
 80123b6:	6978      	ldr	r0, [r7, #20]
 80123b8:	f7ff ff22 	bl	8012200 <sys_timeout_abs>
#endif
}
 80123bc:	bf00      	nop
 80123be:	3718      	adds	r7, #24
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	08018ff8 	.word	0x08018ff8
 80123c8:	08019094 	.word	0x08019094
 80123cc:	0801906c 	.word	0x0801906c

080123d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80123d6:	f7f3 f8c5 	bl	8005564 <sys_now>
 80123da:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80123dc:	4b17      	ldr	r3, [pc, #92]	@ (801243c <sys_check_timeouts+0x6c>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d022      	beq.n	801242e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	68fa      	ldr	r2, [r7, #12]
 80123ee:	1ad3      	subs	r3, r2, r3
 80123f0:	0fdb      	lsrs	r3, r3, #31
 80123f2:	f003 0301 	and.w	r3, r3, #1
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d11a      	bne.n	8012432 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4a0e      	ldr	r2, [pc, #56]	@ (801243c <sys_check_timeouts+0x6c>)
 8012402:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	68db      	ldr	r3, [r3, #12]
 801240e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	4a0a      	ldr	r2, [pc, #40]	@ (8012440 <sys_check_timeouts+0x70>)
 8012416:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012418:	68b9      	ldr	r1, [r7, #8]
 801241a:	200a      	movs	r0, #10
 801241c:	f7f8 fd3c 	bl	800ae98 <memp_free>
    if (handler != NULL) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d0da      	beq.n	80123dc <sys_check_timeouts+0xc>
      handler(arg);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6838      	ldr	r0, [r7, #0]
 801242a:	4798      	blx	r3
  do {
 801242c:	e7d6      	b.n	80123dc <sys_check_timeouts+0xc>
      return;
 801242e:	bf00      	nop
 8012430:	e000      	b.n	8012434 <sys_check_timeouts+0x64>
      return;
 8012432:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012434:	3710      	adds	r7, #16
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	20017204 	.word	0x20017204
 8012440:	20017208 	.word	0x20017208

08012444 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801244a:	4b16      	ldr	r3, [pc, #88]	@ (80124a4 <sys_timeouts_sleeptime+0x60>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d102      	bne.n	8012458 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012452:	f04f 33ff 	mov.w	r3, #4294967295
 8012456:	e020      	b.n	801249a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012458:	f7f3 f884 	bl	8005564 <sys_now>
 801245c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801245e:	4b11      	ldr	r3, [pc, #68]	@ (80124a4 <sys_timeouts_sleeptime+0x60>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	685a      	ldr	r2, [r3, #4]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	1ad3      	subs	r3, r2, r3
 8012468:	0fdb      	lsrs	r3, r3, #31
 801246a:	f003 0301 	and.w	r3, r3, #1
 801246e:	b2db      	uxtb	r3, r3
 8012470:	2b00      	cmp	r3, #0
 8012472:	d001      	beq.n	8012478 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012474:	2300      	movs	r3, #0
 8012476:	e010      	b.n	801249a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012478:	4b0a      	ldr	r3, [pc, #40]	@ (80124a4 <sys_timeouts_sleeptime+0x60>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	685a      	ldr	r2, [r3, #4]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	1ad3      	subs	r3, r2, r3
 8012482:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	da06      	bge.n	8012498 <sys_timeouts_sleeptime+0x54>
 801248a:	4b07      	ldr	r3, [pc, #28]	@ (80124a8 <sys_timeouts_sleeptime+0x64>)
 801248c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8012490:	4906      	ldr	r1, [pc, #24]	@ (80124ac <sys_timeouts_sleeptime+0x68>)
 8012492:	4807      	ldr	r0, [pc, #28]	@ (80124b0 <sys_timeouts_sleeptime+0x6c>)
 8012494:	f002 ff2c 	bl	80152f0 <iprintf>
    return ret;
 8012498:	683b      	ldr	r3, [r7, #0]
  }
}
 801249a:	4618      	mov	r0, r3
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	20017204 	.word	0x20017204
 80124a8:	08018ff8 	.word	0x08018ff8
 80124ac:	080190cc 	.word	0x080190cc
 80124b0:	0801906c 	.word	0x0801906c

080124b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80124b8:	f002 fd96 	bl	8014fe8 <rand>
 80124bc:	4603      	mov	r3, r0
 80124be:	b29b      	uxth	r3, r3
 80124c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80124ca:	b29a      	uxth	r2, r3
 80124cc:	4b01      	ldr	r3, [pc, #4]	@ (80124d4 <udp_init+0x20>)
 80124ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80124d0:	bf00      	nop
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	20000054 	.word	0x20000054

080124d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	4613      	mov	r3, r2
 80124e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d105      	bne.n	80124f8 <udp_input_local_match+0x20>
 80124ec:	4b27      	ldr	r3, [pc, #156]	@ (801258c <udp_input_local_match+0xb4>)
 80124ee:	2287      	movs	r2, #135	@ 0x87
 80124f0:	4927      	ldr	r1, [pc, #156]	@ (8012590 <udp_input_local_match+0xb8>)
 80124f2:	4828      	ldr	r0, [pc, #160]	@ (8012594 <udp_input_local_match+0xbc>)
 80124f4:	f002 fefc 	bl	80152f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d105      	bne.n	801250a <udp_input_local_match+0x32>
 80124fe:	4b23      	ldr	r3, [pc, #140]	@ (801258c <udp_input_local_match+0xb4>)
 8012500:	2288      	movs	r2, #136	@ 0x88
 8012502:	4925      	ldr	r1, [pc, #148]	@ (8012598 <udp_input_local_match+0xc0>)
 8012504:	4823      	ldr	r0, [pc, #140]	@ (8012594 <udp_input_local_match+0xbc>)
 8012506:	f002 fef3 	bl	80152f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	7a1b      	ldrb	r3, [r3, #8]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d00b      	beq.n	801252a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	7a1a      	ldrb	r2, [r3, #8]
 8012516:	4b21      	ldr	r3, [pc, #132]	@ (801259c <udp_input_local_match+0xc4>)
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801251e:	3301      	adds	r3, #1
 8012520:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012522:	429a      	cmp	r2, r3
 8012524:	d001      	beq.n	801252a <udp_input_local_match+0x52>
    return 0;
 8012526:	2300      	movs	r3, #0
 8012528:	e02b      	b.n	8012582 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801252a:	79fb      	ldrb	r3, [r7, #7]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d018      	beq.n	8012562 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d013      	beq.n	801255e <udp_input_local_match+0x86>
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00f      	beq.n	801255e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801253e:	4b17      	ldr	r3, [pc, #92]	@ (801259c <udp_input_local_match+0xc4>)
 8012540:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012546:	d00a      	beq.n	801255e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	681a      	ldr	r2, [r3, #0]
 801254c:	4b13      	ldr	r3, [pc, #76]	@ (801259c <udp_input_local_match+0xc4>)
 801254e:	695b      	ldr	r3, [r3, #20]
 8012550:	405a      	eors	r2, r3
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	3308      	adds	r3, #8
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801255a:	2b00      	cmp	r3, #0
 801255c:	d110      	bne.n	8012580 <udp_input_local_match+0xa8>
          return 1;
 801255e:	2301      	movs	r3, #1
 8012560:	e00f      	b.n	8012582 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d009      	beq.n	801257c <udp_input_local_match+0xa4>
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d005      	beq.n	801257c <udp_input_local_match+0xa4>
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	4b09      	ldr	r3, [pc, #36]	@ (801259c <udp_input_local_match+0xc4>)
 8012576:	695b      	ldr	r3, [r3, #20]
 8012578:	429a      	cmp	r2, r3
 801257a:	d101      	bne.n	8012580 <udp_input_local_match+0xa8>
        return 1;
 801257c:	2301      	movs	r3, #1
 801257e:	e000      	b.n	8012582 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012580:	2300      	movs	r3, #0
}
 8012582:	4618      	mov	r0, r3
 8012584:	3710      	adds	r7, #16
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	080190e0 	.word	0x080190e0
 8012590:	08019110 	.word	0x08019110
 8012594:	08019134 	.word	0x08019134
 8012598:	0801915c 	.word	0x0801915c
 801259c:	2000f280 	.word	0x2000f280

080125a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80125a0:	b590      	push	{r4, r7, lr}
 80125a2:	b08d      	sub	sp, #52	@ 0x34
 80125a4:	af02      	add	r7, sp, #8
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80125aa:	2300      	movs	r3, #0
 80125ac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d105      	bne.n	80125c0 <udp_input+0x20>
 80125b4:	4b7c      	ldr	r3, [pc, #496]	@ (80127a8 <udp_input+0x208>)
 80125b6:	22cf      	movs	r2, #207	@ 0xcf
 80125b8:	497c      	ldr	r1, [pc, #496]	@ (80127ac <udp_input+0x20c>)
 80125ba:	487d      	ldr	r0, [pc, #500]	@ (80127b0 <udp_input+0x210>)
 80125bc:	f002 fe98 	bl	80152f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d105      	bne.n	80125d2 <udp_input+0x32>
 80125c6:	4b78      	ldr	r3, [pc, #480]	@ (80127a8 <udp_input+0x208>)
 80125c8:	22d0      	movs	r2, #208	@ 0xd0
 80125ca:	497a      	ldr	r1, [pc, #488]	@ (80127b4 <udp_input+0x214>)
 80125cc:	4878      	ldr	r0, [pc, #480]	@ (80127b0 <udp_input+0x210>)
 80125ce:	f002 fe8f 	bl	80152f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	895b      	ldrh	r3, [r3, #10]
 80125d6:	2b07      	cmp	r3, #7
 80125d8:	d803      	bhi.n	80125e2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7f9 fb00 	bl	800bbe0 <pbuf_free>
    goto end;
 80125e0:	e0de      	b.n	80127a0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80125e8:	4b73      	ldr	r3, [pc, #460]	@ (80127b8 <udp_input+0x218>)
 80125ea:	695b      	ldr	r3, [r3, #20]
 80125ec:	4a72      	ldr	r2, [pc, #456]	@ (80127b8 <udp_input+0x218>)
 80125ee:	6812      	ldr	r2, [r2, #0]
 80125f0:	4611      	mov	r1, r2
 80125f2:	4618      	mov	r0, r3
 80125f4:	f001 fc88 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 80125f8:	4603      	mov	r3, r0
 80125fa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	881b      	ldrh	r3, [r3, #0]
 8012600:	b29b      	uxth	r3, r3
 8012602:	4618      	mov	r0, r3
 8012604:	f7f7 fe80 	bl	800a308 <lwip_htons>
 8012608:	4603      	mov	r3, r0
 801260a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	885b      	ldrh	r3, [r3, #2]
 8012610:	b29b      	uxth	r3, r3
 8012612:	4618      	mov	r0, r3
 8012614:	f7f7 fe78 	bl	800a308 <lwip_htons>
 8012618:	4603      	mov	r3, r0
 801261a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801261c:	2300      	movs	r3, #0
 801261e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012620:	2300      	movs	r3, #0
 8012622:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012624:	2300      	movs	r3, #0
 8012626:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012628:	4b64      	ldr	r3, [pc, #400]	@ (80127bc <udp_input+0x21c>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	627b      	str	r3, [r7, #36]	@ 0x24
 801262e:	e054      	b.n	80126da <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012632:	8a5b      	ldrh	r3, [r3, #18]
 8012634:	89fa      	ldrh	r2, [r7, #14]
 8012636:	429a      	cmp	r2, r3
 8012638:	d14a      	bne.n	80126d0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801263a:	7cfb      	ldrb	r3, [r7, #19]
 801263c:	461a      	mov	r2, r3
 801263e:	6839      	ldr	r1, [r7, #0]
 8012640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012642:	f7ff ff49 	bl	80124d8 <udp_input_local_match>
 8012646:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012648:	2b00      	cmp	r3, #0
 801264a:	d041      	beq.n	80126d0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801264e:	7c1b      	ldrb	r3, [r3, #16]
 8012650:	f003 0304 	and.w	r3, r3, #4
 8012654:	2b00      	cmp	r3, #0
 8012656:	d11d      	bne.n	8012694 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d102      	bne.n	8012664 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012660:	61fb      	str	r3, [r7, #28]
 8012662:	e017      	b.n	8012694 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012664:	7cfb      	ldrb	r3, [r7, #19]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d014      	beq.n	8012694 <udp_input+0xf4>
 801266a:	4b53      	ldr	r3, [pc, #332]	@ (80127b8 <udp_input+0x218>)
 801266c:	695b      	ldr	r3, [r3, #20]
 801266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012672:	d10f      	bne.n	8012694 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	3304      	adds	r3, #4
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	429a      	cmp	r2, r3
 8012680:	d008      	beq.n	8012694 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	3304      	adds	r3, #4
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	429a      	cmp	r2, r3
 801268e:	d101      	bne.n	8012694 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012692:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012696:	8a9b      	ldrh	r3, [r3, #20]
 8012698:	8a3a      	ldrh	r2, [r7, #16]
 801269a:	429a      	cmp	r2, r3
 801269c:	d118      	bne.n	80126d0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126a0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d005      	beq.n	80126b2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80126a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126a8:	685a      	ldr	r2, [r3, #4]
 80126aa:	4b43      	ldr	r3, [pc, #268]	@ (80127b8 <udp_input+0x218>)
 80126ac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d10e      	bne.n	80126d0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d014      	beq.n	80126e2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80126b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ba:	68da      	ldr	r2, [r3, #12]
 80126bc:	6a3b      	ldr	r3, [r7, #32]
 80126be:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80126c0:	4b3e      	ldr	r3, [pc, #248]	@ (80127bc <udp_input+0x21c>)
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126c6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80126c8:	4a3c      	ldr	r2, [pc, #240]	@ (80127bc <udp_input+0x21c>)
 80126ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126cc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80126ce:	e008      	b.n	80126e2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80126d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80126d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80126da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d1a7      	bne.n	8012630 <udp_input+0x90>
 80126e0:	e000      	b.n	80126e4 <udp_input+0x144>
        break;
 80126e2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80126e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d101      	bne.n	80126ee <udp_input+0x14e>
    pcb = uncon_pcb;
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80126ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d002      	beq.n	80126fa <udp_input+0x15a>
    for_us = 1;
 80126f4:	2301      	movs	r3, #1
 80126f6:	76fb      	strb	r3, [r7, #27]
 80126f8:	e00a      	b.n	8012710 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	3304      	adds	r3, #4
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	4b2d      	ldr	r3, [pc, #180]	@ (80127b8 <udp_input+0x218>)
 8012702:	695b      	ldr	r3, [r3, #20]
 8012704:	429a      	cmp	r2, r3
 8012706:	bf0c      	ite	eq
 8012708:	2301      	moveq	r3, #1
 801270a:	2300      	movne	r3, #0
 801270c:	b2db      	uxtb	r3, r3
 801270e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012710:	7efb      	ldrb	r3, [r7, #27]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d041      	beq.n	801279a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012716:	2108      	movs	r1, #8
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7f9 f9db 	bl	800bad4 <pbuf_remove_header>
 801271e:	4603      	mov	r3, r0
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00a      	beq.n	801273a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012724:	4b20      	ldr	r3, [pc, #128]	@ (80127a8 <udp_input+0x208>)
 8012726:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801272a:	4925      	ldr	r1, [pc, #148]	@ (80127c0 <udp_input+0x220>)
 801272c:	4820      	ldr	r0, [pc, #128]	@ (80127b0 <udp_input+0x210>)
 801272e:	f002 fddf 	bl	80152f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f7f9 fa54 	bl	800bbe0 <pbuf_free>
      goto end;
 8012738:	e032      	b.n	80127a0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801273c:	2b00      	cmp	r3, #0
 801273e:	d012      	beq.n	8012766 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012742:	699b      	ldr	r3, [r3, #24]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d00a      	beq.n	801275e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274a:	699c      	ldr	r4, [r3, #24]
 801274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274e:	69d8      	ldr	r0, [r3, #28]
 8012750:	8a3b      	ldrh	r3, [r7, #16]
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	4b1b      	ldr	r3, [pc, #108]	@ (80127c4 <udp_input+0x224>)
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801275a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801275c:	e021      	b.n	80127a2 <udp_input+0x202>
        pbuf_free(p);
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f7f9 fa3e 	bl	800bbe0 <pbuf_free>
        goto end;
 8012764:	e01c      	b.n	80127a0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012766:	7cfb      	ldrb	r3, [r7, #19]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d112      	bne.n	8012792 <udp_input+0x1f2>
 801276c:	4b12      	ldr	r3, [pc, #72]	@ (80127b8 <udp_input+0x218>)
 801276e:	695b      	ldr	r3, [r3, #20]
 8012770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012774:	2be0      	cmp	r3, #224	@ 0xe0
 8012776:	d00c      	beq.n	8012792 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012778:	4b0f      	ldr	r3, [pc, #60]	@ (80127b8 <udp_input+0x218>)
 801277a:	899b      	ldrh	r3, [r3, #12]
 801277c:	3308      	adds	r3, #8
 801277e:	b29b      	uxth	r3, r3
 8012780:	b21b      	sxth	r3, r3
 8012782:	4619      	mov	r1, r3
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f7f9 fa18 	bl	800bbba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801278a:	2103      	movs	r1, #3
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f001 f89b 	bl	80138c8 <icmp_dest_unreach>
      pbuf_free(p);
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f7f9 fa24 	bl	800bbe0 <pbuf_free>
  return;
 8012798:	e003      	b.n	80127a2 <udp_input+0x202>
    pbuf_free(p);
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f7f9 fa20 	bl	800bbe0 <pbuf_free>
  return;
 80127a0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80127a2:	372c      	adds	r7, #44	@ 0x2c
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd90      	pop	{r4, r7, pc}
 80127a8:	080190e0 	.word	0x080190e0
 80127ac:	08019184 	.word	0x08019184
 80127b0:	08019134 	.word	0x08019134
 80127b4:	0801919c 	.word	0x0801919c
 80127b8:	2000f280 	.word	0x2000f280
 80127bc:	20017210 	.word	0x20017210
 80127c0:	080191b8 	.word	0x080191b8
 80127c4:	2000f290 	.word	0x2000f290

080127c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127c8:	b480      	push	{r7}
 80127ca:	b085      	sub	sp, #20
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d01e      	beq.n	8012816 <udp_netif_ip_addr_changed+0x4e>
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d01a      	beq.n	8012816 <udp_netif_ip_addr_changed+0x4e>
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d017      	beq.n	8012816 <udp_netif_ip_addr_changed+0x4e>
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d013      	beq.n	8012816 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80127ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012824 <udp_netif_ip_addr_changed+0x5c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	60fb      	str	r3, [r7, #12]
 80127f4:	e00c      	b.n	8012810 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d103      	bne.n	801280a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	681a      	ldr	r2, [r3, #0]
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	60fb      	str	r3, [r7, #12]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d1ef      	bne.n	80127f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012816:	bf00      	nop
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	20017210 	.word	0x20017210

08012828 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012830:	4915      	ldr	r1, [pc, #84]	@ (8012888 <etharp_free_entry+0x60>)
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	4613      	mov	r3, r2
 8012836:	005b      	lsls	r3, r3, #1
 8012838:	4413      	add	r3, r2
 801283a:	00db      	lsls	r3, r3, #3
 801283c:	440b      	add	r3, r1
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d013      	beq.n	801286c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012844:	4910      	ldr	r1, [pc, #64]	@ (8012888 <etharp_free_entry+0x60>)
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	4613      	mov	r3, r2
 801284a:	005b      	lsls	r3, r3, #1
 801284c:	4413      	add	r3, r2
 801284e:	00db      	lsls	r3, r3, #3
 8012850:	440b      	add	r3, r1
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4618      	mov	r0, r3
 8012856:	f7f9 f9c3 	bl	800bbe0 <pbuf_free>
    arp_table[i].q = NULL;
 801285a:	490b      	ldr	r1, [pc, #44]	@ (8012888 <etharp_free_entry+0x60>)
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	4613      	mov	r3, r2
 8012860:	005b      	lsls	r3, r3, #1
 8012862:	4413      	add	r3, r2
 8012864:	00db      	lsls	r3, r3, #3
 8012866:	440b      	add	r3, r1
 8012868:	2200      	movs	r2, #0
 801286a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801286c:	4906      	ldr	r1, [pc, #24]	@ (8012888 <etharp_free_entry+0x60>)
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	4613      	mov	r3, r2
 8012872:	005b      	lsls	r3, r3, #1
 8012874:	4413      	add	r3, r2
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	440b      	add	r3, r1
 801287a:	3314      	adds	r3, #20
 801287c:	2200      	movs	r2, #0
 801287e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012880:	bf00      	nop
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	20017214 	.word	0x20017214

0801288c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012892:	2300      	movs	r3, #0
 8012894:	607b      	str	r3, [r7, #4]
 8012896:	e096      	b.n	80129c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012898:	494f      	ldr	r1, [pc, #316]	@ (80129d8 <etharp_tmr+0x14c>)
 801289a:	687a      	ldr	r2, [r7, #4]
 801289c:	4613      	mov	r3, r2
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	4413      	add	r3, r2
 80128a2:	00db      	lsls	r3, r3, #3
 80128a4:	440b      	add	r3, r1
 80128a6:	3314      	adds	r3, #20
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80128ac:	78fb      	ldrb	r3, [r7, #3]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f000 8086 	beq.w	80129c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80128b4:	4948      	ldr	r1, [pc, #288]	@ (80129d8 <etharp_tmr+0x14c>)
 80128b6:	687a      	ldr	r2, [r7, #4]
 80128b8:	4613      	mov	r3, r2
 80128ba:	005b      	lsls	r3, r3, #1
 80128bc:	4413      	add	r3, r2
 80128be:	00db      	lsls	r3, r3, #3
 80128c0:	440b      	add	r3, r1
 80128c2:	3312      	adds	r3, #18
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	3301      	adds	r3, #1
 80128c8:	b298      	uxth	r0, r3
 80128ca:	4943      	ldr	r1, [pc, #268]	@ (80129d8 <etharp_tmr+0x14c>)
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	4613      	mov	r3, r2
 80128d0:	005b      	lsls	r3, r3, #1
 80128d2:	4413      	add	r3, r2
 80128d4:	00db      	lsls	r3, r3, #3
 80128d6:	440b      	add	r3, r1
 80128d8:	3312      	adds	r3, #18
 80128da:	4602      	mov	r2, r0
 80128dc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80128de:	493e      	ldr	r1, [pc, #248]	@ (80129d8 <etharp_tmr+0x14c>)
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	4613      	mov	r3, r2
 80128e4:	005b      	lsls	r3, r3, #1
 80128e6:	4413      	add	r3, r2
 80128e8:	00db      	lsls	r3, r3, #3
 80128ea:	440b      	add	r3, r1
 80128ec:	3312      	adds	r3, #18
 80128ee:	881b      	ldrh	r3, [r3, #0]
 80128f0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80128f4:	d215      	bcs.n	8012922 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80128f6:	4938      	ldr	r1, [pc, #224]	@ (80129d8 <etharp_tmr+0x14c>)
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	4613      	mov	r3, r2
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	4413      	add	r3, r2
 8012900:	00db      	lsls	r3, r3, #3
 8012902:	440b      	add	r3, r1
 8012904:	3314      	adds	r3, #20
 8012906:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012908:	2b01      	cmp	r3, #1
 801290a:	d10e      	bne.n	801292a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801290c:	4932      	ldr	r1, [pc, #200]	@ (80129d8 <etharp_tmr+0x14c>)
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	4613      	mov	r3, r2
 8012912:	005b      	lsls	r3, r3, #1
 8012914:	4413      	add	r3, r2
 8012916:	00db      	lsls	r3, r3, #3
 8012918:	440b      	add	r3, r1
 801291a:	3312      	adds	r3, #18
 801291c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801291e:	2b04      	cmp	r3, #4
 8012920:	d903      	bls.n	801292a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f7ff ff80 	bl	8012828 <etharp_free_entry>
 8012928:	e04a      	b.n	80129c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801292a:	492b      	ldr	r1, [pc, #172]	@ (80129d8 <etharp_tmr+0x14c>)
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	4613      	mov	r3, r2
 8012930:	005b      	lsls	r3, r3, #1
 8012932:	4413      	add	r3, r2
 8012934:	00db      	lsls	r3, r3, #3
 8012936:	440b      	add	r3, r1
 8012938:	3314      	adds	r3, #20
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	2b03      	cmp	r3, #3
 801293e:	d10a      	bne.n	8012956 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012940:	4925      	ldr	r1, [pc, #148]	@ (80129d8 <etharp_tmr+0x14c>)
 8012942:	687a      	ldr	r2, [r7, #4]
 8012944:	4613      	mov	r3, r2
 8012946:	005b      	lsls	r3, r3, #1
 8012948:	4413      	add	r3, r2
 801294a:	00db      	lsls	r3, r3, #3
 801294c:	440b      	add	r3, r1
 801294e:	3314      	adds	r3, #20
 8012950:	2204      	movs	r2, #4
 8012952:	701a      	strb	r2, [r3, #0]
 8012954:	e034      	b.n	80129c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012956:	4920      	ldr	r1, [pc, #128]	@ (80129d8 <etharp_tmr+0x14c>)
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	4613      	mov	r3, r2
 801295c:	005b      	lsls	r3, r3, #1
 801295e:	4413      	add	r3, r2
 8012960:	00db      	lsls	r3, r3, #3
 8012962:	440b      	add	r3, r1
 8012964:	3314      	adds	r3, #20
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	2b04      	cmp	r3, #4
 801296a:	d10a      	bne.n	8012982 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801296c:	491a      	ldr	r1, [pc, #104]	@ (80129d8 <etharp_tmr+0x14c>)
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	4613      	mov	r3, r2
 8012972:	005b      	lsls	r3, r3, #1
 8012974:	4413      	add	r3, r2
 8012976:	00db      	lsls	r3, r3, #3
 8012978:	440b      	add	r3, r1
 801297a:	3314      	adds	r3, #20
 801297c:	2202      	movs	r2, #2
 801297e:	701a      	strb	r2, [r3, #0]
 8012980:	e01e      	b.n	80129c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012982:	4915      	ldr	r1, [pc, #84]	@ (80129d8 <etharp_tmr+0x14c>)
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	4613      	mov	r3, r2
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	4413      	add	r3, r2
 801298c:	00db      	lsls	r3, r3, #3
 801298e:	440b      	add	r3, r1
 8012990:	3314      	adds	r3, #20
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	2b01      	cmp	r3, #1
 8012996:	d113      	bne.n	80129c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012998:	490f      	ldr	r1, [pc, #60]	@ (80129d8 <etharp_tmr+0x14c>)
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	4613      	mov	r3, r2
 801299e:	005b      	lsls	r3, r3, #1
 80129a0:	4413      	add	r3, r2
 80129a2:	00db      	lsls	r3, r3, #3
 80129a4:	440b      	add	r3, r1
 80129a6:	3308      	adds	r3, #8
 80129a8:	6818      	ldr	r0, [r3, #0]
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	4613      	mov	r3, r2
 80129ae:	005b      	lsls	r3, r3, #1
 80129b0:	4413      	add	r3, r2
 80129b2:	00db      	lsls	r3, r3, #3
 80129b4:	4a08      	ldr	r2, [pc, #32]	@ (80129d8 <etharp_tmr+0x14c>)
 80129b6:	4413      	add	r3, r2
 80129b8:	3304      	adds	r3, #4
 80129ba:	4619      	mov	r1, r3
 80129bc:	f000 fe6e 	bl	801369c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	3301      	adds	r3, #1
 80129c4:	607b      	str	r3, [r7, #4]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2b09      	cmp	r3, #9
 80129ca:	f77f af65 	ble.w	8012898 <etharp_tmr+0xc>
      }
    }
  }
}
 80129ce:	bf00      	nop
 80129d0:	bf00      	nop
 80129d2:	3708      	adds	r7, #8
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	20017214 	.word	0x20017214

080129dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b08a      	sub	sp, #40	@ 0x28
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	460b      	mov	r3, r1
 80129e6:	607a      	str	r2, [r7, #4]
 80129e8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80129ea:	230a      	movs	r3, #10
 80129ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80129ee:	230a      	movs	r3, #10
 80129f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80129f2:	230a      	movs	r3, #10
 80129f4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80129f6:	2300      	movs	r3, #0
 80129f8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80129fa:	230a      	movs	r3, #10
 80129fc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80129fe:	2300      	movs	r3, #0
 8012a00:	83bb      	strh	r3, [r7, #28]
 8012a02:	2300      	movs	r3, #0
 8012a04:	837b      	strh	r3, [r7, #26]
 8012a06:	2300      	movs	r3, #0
 8012a08:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	843b      	strh	r3, [r7, #32]
 8012a0e:	e0ae      	b.n	8012b6e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012a10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a14:	49a6      	ldr	r1, [pc, #664]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012a16:	4613      	mov	r3, r2
 8012a18:	005b      	lsls	r3, r3, #1
 8012a1a:	4413      	add	r3, r2
 8012a1c:	00db      	lsls	r3, r3, #3
 8012a1e:	440b      	add	r3, r1
 8012a20:	3314      	adds	r3, #20
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012a26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012a2a:	2b0a      	cmp	r3, #10
 8012a2c:	d105      	bne.n	8012a3a <etharp_find_entry+0x5e>
 8012a2e:	7dfb      	ldrb	r3, [r7, #23]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d102      	bne.n	8012a3a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012a34:	8c3b      	ldrh	r3, [r7, #32]
 8012a36:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012a38:	e095      	b.n	8012b66 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012a3a:	7dfb      	ldrb	r3, [r7, #23]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f000 8092 	beq.w	8012b66 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012a42:	7dfb      	ldrb	r3, [r7, #23]
 8012a44:	2b01      	cmp	r3, #1
 8012a46:	d009      	beq.n	8012a5c <etharp_find_entry+0x80>
 8012a48:	7dfb      	ldrb	r3, [r7, #23]
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	d806      	bhi.n	8012a5c <etharp_find_entry+0x80>
 8012a4e:	4b99      	ldr	r3, [pc, #612]	@ (8012cb4 <etharp_find_entry+0x2d8>)
 8012a50:	f240 1223 	movw	r2, #291	@ 0x123
 8012a54:	4998      	ldr	r1, [pc, #608]	@ (8012cb8 <etharp_find_entry+0x2dc>)
 8012a56:	4899      	ldr	r0, [pc, #612]	@ (8012cbc <etharp_find_entry+0x2e0>)
 8012a58:	f002 fc4a 	bl	80152f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d020      	beq.n	8012aa4 <etharp_find_entry+0xc8>
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	6819      	ldr	r1, [r3, #0]
 8012a66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a6a:	4891      	ldr	r0, [pc, #580]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	005b      	lsls	r3, r3, #1
 8012a70:	4413      	add	r3, r2
 8012a72:	00db      	lsls	r3, r3, #3
 8012a74:	4403      	add	r3, r0
 8012a76:	3304      	adds	r3, #4
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4299      	cmp	r1, r3
 8012a7c:	d112      	bne.n	8012aa4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d00c      	beq.n	8012a9e <etharp_find_entry+0xc2>
 8012a84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a88:	4989      	ldr	r1, [pc, #548]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	4413      	add	r3, r2
 8012a90:	00db      	lsls	r3, r3, #3
 8012a92:	440b      	add	r3, r1
 8012a94:	3308      	adds	r3, #8
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d102      	bne.n	8012aa4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012a9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012aa2:	e100      	b.n	8012ca6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012aa4:	7dfb      	ldrb	r3, [r7, #23]
 8012aa6:	2b01      	cmp	r3, #1
 8012aa8:	d140      	bne.n	8012b2c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012aaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012aae:	4980      	ldr	r1, [pc, #512]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012ab0:	4613      	mov	r3, r2
 8012ab2:	005b      	lsls	r3, r3, #1
 8012ab4:	4413      	add	r3, r2
 8012ab6:	00db      	lsls	r3, r3, #3
 8012ab8:	440b      	add	r3, r1
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d01a      	beq.n	8012af6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012ac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ac4:	497a      	ldr	r1, [pc, #488]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	005b      	lsls	r3, r3, #1
 8012aca:	4413      	add	r3, r2
 8012acc:	00db      	lsls	r3, r3, #3
 8012ace:	440b      	add	r3, r1
 8012ad0:	3312      	adds	r3, #18
 8012ad2:	881b      	ldrh	r3, [r3, #0]
 8012ad4:	8bba      	ldrh	r2, [r7, #28]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d845      	bhi.n	8012b66 <etharp_find_entry+0x18a>
            old_queue = i;
 8012ada:	8c3b      	ldrh	r3, [r7, #32]
 8012adc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012ade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ae2:	4973      	ldr	r1, [pc, #460]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	005b      	lsls	r3, r3, #1
 8012ae8:	4413      	add	r3, r2
 8012aea:	00db      	lsls	r3, r3, #3
 8012aec:	440b      	add	r3, r1
 8012aee:	3312      	adds	r3, #18
 8012af0:	881b      	ldrh	r3, [r3, #0]
 8012af2:	83bb      	strh	r3, [r7, #28]
 8012af4:	e037      	b.n	8012b66 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012af6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012afa:	496d      	ldr	r1, [pc, #436]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012afc:	4613      	mov	r3, r2
 8012afe:	005b      	lsls	r3, r3, #1
 8012b00:	4413      	add	r3, r2
 8012b02:	00db      	lsls	r3, r3, #3
 8012b04:	440b      	add	r3, r1
 8012b06:	3312      	adds	r3, #18
 8012b08:	881b      	ldrh	r3, [r3, #0]
 8012b0a:	8b7a      	ldrh	r2, [r7, #26]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d82a      	bhi.n	8012b66 <etharp_find_entry+0x18a>
            old_pending = i;
 8012b10:	8c3b      	ldrh	r3, [r7, #32]
 8012b12:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012b14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b18:	4965      	ldr	r1, [pc, #404]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012b1a:	4613      	mov	r3, r2
 8012b1c:	005b      	lsls	r3, r3, #1
 8012b1e:	4413      	add	r3, r2
 8012b20:	00db      	lsls	r3, r3, #3
 8012b22:	440b      	add	r3, r1
 8012b24:	3312      	adds	r3, #18
 8012b26:	881b      	ldrh	r3, [r3, #0]
 8012b28:	837b      	strh	r3, [r7, #26]
 8012b2a:	e01c      	b.n	8012b66 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012b2c:	7dfb      	ldrb	r3, [r7, #23]
 8012b2e:	2b01      	cmp	r3, #1
 8012b30:	d919      	bls.n	8012b66 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012b32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b36:	495e      	ldr	r1, [pc, #376]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012b38:	4613      	mov	r3, r2
 8012b3a:	005b      	lsls	r3, r3, #1
 8012b3c:	4413      	add	r3, r2
 8012b3e:	00db      	lsls	r3, r3, #3
 8012b40:	440b      	add	r3, r1
 8012b42:	3312      	adds	r3, #18
 8012b44:	881b      	ldrh	r3, [r3, #0]
 8012b46:	8b3a      	ldrh	r2, [r7, #24]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d80c      	bhi.n	8012b66 <etharp_find_entry+0x18a>
            old_stable = i;
 8012b4c:	8c3b      	ldrh	r3, [r7, #32]
 8012b4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012b50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b54:	4956      	ldr	r1, [pc, #344]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012b56:	4613      	mov	r3, r2
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	4413      	add	r3, r2
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	440b      	add	r3, r1
 8012b60:	3312      	adds	r3, #18
 8012b62:	881b      	ldrh	r3, [r3, #0]
 8012b64:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b66:	8c3b      	ldrh	r3, [r7, #32]
 8012b68:	3301      	adds	r3, #1
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	843b      	strh	r3, [r7, #32]
 8012b6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b72:	2b09      	cmp	r3, #9
 8012b74:	f77f af4c 	ble.w	8012a10 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012b78:	7afb      	ldrb	r3, [r7, #11]
 8012b7a:	f003 0302 	and.w	r3, r3, #2
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d108      	bne.n	8012b94 <etharp_find_entry+0x1b8>
 8012b82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012b86:	2b0a      	cmp	r3, #10
 8012b88:	d107      	bne.n	8012b9a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012b8a:	7afb      	ldrb	r3, [r7, #11]
 8012b8c:	f003 0301 	and.w	r3, r3, #1
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d102      	bne.n	8012b9a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012b94:	f04f 33ff 	mov.w	r3, #4294967295
 8012b98:	e085      	b.n	8012ca6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012b9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012b9e:	2b09      	cmp	r3, #9
 8012ba0:	dc02      	bgt.n	8012ba8 <etharp_find_entry+0x1cc>
    i = empty;
 8012ba2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ba4:	843b      	strh	r3, [r7, #32]
 8012ba6:	e039      	b.n	8012c1c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012ba8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012bac:	2b09      	cmp	r3, #9
 8012bae:	dc14      	bgt.n	8012bda <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012bb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bb2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012bb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bb8:	493d      	ldr	r1, [pc, #244]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012bba:	4613      	mov	r3, r2
 8012bbc:	005b      	lsls	r3, r3, #1
 8012bbe:	4413      	add	r3, r2
 8012bc0:	00db      	lsls	r3, r3, #3
 8012bc2:	440b      	add	r3, r1
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d018      	beq.n	8012bfc <etharp_find_entry+0x220>
 8012bca:	4b3a      	ldr	r3, [pc, #232]	@ (8012cb4 <etharp_find_entry+0x2d8>)
 8012bcc:	f240 126d 	movw	r2, #365	@ 0x16d
 8012bd0:	493b      	ldr	r1, [pc, #236]	@ (8012cc0 <etharp_find_entry+0x2e4>)
 8012bd2:	483a      	ldr	r0, [pc, #232]	@ (8012cbc <etharp_find_entry+0x2e0>)
 8012bd4:	f002 fb8c 	bl	80152f0 <iprintf>
 8012bd8:	e010      	b.n	8012bfc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012bda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012bde:	2b09      	cmp	r3, #9
 8012be0:	dc02      	bgt.n	8012be8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012be2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012be4:	843b      	strh	r3, [r7, #32]
 8012be6:	e009      	b.n	8012bfc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012be8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012bec:	2b09      	cmp	r3, #9
 8012bee:	dc02      	bgt.n	8012bf6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012bf0:	8bfb      	ldrh	r3, [r7, #30]
 8012bf2:	843b      	strh	r3, [r7, #32]
 8012bf4:	e002      	b.n	8012bfc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8012bfa:	e054      	b.n	8012ca6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012bfc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c00:	2b09      	cmp	r3, #9
 8012c02:	dd06      	ble.n	8012c12 <etharp_find_entry+0x236>
 8012c04:	4b2b      	ldr	r3, [pc, #172]	@ (8012cb4 <etharp_find_entry+0x2d8>)
 8012c06:	f240 127f 	movw	r2, #383	@ 0x17f
 8012c0a:	492e      	ldr	r1, [pc, #184]	@ (8012cc4 <etharp_find_entry+0x2e8>)
 8012c0c:	482b      	ldr	r0, [pc, #172]	@ (8012cbc <etharp_find_entry+0x2e0>)
 8012c0e:	f002 fb6f 	bl	80152f0 <iprintf>
    etharp_free_entry(i);
 8012c12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7ff fe06 	bl	8012828 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012c1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c20:	2b09      	cmp	r3, #9
 8012c22:	dd06      	ble.n	8012c32 <etharp_find_entry+0x256>
 8012c24:	4b23      	ldr	r3, [pc, #140]	@ (8012cb4 <etharp_find_entry+0x2d8>)
 8012c26:	f240 1283 	movw	r2, #387	@ 0x183
 8012c2a:	4926      	ldr	r1, [pc, #152]	@ (8012cc4 <etharp_find_entry+0x2e8>)
 8012c2c:	4823      	ldr	r0, [pc, #140]	@ (8012cbc <etharp_find_entry+0x2e0>)
 8012c2e:	f002 fb5f 	bl	80152f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012c32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c36:	491e      	ldr	r1, [pc, #120]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012c38:	4613      	mov	r3, r2
 8012c3a:	005b      	lsls	r3, r3, #1
 8012c3c:	4413      	add	r3, r2
 8012c3e:	00db      	lsls	r3, r3, #3
 8012c40:	440b      	add	r3, r1
 8012c42:	3314      	adds	r3, #20
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d006      	beq.n	8012c58 <etharp_find_entry+0x27c>
 8012c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8012cb4 <etharp_find_entry+0x2d8>)
 8012c4c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012c50:	491d      	ldr	r1, [pc, #116]	@ (8012cc8 <etharp_find_entry+0x2ec>)
 8012c52:	481a      	ldr	r0, [pc, #104]	@ (8012cbc <etharp_find_entry+0x2e0>)
 8012c54:	f002 fb4c 	bl	80152f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00b      	beq.n	8012c76 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	6819      	ldr	r1, [r3, #0]
 8012c66:	4812      	ldr	r0, [pc, #72]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012c68:	4613      	mov	r3, r2
 8012c6a:	005b      	lsls	r3, r3, #1
 8012c6c:	4413      	add	r3, r2
 8012c6e:	00db      	lsls	r3, r3, #3
 8012c70:	4403      	add	r3, r0
 8012c72:	3304      	adds	r3, #4
 8012c74:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c7a:	490d      	ldr	r1, [pc, #52]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	005b      	lsls	r3, r3, #1
 8012c80:	4413      	add	r3, r2
 8012c82:	00db      	lsls	r3, r3, #3
 8012c84:	440b      	add	r3, r1
 8012c86:	3312      	adds	r3, #18
 8012c88:	2200      	movs	r2, #0
 8012c8a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012c8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c90:	4907      	ldr	r1, [pc, #28]	@ (8012cb0 <etharp_find_entry+0x2d4>)
 8012c92:	4613      	mov	r3, r2
 8012c94:	005b      	lsls	r3, r3, #1
 8012c96:	4413      	add	r3, r2
 8012c98:	00db      	lsls	r3, r3, #3
 8012c9a:	440b      	add	r3, r1
 8012c9c:	3308      	adds	r3, #8
 8012c9e:	687a      	ldr	r2, [r7, #4]
 8012ca0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012ca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3728      	adds	r7, #40	@ 0x28
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	20017214 	.word	0x20017214
 8012cb4:	08019444 	.word	0x08019444
 8012cb8:	0801947c 	.word	0x0801947c
 8012cbc:	080194bc 	.word	0x080194bc
 8012cc0:	080194e4 	.word	0x080194e4
 8012cc4:	080194fc 	.word	0x080194fc
 8012cc8:	08019510 	.word	0x08019510

08012ccc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b088      	sub	sp, #32
 8012cd0:	af02      	add	r7, sp, #8
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
 8012cd8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012ce0:	2b06      	cmp	r3, #6
 8012ce2:	d006      	beq.n	8012cf2 <etharp_update_arp_entry+0x26>
 8012ce4:	4b48      	ldr	r3, [pc, #288]	@ (8012e08 <etharp_update_arp_entry+0x13c>)
 8012ce6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012cea:	4948      	ldr	r1, [pc, #288]	@ (8012e0c <etharp_update_arp_entry+0x140>)
 8012cec:	4848      	ldr	r0, [pc, #288]	@ (8012e10 <etharp_update_arp_entry+0x144>)
 8012cee:	f002 faff 	bl	80152f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d012      	beq.n	8012d1e <etharp_update_arp_entry+0x52>
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d00e      	beq.n	8012d1e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	68f9      	ldr	r1, [r7, #12]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f001 f8fe 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 8012d0c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d105      	bne.n	8012d1e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012d1a:	2be0      	cmp	r3, #224	@ 0xe0
 8012d1c:	d102      	bne.n	8012d24 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012d1e:	f06f 030f 	mvn.w	r3, #15
 8012d22:	e06c      	b.n	8012dfe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012d24:	78fb      	ldrb	r3, [r7, #3]
 8012d26:	68fa      	ldr	r2, [r7, #12]
 8012d28:	4619      	mov	r1, r3
 8012d2a:	68b8      	ldr	r0, [r7, #8]
 8012d2c:	f7ff fe56 	bl	80129dc <etharp_find_entry>
 8012d30:	4603      	mov	r3, r0
 8012d32:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012d34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	da02      	bge.n	8012d42 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012d3c:	8afb      	ldrh	r3, [r7, #22]
 8012d3e:	b25b      	sxtb	r3, r3
 8012d40:	e05d      	b.n	8012dfe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012d42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d46:	4933      	ldr	r1, [pc, #204]	@ (8012e14 <etharp_update_arp_entry+0x148>)
 8012d48:	4613      	mov	r3, r2
 8012d4a:	005b      	lsls	r3, r3, #1
 8012d4c:	4413      	add	r3, r2
 8012d4e:	00db      	lsls	r3, r3, #3
 8012d50:	440b      	add	r3, r1
 8012d52:	3314      	adds	r3, #20
 8012d54:	2202      	movs	r2, #2
 8012d56:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012d58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d5c:	492d      	ldr	r1, [pc, #180]	@ (8012e14 <etharp_update_arp_entry+0x148>)
 8012d5e:	4613      	mov	r3, r2
 8012d60:	005b      	lsls	r3, r3, #1
 8012d62:	4413      	add	r3, r2
 8012d64:	00db      	lsls	r3, r3, #3
 8012d66:	440b      	add	r3, r1
 8012d68:	3308      	adds	r3, #8
 8012d6a:	68fa      	ldr	r2, [r7, #12]
 8012d6c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012d6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d72:	4613      	mov	r3, r2
 8012d74:	005b      	lsls	r3, r3, #1
 8012d76:	4413      	add	r3, r2
 8012d78:	00db      	lsls	r3, r3, #3
 8012d7a:	3308      	adds	r3, #8
 8012d7c:	4a25      	ldr	r2, [pc, #148]	@ (8012e14 <etharp_update_arp_entry+0x148>)
 8012d7e:	4413      	add	r3, r2
 8012d80:	3304      	adds	r3, #4
 8012d82:	2206      	movs	r2, #6
 8012d84:	6879      	ldr	r1, [r7, #4]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f002 fd5b 	bl	8015842 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012d8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d90:	4920      	ldr	r1, [pc, #128]	@ (8012e14 <etharp_update_arp_entry+0x148>)
 8012d92:	4613      	mov	r3, r2
 8012d94:	005b      	lsls	r3, r3, #1
 8012d96:	4413      	add	r3, r2
 8012d98:	00db      	lsls	r3, r3, #3
 8012d9a:	440b      	add	r3, r1
 8012d9c:	3312      	adds	r3, #18
 8012d9e:	2200      	movs	r2, #0
 8012da0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012da2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012da6:	491b      	ldr	r1, [pc, #108]	@ (8012e14 <etharp_update_arp_entry+0x148>)
 8012da8:	4613      	mov	r3, r2
 8012daa:	005b      	lsls	r3, r3, #1
 8012dac:	4413      	add	r3, r2
 8012dae:	00db      	lsls	r3, r3, #3
 8012db0:	440b      	add	r3, r1
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d021      	beq.n	8012dfc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012db8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dbc:	4915      	ldr	r1, [pc, #84]	@ (8012e14 <etharp_update_arp_entry+0x148>)
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	005b      	lsls	r3, r3, #1
 8012dc2:	4413      	add	r3, r2
 8012dc4:	00db      	lsls	r3, r3, #3
 8012dc6:	440b      	add	r3, r1
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012dcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012dd0:	4910      	ldr	r1, [pc, #64]	@ (8012e14 <etharp_update_arp_entry+0x148>)
 8012dd2:	4613      	mov	r3, r2
 8012dd4:	005b      	lsls	r3, r3, #1
 8012dd6:	4413      	add	r3, r2
 8012dd8:	00db      	lsls	r3, r3, #3
 8012dda:	440b      	add	r3, r1
 8012ddc:	2200      	movs	r2, #0
 8012dde:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012de6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012dea:	9300      	str	r3, [sp, #0]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6939      	ldr	r1, [r7, #16]
 8012df0:	68f8      	ldr	r0, [r7, #12]
 8012df2:	f001 ff97 	bl	8014d24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012df6:	6938      	ldr	r0, [r7, #16]
 8012df8:	f7f8 fef2 	bl	800bbe0 <pbuf_free>
  }
  return ERR_OK;
 8012dfc:	2300      	movs	r3, #0
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3718      	adds	r7, #24
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	08019444 	.word	0x08019444
 8012e0c:	0801953c 	.word	0x0801953c
 8012e10:	080194bc 	.word	0x080194bc
 8012e14:	20017214 	.word	0x20017214

08012e18 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e20:	2300      	movs	r3, #0
 8012e22:	60fb      	str	r3, [r7, #12]
 8012e24:	e01e      	b.n	8012e64 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012e26:	4913      	ldr	r1, [pc, #76]	@ (8012e74 <etharp_cleanup_netif+0x5c>)
 8012e28:	68fa      	ldr	r2, [r7, #12]
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	005b      	lsls	r3, r3, #1
 8012e2e:	4413      	add	r3, r2
 8012e30:	00db      	lsls	r3, r3, #3
 8012e32:	440b      	add	r3, r1
 8012e34:	3314      	adds	r3, #20
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012e3a:	7afb      	ldrb	r3, [r7, #11]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d00e      	beq.n	8012e5e <etharp_cleanup_netif+0x46>
 8012e40:	490c      	ldr	r1, [pc, #48]	@ (8012e74 <etharp_cleanup_netif+0x5c>)
 8012e42:	68fa      	ldr	r2, [r7, #12]
 8012e44:	4613      	mov	r3, r2
 8012e46:	005b      	lsls	r3, r3, #1
 8012e48:	4413      	add	r3, r2
 8012e4a:	00db      	lsls	r3, r3, #3
 8012e4c:	440b      	add	r3, r1
 8012e4e:	3308      	adds	r3, #8
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	687a      	ldr	r2, [r7, #4]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d102      	bne.n	8012e5e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012e58:	68f8      	ldr	r0, [r7, #12]
 8012e5a:	f7ff fce5 	bl	8012828 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	3301      	adds	r3, #1
 8012e62:	60fb      	str	r3, [r7, #12]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2b09      	cmp	r3, #9
 8012e68:	dddd      	ble.n	8012e26 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012e6a:	bf00      	nop
 8012e6c:	bf00      	nop
 8012e6e:	3710      	adds	r7, #16
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	20017214 	.word	0x20017214

08012e78 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012e78:	b5b0      	push	{r4, r5, r7, lr}
 8012e7a:	b08a      	sub	sp, #40	@ 0x28
 8012e7c:	af04      	add	r7, sp, #16
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d107      	bne.n	8012e98 <etharp_input+0x20>
 8012e88:	4b3d      	ldr	r3, [pc, #244]	@ (8012f80 <etharp_input+0x108>)
 8012e8a:	f240 228a 	movw	r2, #650	@ 0x28a
 8012e8e:	493d      	ldr	r1, [pc, #244]	@ (8012f84 <etharp_input+0x10c>)
 8012e90:	483d      	ldr	r0, [pc, #244]	@ (8012f88 <etharp_input+0x110>)
 8012e92:	f002 fa2d 	bl	80152f0 <iprintf>
 8012e96:	e06f      	b.n	8012f78 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	881b      	ldrh	r3, [r3, #0]
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ea8:	d10c      	bne.n	8012ec4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012eae:	2b06      	cmp	r3, #6
 8012eb0:	d108      	bne.n	8012ec4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012eb6:	2b04      	cmp	r3, #4
 8012eb8:	d104      	bne.n	8012ec4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	885b      	ldrh	r3, [r3, #2]
 8012ebe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ec0:	2b08      	cmp	r3, #8
 8012ec2:	d003      	beq.n	8012ecc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7f8 fe8b 	bl	800bbe0 <pbuf_free>
    return;
 8012eca:	e055      	b.n	8012f78 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	330e      	adds	r3, #14
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	3318      	adds	r3, #24
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	3304      	adds	r3, #4
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d102      	bne.n	8012eec <etharp_input+0x74>
    for_us = 0;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	75fb      	strb	r3, [r7, #23]
 8012eea:	e009      	b.n	8012f00 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012eec:	68ba      	ldr	r2, [r7, #8]
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	3304      	adds	r3, #4
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	bf0c      	ite	eq
 8012ef8:	2301      	moveq	r3, #1
 8012efa:	2300      	movne	r3, #0
 8012efc:	b2db      	uxtb	r3, r3
 8012efe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	f103 0208 	add.w	r2, r3, #8
 8012f06:	7dfb      	ldrb	r3, [r7, #23]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <etharp_input+0x98>
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e000      	b.n	8012f12 <etharp_input+0x9a>
 8012f10:	2302      	movs	r3, #2
 8012f12:	f107 010c 	add.w	r1, r7, #12
 8012f16:	6838      	ldr	r0, [r7, #0]
 8012f18:	f7ff fed8 	bl	8012ccc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	88db      	ldrh	r3, [r3, #6]
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012f26:	d003      	beq.n	8012f30 <etharp_input+0xb8>
 8012f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f2c:	d01e      	beq.n	8012f6c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012f2e:	e020      	b.n	8012f72 <etharp_input+0xfa>
      if (for_us) {
 8012f30:	7dfb      	ldrb	r3, [r7, #23]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d01c      	beq.n	8012f70 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012f4c:	693a      	ldr	r2, [r7, #16]
 8012f4e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012f50:	2102      	movs	r1, #2
 8012f52:	9103      	str	r1, [sp, #12]
 8012f54:	f107 010c 	add.w	r1, r7, #12
 8012f58:	9102      	str	r1, [sp, #8]
 8012f5a:	9201      	str	r2, [sp, #4]
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	462b      	mov	r3, r5
 8012f60:	4622      	mov	r2, r4
 8012f62:	4601      	mov	r1, r0
 8012f64:	6838      	ldr	r0, [r7, #0]
 8012f66:	f000 faeb 	bl	8013540 <etharp_raw>
      break;
 8012f6a:	e001      	b.n	8012f70 <etharp_input+0xf8>
      break;
 8012f6c:	bf00      	nop
 8012f6e:	e000      	b.n	8012f72 <etharp_input+0xfa>
      break;
 8012f70:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7f8 fe34 	bl	800bbe0 <pbuf_free>
}
 8012f78:	3718      	adds	r7, #24
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8012f7e:	bf00      	nop
 8012f80:	08019444 	.word	0x08019444
 8012f84:	08019594 	.word	0x08019594
 8012f88:	080194bc 	.word	0x080194bc

08012f8c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af02      	add	r7, sp, #8
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	4613      	mov	r3, r2
 8012f98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012f9a:	79fa      	ldrb	r2, [r7, #7]
 8012f9c:	4944      	ldr	r1, [pc, #272]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 8012f9e:	4613      	mov	r3, r2
 8012fa0:	005b      	lsls	r3, r3, #1
 8012fa2:	4413      	add	r3, r2
 8012fa4:	00db      	lsls	r3, r3, #3
 8012fa6:	440b      	add	r3, r1
 8012fa8:	3314      	adds	r3, #20
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d806      	bhi.n	8012fbe <etharp_output_to_arp_index+0x32>
 8012fb0:	4b40      	ldr	r3, [pc, #256]	@ (80130b4 <etharp_output_to_arp_index+0x128>)
 8012fb2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012fb6:	4940      	ldr	r1, [pc, #256]	@ (80130b8 <etharp_output_to_arp_index+0x12c>)
 8012fb8:	4840      	ldr	r0, [pc, #256]	@ (80130bc <etharp_output_to_arp_index+0x130>)
 8012fba:	f002 f999 	bl	80152f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012fbe:	79fa      	ldrb	r2, [r7, #7]
 8012fc0:	493b      	ldr	r1, [pc, #236]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	005b      	lsls	r3, r3, #1
 8012fc6:	4413      	add	r3, r2
 8012fc8:	00db      	lsls	r3, r3, #3
 8012fca:	440b      	add	r3, r1
 8012fcc:	3314      	adds	r3, #20
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	2b02      	cmp	r3, #2
 8012fd2:	d153      	bne.n	801307c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012fd4:	79fa      	ldrb	r2, [r7, #7]
 8012fd6:	4936      	ldr	r1, [pc, #216]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 8012fd8:	4613      	mov	r3, r2
 8012fda:	005b      	lsls	r3, r3, #1
 8012fdc:	4413      	add	r3, r2
 8012fde:	00db      	lsls	r3, r3, #3
 8012fe0:	440b      	add	r3, r1
 8012fe2:	3312      	adds	r3, #18
 8012fe4:	881b      	ldrh	r3, [r3, #0]
 8012fe6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012fea:	d919      	bls.n	8013020 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012fec:	79fa      	ldrb	r2, [r7, #7]
 8012fee:	4613      	mov	r3, r2
 8012ff0:	005b      	lsls	r3, r3, #1
 8012ff2:	4413      	add	r3, r2
 8012ff4:	00db      	lsls	r3, r3, #3
 8012ff6:	4a2e      	ldr	r2, [pc, #184]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 8012ff8:	4413      	add	r3, r2
 8012ffa:	3304      	adds	r3, #4
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	68f8      	ldr	r0, [r7, #12]
 8013000:	f000 fb4c 	bl	801369c <etharp_request>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d138      	bne.n	801307c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801300a:	79fa      	ldrb	r2, [r7, #7]
 801300c:	4928      	ldr	r1, [pc, #160]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 801300e:	4613      	mov	r3, r2
 8013010:	005b      	lsls	r3, r3, #1
 8013012:	4413      	add	r3, r2
 8013014:	00db      	lsls	r3, r3, #3
 8013016:	440b      	add	r3, r1
 8013018:	3314      	adds	r3, #20
 801301a:	2203      	movs	r2, #3
 801301c:	701a      	strb	r2, [r3, #0]
 801301e:	e02d      	b.n	801307c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013020:	79fa      	ldrb	r2, [r7, #7]
 8013022:	4923      	ldr	r1, [pc, #140]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 8013024:	4613      	mov	r3, r2
 8013026:	005b      	lsls	r3, r3, #1
 8013028:	4413      	add	r3, r2
 801302a:	00db      	lsls	r3, r3, #3
 801302c:	440b      	add	r3, r1
 801302e:	3312      	adds	r3, #18
 8013030:	881b      	ldrh	r3, [r3, #0]
 8013032:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013036:	d321      	bcc.n	801307c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013038:	79fa      	ldrb	r2, [r7, #7]
 801303a:	4613      	mov	r3, r2
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	4413      	add	r3, r2
 8013040:	00db      	lsls	r3, r3, #3
 8013042:	4a1b      	ldr	r2, [pc, #108]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 8013044:	4413      	add	r3, r2
 8013046:	1d19      	adds	r1, r3, #4
 8013048:	79fa      	ldrb	r2, [r7, #7]
 801304a:	4613      	mov	r3, r2
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	4413      	add	r3, r2
 8013050:	00db      	lsls	r3, r3, #3
 8013052:	3308      	adds	r3, #8
 8013054:	4a16      	ldr	r2, [pc, #88]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 8013056:	4413      	add	r3, r2
 8013058:	3304      	adds	r3, #4
 801305a:	461a      	mov	r2, r3
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f000 fafb 	bl	8013658 <etharp_request_dst>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d109      	bne.n	801307c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013068:	79fa      	ldrb	r2, [r7, #7]
 801306a:	4911      	ldr	r1, [pc, #68]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 801306c:	4613      	mov	r3, r2
 801306e:	005b      	lsls	r3, r3, #1
 8013070:	4413      	add	r3, r2
 8013072:	00db      	lsls	r3, r3, #3
 8013074:	440b      	add	r3, r1
 8013076:	3314      	adds	r3, #20
 8013078:	2203      	movs	r2, #3
 801307a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8013082:	79fa      	ldrb	r2, [r7, #7]
 8013084:	4613      	mov	r3, r2
 8013086:	005b      	lsls	r3, r3, #1
 8013088:	4413      	add	r3, r2
 801308a:	00db      	lsls	r3, r3, #3
 801308c:	3308      	adds	r3, #8
 801308e:	4a08      	ldr	r2, [pc, #32]	@ (80130b0 <etharp_output_to_arp_index+0x124>)
 8013090:	4413      	add	r3, r2
 8013092:	3304      	adds	r3, #4
 8013094:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013098:	9200      	str	r2, [sp, #0]
 801309a:	460a      	mov	r2, r1
 801309c:	68b9      	ldr	r1, [r7, #8]
 801309e:	68f8      	ldr	r0, [r7, #12]
 80130a0:	f001 fe40 	bl	8014d24 <ethernet_output>
 80130a4:	4603      	mov	r3, r0
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	20017214 	.word	0x20017214
 80130b4:	08019444 	.word	0x08019444
 80130b8:	080195b4 	.word	0x080195b4
 80130bc:	080194bc 	.word	0x080194bc

080130c0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08a      	sub	sp, #40	@ 0x28
 80130c4:	af02      	add	r7, sp, #8
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d106      	bne.n	80130e4 <etharp_output+0x24>
 80130d6:	4b73      	ldr	r3, [pc, #460]	@ (80132a4 <etharp_output+0x1e4>)
 80130d8:	f240 321e 	movw	r2, #798	@ 0x31e
 80130dc:	4972      	ldr	r1, [pc, #456]	@ (80132a8 <etharp_output+0x1e8>)
 80130de:	4873      	ldr	r0, [pc, #460]	@ (80132ac <etharp_output+0x1ec>)
 80130e0:	f002 f906 	bl	80152f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d106      	bne.n	80130f8 <etharp_output+0x38>
 80130ea:	4b6e      	ldr	r3, [pc, #440]	@ (80132a4 <etharp_output+0x1e4>)
 80130ec:	f240 321f 	movw	r2, #799	@ 0x31f
 80130f0:	496f      	ldr	r1, [pc, #444]	@ (80132b0 <etharp_output+0x1f0>)
 80130f2:	486e      	ldr	r0, [pc, #440]	@ (80132ac <etharp_output+0x1ec>)
 80130f4:	f002 f8fc 	bl	80152f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d106      	bne.n	801310c <etharp_output+0x4c>
 80130fe:	4b69      	ldr	r3, [pc, #420]	@ (80132a4 <etharp_output+0x1e4>)
 8013100:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013104:	496b      	ldr	r1, [pc, #428]	@ (80132b4 <etharp_output+0x1f4>)
 8013106:	4869      	ldr	r0, [pc, #420]	@ (80132ac <etharp_output+0x1ec>)
 8013108:	f002 f8f2 	bl	80152f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	68f9      	ldr	r1, [r7, #12]
 8013112:	4618      	mov	r0, r3
 8013114:	f000 fef8 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 8013118:	4603      	mov	r3, r0
 801311a:	2b00      	cmp	r3, #0
 801311c:	d002      	beq.n	8013124 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801311e:	4b66      	ldr	r3, [pc, #408]	@ (80132b8 <etharp_output+0x1f8>)
 8013120:	61fb      	str	r3, [r7, #28]
 8013122:	e0af      	b.n	8013284 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801312c:	2be0      	cmp	r3, #224	@ 0xe0
 801312e:	d118      	bne.n	8013162 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013130:	2301      	movs	r3, #1
 8013132:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013134:	2300      	movs	r3, #0
 8013136:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013138:	235e      	movs	r3, #94	@ 0x5e
 801313a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	3301      	adds	r3, #1
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013146:	b2db      	uxtb	r3, r3
 8013148:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	3302      	adds	r3, #2
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	3303      	adds	r3, #3
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801315a:	f107 0310 	add.w	r3, r7, #16
 801315e:	61fb      	str	r3, [r7, #28]
 8013160:	e090      	b.n	8013284 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	3304      	adds	r3, #4
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	405a      	eors	r2, r3
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3308      	adds	r3, #8
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	4013      	ands	r3, r2
 8013176:	2b00      	cmp	r3, #0
 8013178:	d012      	beq.n	80131a0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013180:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8013184:	4293      	cmp	r3, r2
 8013186:	d00b      	beq.n	80131a0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	330c      	adds	r3, #12
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d003      	beq.n	801319a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	330c      	adds	r3, #12
 8013196:	61bb      	str	r3, [r7, #24]
 8013198:	e002      	b.n	80131a0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801319a:	f06f 0303 	mvn.w	r3, #3
 801319e:	e07d      	b.n	801329c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80131a0:	4b46      	ldr	r3, [pc, #280]	@ (80132bc <etharp_output+0x1fc>)
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	4619      	mov	r1, r3
 80131a6:	4a46      	ldr	r2, [pc, #280]	@ (80132c0 <etharp_output+0x200>)
 80131a8:	460b      	mov	r3, r1
 80131aa:	005b      	lsls	r3, r3, #1
 80131ac:	440b      	add	r3, r1
 80131ae:	00db      	lsls	r3, r3, #3
 80131b0:	4413      	add	r3, r2
 80131b2:	3314      	adds	r3, #20
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d925      	bls.n	8013206 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80131ba:	4b40      	ldr	r3, [pc, #256]	@ (80132bc <etharp_output+0x1fc>)
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	4619      	mov	r1, r3
 80131c0:	4a3f      	ldr	r2, [pc, #252]	@ (80132c0 <etharp_output+0x200>)
 80131c2:	460b      	mov	r3, r1
 80131c4:	005b      	lsls	r3, r3, #1
 80131c6:	440b      	add	r3, r1
 80131c8:	00db      	lsls	r3, r3, #3
 80131ca:	4413      	add	r3, r2
 80131cc:	3308      	adds	r3, #8
 80131ce:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80131d0:	68fa      	ldr	r2, [r7, #12]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d117      	bne.n	8013206 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80131d6:	69bb      	ldr	r3, [r7, #24]
 80131d8:	681a      	ldr	r2, [r3, #0]
 80131da:	4b38      	ldr	r3, [pc, #224]	@ (80132bc <etharp_output+0x1fc>)
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	4618      	mov	r0, r3
 80131e0:	4937      	ldr	r1, [pc, #220]	@ (80132c0 <etharp_output+0x200>)
 80131e2:	4603      	mov	r3, r0
 80131e4:	005b      	lsls	r3, r3, #1
 80131e6:	4403      	add	r3, r0
 80131e8:	00db      	lsls	r3, r3, #3
 80131ea:	440b      	add	r3, r1
 80131ec:	3304      	adds	r3, #4
 80131ee:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d108      	bne.n	8013206 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80131f4:	4b31      	ldr	r3, [pc, #196]	@ (80132bc <etharp_output+0x1fc>)
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	461a      	mov	r2, r3
 80131fa:	68b9      	ldr	r1, [r7, #8]
 80131fc:	68f8      	ldr	r0, [r7, #12]
 80131fe:	f7ff fec5 	bl	8012f8c <etharp_output_to_arp_index>
 8013202:	4603      	mov	r3, r0
 8013204:	e04a      	b.n	801329c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013206:	2300      	movs	r3, #0
 8013208:	75fb      	strb	r3, [r7, #23]
 801320a:	e031      	b.n	8013270 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801320c:	7dfa      	ldrb	r2, [r7, #23]
 801320e:	492c      	ldr	r1, [pc, #176]	@ (80132c0 <etharp_output+0x200>)
 8013210:	4613      	mov	r3, r2
 8013212:	005b      	lsls	r3, r3, #1
 8013214:	4413      	add	r3, r2
 8013216:	00db      	lsls	r3, r3, #3
 8013218:	440b      	add	r3, r1
 801321a:	3314      	adds	r3, #20
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	2b01      	cmp	r3, #1
 8013220:	d923      	bls.n	801326a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013222:	7dfa      	ldrb	r2, [r7, #23]
 8013224:	4926      	ldr	r1, [pc, #152]	@ (80132c0 <etharp_output+0x200>)
 8013226:	4613      	mov	r3, r2
 8013228:	005b      	lsls	r3, r3, #1
 801322a:	4413      	add	r3, r2
 801322c:	00db      	lsls	r3, r3, #3
 801322e:	440b      	add	r3, r1
 8013230:	3308      	adds	r3, #8
 8013232:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013234:	68fa      	ldr	r2, [r7, #12]
 8013236:	429a      	cmp	r2, r3
 8013238:	d117      	bne.n	801326a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801323a:	69bb      	ldr	r3, [r7, #24]
 801323c:	6819      	ldr	r1, [r3, #0]
 801323e:	7dfa      	ldrb	r2, [r7, #23]
 8013240:	481f      	ldr	r0, [pc, #124]	@ (80132c0 <etharp_output+0x200>)
 8013242:	4613      	mov	r3, r2
 8013244:	005b      	lsls	r3, r3, #1
 8013246:	4413      	add	r3, r2
 8013248:	00db      	lsls	r3, r3, #3
 801324a:	4403      	add	r3, r0
 801324c:	3304      	adds	r3, #4
 801324e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013250:	4299      	cmp	r1, r3
 8013252:	d10a      	bne.n	801326a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013254:	4a19      	ldr	r2, [pc, #100]	@ (80132bc <etharp_output+0x1fc>)
 8013256:	7dfb      	ldrb	r3, [r7, #23]
 8013258:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801325a:	7dfb      	ldrb	r3, [r7, #23]
 801325c:	461a      	mov	r2, r3
 801325e:	68b9      	ldr	r1, [r7, #8]
 8013260:	68f8      	ldr	r0, [r7, #12]
 8013262:	f7ff fe93 	bl	8012f8c <etharp_output_to_arp_index>
 8013266:	4603      	mov	r3, r0
 8013268:	e018      	b.n	801329c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801326a:	7dfb      	ldrb	r3, [r7, #23]
 801326c:	3301      	adds	r3, #1
 801326e:	75fb      	strb	r3, [r7, #23]
 8013270:	7dfb      	ldrb	r3, [r7, #23]
 8013272:	2b09      	cmp	r3, #9
 8013274:	d9ca      	bls.n	801320c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	69b9      	ldr	r1, [r7, #24]
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	f000 f822 	bl	80132c4 <etharp_query>
 8013280:	4603      	mov	r3, r0
 8013282:	e00b      	b.n	801329c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801328a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801328e:	9300      	str	r3, [sp, #0]
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	68b9      	ldr	r1, [r7, #8]
 8013294:	68f8      	ldr	r0, [r7, #12]
 8013296:	f001 fd45 	bl	8014d24 <ethernet_output>
 801329a:	4603      	mov	r3, r0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3720      	adds	r7, #32
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	08019444 	.word	0x08019444
 80132a8:	08019594 	.word	0x08019594
 80132ac:	080194bc 	.word	0x080194bc
 80132b0:	080195e4 	.word	0x080195e4
 80132b4:	08019584 	.word	0x08019584
 80132b8:	0801a3ac 	.word	0x0801a3ac
 80132bc:	20017304 	.word	0x20017304
 80132c0:	20017214 	.word	0x20017214

080132c4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b08c      	sub	sp, #48	@ 0x30
 80132c8:	af02      	add	r7, sp, #8
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	3326      	adds	r3, #38	@ 0x26
 80132d4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80132d6:	23ff      	movs	r3, #255	@ 0xff
 80132d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80132dc:	2300      	movs	r3, #0
 80132de:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	68f9      	ldr	r1, [r7, #12]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f000 fe0e 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d10c      	bne.n	801330c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80132fa:	2be0      	cmp	r3, #224	@ 0xe0
 80132fc:	d006      	beq.n	801330c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d003      	beq.n	801330c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d102      	bne.n	8013312 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801330c:	f06f 030f 	mvn.w	r3, #15
 8013310:	e101      	b.n	8013516 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013312:	68fa      	ldr	r2, [r7, #12]
 8013314:	2101      	movs	r1, #1
 8013316:	68b8      	ldr	r0, [r7, #8]
 8013318:	f7ff fb60 	bl	80129dc <etharp_find_entry>
 801331c:	4603      	mov	r3, r0
 801331e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013320:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013324:	2b00      	cmp	r3, #0
 8013326:	da02      	bge.n	801332e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013328:	8a7b      	ldrh	r3, [r7, #18]
 801332a:	b25b      	sxtb	r3, r3
 801332c:	e0f3      	b.n	8013516 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801332e:	8a7b      	ldrh	r3, [r7, #18]
 8013330:	2b7e      	cmp	r3, #126	@ 0x7e
 8013332:	d906      	bls.n	8013342 <etharp_query+0x7e>
 8013334:	4b7a      	ldr	r3, [pc, #488]	@ (8013520 <etharp_query+0x25c>)
 8013336:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801333a:	497a      	ldr	r1, [pc, #488]	@ (8013524 <etharp_query+0x260>)
 801333c:	487a      	ldr	r0, [pc, #488]	@ (8013528 <etharp_query+0x264>)
 801333e:	f001 ffd7 	bl	80152f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013342:	8a7b      	ldrh	r3, [r7, #18]
 8013344:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013346:	7c7a      	ldrb	r2, [r7, #17]
 8013348:	4978      	ldr	r1, [pc, #480]	@ (801352c <etharp_query+0x268>)
 801334a:	4613      	mov	r3, r2
 801334c:	005b      	lsls	r3, r3, #1
 801334e:	4413      	add	r3, r2
 8013350:	00db      	lsls	r3, r3, #3
 8013352:	440b      	add	r3, r1
 8013354:	3314      	adds	r3, #20
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d115      	bne.n	8013388 <etharp_query+0xc4>
    is_new_entry = 1;
 801335c:	2301      	movs	r3, #1
 801335e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013360:	7c7a      	ldrb	r2, [r7, #17]
 8013362:	4972      	ldr	r1, [pc, #456]	@ (801352c <etharp_query+0x268>)
 8013364:	4613      	mov	r3, r2
 8013366:	005b      	lsls	r3, r3, #1
 8013368:	4413      	add	r3, r2
 801336a:	00db      	lsls	r3, r3, #3
 801336c:	440b      	add	r3, r1
 801336e:	3314      	adds	r3, #20
 8013370:	2201      	movs	r2, #1
 8013372:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013374:	7c7a      	ldrb	r2, [r7, #17]
 8013376:	496d      	ldr	r1, [pc, #436]	@ (801352c <etharp_query+0x268>)
 8013378:	4613      	mov	r3, r2
 801337a:	005b      	lsls	r3, r3, #1
 801337c:	4413      	add	r3, r2
 801337e:	00db      	lsls	r3, r3, #3
 8013380:	440b      	add	r3, r1
 8013382:	3308      	adds	r3, #8
 8013384:	68fa      	ldr	r2, [r7, #12]
 8013386:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013388:	7c7a      	ldrb	r2, [r7, #17]
 801338a:	4968      	ldr	r1, [pc, #416]	@ (801352c <etharp_query+0x268>)
 801338c:	4613      	mov	r3, r2
 801338e:	005b      	lsls	r3, r3, #1
 8013390:	4413      	add	r3, r2
 8013392:	00db      	lsls	r3, r3, #3
 8013394:	440b      	add	r3, r1
 8013396:	3314      	adds	r3, #20
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	2b01      	cmp	r3, #1
 801339c:	d011      	beq.n	80133c2 <etharp_query+0xfe>
 801339e:	7c7a      	ldrb	r2, [r7, #17]
 80133a0:	4962      	ldr	r1, [pc, #392]	@ (801352c <etharp_query+0x268>)
 80133a2:	4613      	mov	r3, r2
 80133a4:	005b      	lsls	r3, r3, #1
 80133a6:	4413      	add	r3, r2
 80133a8:	00db      	lsls	r3, r3, #3
 80133aa:	440b      	add	r3, r1
 80133ac:	3314      	adds	r3, #20
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	d806      	bhi.n	80133c2 <etharp_query+0xfe>
 80133b4:	4b5a      	ldr	r3, [pc, #360]	@ (8013520 <etharp_query+0x25c>)
 80133b6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80133ba:	495d      	ldr	r1, [pc, #372]	@ (8013530 <etharp_query+0x26c>)
 80133bc:	485a      	ldr	r0, [pc, #360]	@ (8013528 <etharp_query+0x264>)
 80133be:	f001 ff97 	bl	80152f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80133c2:	6a3b      	ldr	r3, [r7, #32]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d102      	bne.n	80133ce <etharp_query+0x10a>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d10c      	bne.n	80133e8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80133ce:	68b9      	ldr	r1, [r7, #8]
 80133d0:	68f8      	ldr	r0, [r7, #12]
 80133d2:	f000 f963 	bl	801369c <etharp_request>
 80133d6:	4603      	mov	r3, r0
 80133d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d102      	bne.n	80133e8 <etharp_query+0x124>
      return result;
 80133e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80133e6:	e096      	b.n	8013516 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d106      	bne.n	80133fc <etharp_query+0x138>
 80133ee:	4b4c      	ldr	r3, [pc, #304]	@ (8013520 <etharp_query+0x25c>)
 80133f0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80133f4:	494f      	ldr	r1, [pc, #316]	@ (8013534 <etharp_query+0x270>)
 80133f6:	484c      	ldr	r0, [pc, #304]	@ (8013528 <etharp_query+0x264>)
 80133f8:	f001 ff7a 	bl	80152f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80133fc:	7c7a      	ldrb	r2, [r7, #17]
 80133fe:	494b      	ldr	r1, [pc, #300]	@ (801352c <etharp_query+0x268>)
 8013400:	4613      	mov	r3, r2
 8013402:	005b      	lsls	r3, r3, #1
 8013404:	4413      	add	r3, r2
 8013406:	00db      	lsls	r3, r3, #3
 8013408:	440b      	add	r3, r1
 801340a:	3314      	adds	r3, #20
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	2b01      	cmp	r3, #1
 8013410:	d917      	bls.n	8013442 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013412:	4a49      	ldr	r2, [pc, #292]	@ (8013538 <etharp_query+0x274>)
 8013414:	7c7b      	ldrb	r3, [r7, #17]
 8013416:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013418:	7c7a      	ldrb	r2, [r7, #17]
 801341a:	4613      	mov	r3, r2
 801341c:	005b      	lsls	r3, r3, #1
 801341e:	4413      	add	r3, r2
 8013420:	00db      	lsls	r3, r3, #3
 8013422:	3308      	adds	r3, #8
 8013424:	4a41      	ldr	r2, [pc, #260]	@ (801352c <etharp_query+0x268>)
 8013426:	4413      	add	r3, r2
 8013428:	3304      	adds	r3, #4
 801342a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801342e:	9200      	str	r2, [sp, #0]
 8013430:	697a      	ldr	r2, [r7, #20]
 8013432:	6879      	ldr	r1, [r7, #4]
 8013434:	68f8      	ldr	r0, [r7, #12]
 8013436:	f001 fc75 	bl	8014d24 <ethernet_output>
 801343a:	4603      	mov	r3, r0
 801343c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013440:	e067      	b.n	8013512 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013442:	7c7a      	ldrb	r2, [r7, #17]
 8013444:	4939      	ldr	r1, [pc, #228]	@ (801352c <etharp_query+0x268>)
 8013446:	4613      	mov	r3, r2
 8013448:	005b      	lsls	r3, r3, #1
 801344a:	4413      	add	r3, r2
 801344c:	00db      	lsls	r3, r3, #3
 801344e:	440b      	add	r3, r1
 8013450:	3314      	adds	r3, #20
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	2b01      	cmp	r3, #1
 8013456:	d15c      	bne.n	8013512 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013458:	2300      	movs	r3, #0
 801345a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013460:	e01c      	b.n	801349c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	895a      	ldrh	r2, [r3, #10]
 8013466:	69fb      	ldr	r3, [r7, #28]
 8013468:	891b      	ldrh	r3, [r3, #8]
 801346a:	429a      	cmp	r2, r3
 801346c:	d10a      	bne.n	8013484 <etharp_query+0x1c0>
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d006      	beq.n	8013484 <etharp_query+0x1c0>
 8013476:	4b2a      	ldr	r3, [pc, #168]	@ (8013520 <etharp_query+0x25c>)
 8013478:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801347c:	492f      	ldr	r1, [pc, #188]	@ (801353c <etharp_query+0x278>)
 801347e:	482a      	ldr	r0, [pc, #168]	@ (8013528 <etharp_query+0x264>)
 8013480:	f001 ff36 	bl	80152f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013484:	69fb      	ldr	r3, [r7, #28]
 8013486:	7b1b      	ldrb	r3, [r3, #12]
 8013488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801348c:	2b00      	cmp	r3, #0
 801348e:	d002      	beq.n	8013496 <etharp_query+0x1d2>
        copy_needed = 1;
 8013490:	2301      	movs	r3, #1
 8013492:	61bb      	str	r3, [r7, #24]
        break;
 8013494:	e005      	b.n	80134a2 <etharp_query+0x1de>
      }
      p = p->next;
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d1df      	bne.n	8013462 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d007      	beq.n	80134b8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80134a8:	687a      	ldr	r2, [r7, #4]
 80134aa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80134ae:	200e      	movs	r0, #14
 80134b0:	f7f8 fdfe 	bl	800c0b0 <pbuf_clone>
 80134b4:	61f8      	str	r0, [r7, #28]
 80134b6:	e004      	b.n	80134c2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80134bc:	69f8      	ldr	r0, [r7, #28]
 80134be:	f7f8 fc35 	bl	800bd2c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80134c2:	69fb      	ldr	r3, [r7, #28]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d021      	beq.n	801350c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80134c8:	7c7a      	ldrb	r2, [r7, #17]
 80134ca:	4918      	ldr	r1, [pc, #96]	@ (801352c <etharp_query+0x268>)
 80134cc:	4613      	mov	r3, r2
 80134ce:	005b      	lsls	r3, r3, #1
 80134d0:	4413      	add	r3, r2
 80134d2:	00db      	lsls	r3, r3, #3
 80134d4:	440b      	add	r3, r1
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d00a      	beq.n	80134f2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80134dc:	7c7a      	ldrb	r2, [r7, #17]
 80134de:	4913      	ldr	r1, [pc, #76]	@ (801352c <etharp_query+0x268>)
 80134e0:	4613      	mov	r3, r2
 80134e2:	005b      	lsls	r3, r3, #1
 80134e4:	4413      	add	r3, r2
 80134e6:	00db      	lsls	r3, r3, #3
 80134e8:	440b      	add	r3, r1
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7f8 fb77 	bl	800bbe0 <pbuf_free>
      }
      arp_table[i].q = p;
 80134f2:	7c7a      	ldrb	r2, [r7, #17]
 80134f4:	490d      	ldr	r1, [pc, #52]	@ (801352c <etharp_query+0x268>)
 80134f6:	4613      	mov	r3, r2
 80134f8:	005b      	lsls	r3, r3, #1
 80134fa:	4413      	add	r3, r2
 80134fc:	00db      	lsls	r3, r3, #3
 80134fe:	440b      	add	r3, r1
 8013500:	69fa      	ldr	r2, [r7, #28]
 8013502:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013504:	2300      	movs	r3, #0
 8013506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801350a:	e002      	b.n	8013512 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801350c:	23ff      	movs	r3, #255	@ 0xff
 801350e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8013512:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013516:	4618      	mov	r0, r3
 8013518:	3728      	adds	r7, #40	@ 0x28
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	08019444 	.word	0x08019444
 8013524:	080195f0 	.word	0x080195f0
 8013528:	080194bc 	.word	0x080194bc
 801352c:	20017214 	.word	0x20017214
 8013530:	08019600 	.word	0x08019600
 8013534:	080195e4 	.word	0x080195e4
 8013538:	20017304 	.word	0x20017304
 801353c:	08019628 	.word	0x08019628

08013540 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b08a      	sub	sp, #40	@ 0x28
 8013544:	af02      	add	r7, sp, #8
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	60b9      	str	r1, [r7, #8]
 801354a:	607a      	str	r2, [r7, #4]
 801354c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801354e:	2300      	movs	r3, #0
 8013550:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d106      	bne.n	8013566 <etharp_raw+0x26>
 8013558:	4b3a      	ldr	r3, [pc, #232]	@ (8013644 <etharp_raw+0x104>)
 801355a:	f240 4257 	movw	r2, #1111	@ 0x457
 801355e:	493a      	ldr	r1, [pc, #232]	@ (8013648 <etharp_raw+0x108>)
 8013560:	483a      	ldr	r0, [pc, #232]	@ (801364c <etharp_raw+0x10c>)
 8013562:	f001 fec5 	bl	80152f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013566:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801356a:	211c      	movs	r1, #28
 801356c:	200e      	movs	r0, #14
 801356e:	f7f8 f853 	bl	800b618 <pbuf_alloc>
 8013572:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013574:	69bb      	ldr	r3, [r7, #24]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d102      	bne.n	8013580 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801357a:	f04f 33ff 	mov.w	r3, #4294967295
 801357e:	e05d      	b.n	801363c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	895b      	ldrh	r3, [r3, #10]
 8013584:	2b1b      	cmp	r3, #27
 8013586:	d806      	bhi.n	8013596 <etharp_raw+0x56>
 8013588:	4b2e      	ldr	r3, [pc, #184]	@ (8013644 <etharp_raw+0x104>)
 801358a:	f240 4262 	movw	r2, #1122	@ 0x462
 801358e:	4930      	ldr	r1, [pc, #192]	@ (8013650 <etharp_raw+0x110>)
 8013590:	482e      	ldr	r0, [pc, #184]	@ (801364c <etharp_raw+0x10c>)
 8013592:	f001 fead 	bl	80152f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013596:	69bb      	ldr	r3, [r7, #24]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801359c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801359e:	4618      	mov	r0, r3
 80135a0:	f7f6 feb2 	bl	800a308 <lwip_htons>
 80135a4:	4603      	mov	r3, r0
 80135a6:	461a      	mov	r2, r3
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80135b2:	2b06      	cmp	r3, #6
 80135b4:	d006      	beq.n	80135c4 <etharp_raw+0x84>
 80135b6:	4b23      	ldr	r3, [pc, #140]	@ (8013644 <etharp_raw+0x104>)
 80135b8:	f240 4269 	movw	r2, #1129	@ 0x469
 80135bc:	4925      	ldr	r1, [pc, #148]	@ (8013654 <etharp_raw+0x114>)
 80135be:	4823      	ldr	r0, [pc, #140]	@ (801364c <etharp_raw+0x10c>)
 80135c0:	f001 fe96 	bl	80152f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	3308      	adds	r3, #8
 80135c8:	2206      	movs	r2, #6
 80135ca:	6839      	ldr	r1, [r7, #0]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f002 f938 	bl	8015842 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	3312      	adds	r3, #18
 80135d6:	2206      	movs	r2, #6
 80135d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80135da:	4618      	mov	r0, r3
 80135dc:	f002 f931 	bl	8015842 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	330e      	adds	r3, #14
 80135e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80135e6:	6812      	ldr	r2, [r2, #0]
 80135e8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	3318      	adds	r3, #24
 80135ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80135f0:	6812      	ldr	r2, [r2, #0]
 80135f2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	2200      	movs	r2, #0
 80135f8:	701a      	strb	r2, [r3, #0]
 80135fa:	2200      	movs	r2, #0
 80135fc:	f042 0201 	orr.w	r2, r2, #1
 8013600:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	2200      	movs	r2, #0
 8013606:	f042 0208 	orr.w	r2, r2, #8
 801360a:	709a      	strb	r2, [r3, #2]
 801360c:	2200      	movs	r2, #0
 801360e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	2206      	movs	r2, #6
 8013614:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	2204      	movs	r2, #4
 801361a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801361c:	f640 0306 	movw	r3, #2054	@ 0x806
 8013620:	9300      	str	r3, [sp, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	68ba      	ldr	r2, [r7, #8]
 8013626:	69b9      	ldr	r1, [r7, #24]
 8013628:	68f8      	ldr	r0, [r7, #12]
 801362a:	f001 fb7b 	bl	8014d24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801362e:	69b8      	ldr	r0, [r7, #24]
 8013630:	f7f8 fad6 	bl	800bbe0 <pbuf_free>
  p = NULL;
 8013634:	2300      	movs	r3, #0
 8013636:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013638:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801363c:	4618      	mov	r0, r3
 801363e:	3720      	adds	r7, #32
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}
 8013644:	08019444 	.word	0x08019444
 8013648:	08019594 	.word	0x08019594
 801364c:	080194bc 	.word	0x080194bc
 8013650:	08019644 	.word	0x08019644
 8013654:	08019678 	.word	0x08019678

08013658 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b088      	sub	sp, #32
 801365c:	af04      	add	r7, sp, #16
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013674:	2201      	movs	r2, #1
 8013676:	9203      	str	r2, [sp, #12]
 8013678:	68ba      	ldr	r2, [r7, #8]
 801367a:	9202      	str	r2, [sp, #8]
 801367c:	4a06      	ldr	r2, [pc, #24]	@ (8013698 <etharp_request_dst+0x40>)
 801367e:	9201      	str	r2, [sp, #4]
 8013680:	9300      	str	r3, [sp, #0]
 8013682:	4603      	mov	r3, r0
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	68f8      	ldr	r0, [r7, #12]
 8013688:	f7ff ff5a 	bl	8013540 <etharp_raw>
 801368c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801368e:	4618      	mov	r0, r3
 8013690:	3710      	adds	r7, #16
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	0801a3b4 	.word	0x0801a3b4

0801369c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80136a6:	4a05      	ldr	r2, [pc, #20]	@ (80136bc <etharp_request+0x20>)
 80136a8:	6839      	ldr	r1, [r7, #0]
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f7ff ffd4 	bl	8013658 <etharp_request_dst>
 80136b0:	4603      	mov	r3, r0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3708      	adds	r7, #8
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}
 80136ba:	bf00      	nop
 80136bc:	0801a3ac 	.word	0x0801a3ac

080136c0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b08e      	sub	sp, #56	@ 0x38
 80136c4:	af04      	add	r7, sp, #16
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80136ca:	4b79      	ldr	r3, [pc, #484]	@ (80138b0 <icmp_input+0x1f0>)
 80136cc:	689b      	ldr	r3, [r3, #8]
 80136ce:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80136d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	f003 030f 	and.w	r3, r3, #15
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	009b      	lsls	r3, r3, #2
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80136e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136e2:	2b13      	cmp	r3, #19
 80136e4:	f240 80cd 	bls.w	8013882 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	895b      	ldrh	r3, [r3, #10]
 80136ec:	2b03      	cmp	r3, #3
 80136ee:	f240 80ca 	bls.w	8013886 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80136fc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013700:	2b00      	cmp	r3, #0
 8013702:	f000 80b7 	beq.w	8013874 <icmp_input+0x1b4>
 8013706:	2b08      	cmp	r3, #8
 8013708:	f040 80b7 	bne.w	801387a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801370c:	4b69      	ldr	r3, [pc, #420]	@ (80138b4 <icmp_input+0x1f4>)
 801370e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013710:	4b67      	ldr	r3, [pc, #412]	@ (80138b0 <icmp_input+0x1f0>)
 8013712:	695b      	ldr	r3, [r3, #20]
 8013714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013718:	2be0      	cmp	r3, #224	@ 0xe0
 801371a:	f000 80bb 	beq.w	8013894 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801371e:	4b64      	ldr	r3, [pc, #400]	@ (80138b0 <icmp_input+0x1f0>)
 8013720:	695b      	ldr	r3, [r3, #20]
 8013722:	4a63      	ldr	r2, [pc, #396]	@ (80138b0 <icmp_input+0x1f0>)
 8013724:	6812      	ldr	r2, [r2, #0]
 8013726:	4611      	mov	r1, r2
 8013728:	4618      	mov	r0, r3
 801372a:	f000 fbed 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 801372e:	4603      	mov	r3, r0
 8013730:	2b00      	cmp	r3, #0
 8013732:	f040 80b1 	bne.w	8013898 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	891b      	ldrh	r3, [r3, #8]
 801373a:	2b07      	cmp	r3, #7
 801373c:	f240 80a5 	bls.w	801388a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013740:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013742:	330e      	adds	r3, #14
 8013744:	4619      	mov	r1, r3
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f7f8 f9b4 	bl	800bab4 <pbuf_add_header>
 801374c:	4603      	mov	r3, r0
 801374e:	2b00      	cmp	r3, #0
 8013750:	d04b      	beq.n	80137ea <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	891a      	ldrh	r2, [r3, #8]
 8013756:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013758:	4413      	add	r3, r2
 801375a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	891b      	ldrh	r3, [r3, #8]
 8013760:	8b7a      	ldrh	r2, [r7, #26]
 8013762:	429a      	cmp	r2, r3
 8013764:	f0c0 809a 	bcc.w	801389c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013768:	8b7b      	ldrh	r3, [r7, #26]
 801376a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801376e:	4619      	mov	r1, r3
 8013770:	200e      	movs	r0, #14
 8013772:	f7f7 ff51 	bl	800b618 <pbuf_alloc>
 8013776:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	2b00      	cmp	r3, #0
 801377c:	f000 8090 	beq.w	80138a0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	895b      	ldrh	r3, [r3, #10]
 8013784:	461a      	mov	r2, r3
 8013786:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013788:	3308      	adds	r3, #8
 801378a:	429a      	cmp	r2, r3
 801378c:	d203      	bcs.n	8013796 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801378e:	6978      	ldr	r0, [r7, #20]
 8013790:	f7f8 fa26 	bl	800bbe0 <pbuf_free>
          goto icmperr;
 8013794:	e085      	b.n	80138a2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801379c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801379e:	4618      	mov	r0, r3
 80137a0:	f002 f84f 	bl	8015842 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80137a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137a6:	4619      	mov	r1, r3
 80137a8:	6978      	ldr	r0, [r7, #20]
 80137aa:	f7f8 f993 	bl	800bad4 <pbuf_remove_header>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d009      	beq.n	80137c8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80137b4:	4b40      	ldr	r3, [pc, #256]	@ (80138b8 <icmp_input+0x1f8>)
 80137b6:	22b6      	movs	r2, #182	@ 0xb6
 80137b8:	4940      	ldr	r1, [pc, #256]	@ (80138bc <icmp_input+0x1fc>)
 80137ba:	4841      	ldr	r0, [pc, #260]	@ (80138c0 <icmp_input+0x200>)
 80137bc:	f001 fd98 	bl	80152f0 <iprintf>
          pbuf_free(r);
 80137c0:	6978      	ldr	r0, [r7, #20]
 80137c2:	f7f8 fa0d 	bl	800bbe0 <pbuf_free>
          goto icmperr;
 80137c6:	e06c      	b.n	80138a2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80137c8:	6879      	ldr	r1, [r7, #4]
 80137ca:	6978      	ldr	r0, [r7, #20]
 80137cc:	f7f8 fb2c 	bl	800be28 <pbuf_copy>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d003      	beq.n	80137de <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80137d6:	6978      	ldr	r0, [r7, #20]
 80137d8:	f7f8 fa02 	bl	800bbe0 <pbuf_free>
          goto icmperr;
 80137dc:	e061      	b.n	80138a2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f7f8 f9fe 	bl	800bbe0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	607b      	str	r3, [r7, #4]
 80137e8:	e00f      	b.n	801380a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80137ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137ec:	330e      	adds	r3, #14
 80137ee:	4619      	mov	r1, r3
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7f8 f96f 	bl	800bad4 <pbuf_remove_header>
 80137f6:	4603      	mov	r3, r0
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d006      	beq.n	801380a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80137fc:	4b2e      	ldr	r3, [pc, #184]	@ (80138b8 <icmp_input+0x1f8>)
 80137fe:	22c7      	movs	r2, #199	@ 0xc7
 8013800:	4930      	ldr	r1, [pc, #192]	@ (80138c4 <icmp_input+0x204>)
 8013802:	482f      	ldr	r0, [pc, #188]	@ (80138c0 <icmp_input+0x200>)
 8013804:	f001 fd74 	bl	80152f0 <iprintf>
          goto icmperr;
 8013808:	e04b      	b.n	80138a2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013810:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013812:	4619      	mov	r1, r3
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f7f8 f94d 	bl	800bab4 <pbuf_add_header>
 801381a:	4603      	mov	r3, r0
 801381c:	2b00      	cmp	r3, #0
 801381e:	d12b      	bne.n	8013878 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013826:	69fb      	ldr	r3, [r7, #28]
 8013828:	681a      	ldr	r2, [r3, #0]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801382e:	4b20      	ldr	r3, [pc, #128]	@ (80138b0 <icmp_input+0x1f0>)
 8013830:	691a      	ldr	r2, [r3, #16]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	2200      	movs	r2, #0
 801383a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	2200      	movs	r2, #0
 8013840:	709a      	strb	r2, [r3, #2]
 8013842:	2200      	movs	r2, #0
 8013844:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	22ff      	movs	r2, #255	@ 0xff
 801384a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2200      	movs	r2, #0
 8013850:	729a      	strb	r2, [r3, #10]
 8013852:	2200      	movs	r2, #0
 8013854:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	9302      	str	r3, [sp, #8]
 801385a:	2301      	movs	r3, #1
 801385c:	9301      	str	r3, [sp, #4]
 801385e:	2300      	movs	r3, #0
 8013860:	9300      	str	r3, [sp, #0]
 8013862:	23ff      	movs	r3, #255	@ 0xff
 8013864:	2200      	movs	r2, #0
 8013866:	69f9      	ldr	r1, [r7, #28]
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f000 fa75 	bl	8013d58 <ip4_output_if>
 801386e:	4603      	mov	r3, r0
 8013870:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013872:	e001      	b.n	8013878 <icmp_input+0x1b8>
      break;
 8013874:	bf00      	nop
 8013876:	e000      	b.n	801387a <icmp_input+0x1ba>
      break;
 8013878:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f7f8 f9b0 	bl	800bbe0 <pbuf_free>
  return;
 8013880:	e013      	b.n	80138aa <icmp_input+0x1ea>
    goto lenerr;
 8013882:	bf00      	nop
 8013884:	e002      	b.n	801388c <icmp_input+0x1cc>
    goto lenerr;
 8013886:	bf00      	nop
 8013888:	e000      	b.n	801388c <icmp_input+0x1cc>
        goto lenerr;
 801388a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7f8 f9a7 	bl	800bbe0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013892:	e00a      	b.n	80138aa <icmp_input+0x1ea>
        goto icmperr;
 8013894:	bf00      	nop
 8013896:	e004      	b.n	80138a2 <icmp_input+0x1e2>
        goto icmperr;
 8013898:	bf00      	nop
 801389a:	e002      	b.n	80138a2 <icmp_input+0x1e2>
          goto icmperr;
 801389c:	bf00      	nop
 801389e:	e000      	b.n	80138a2 <icmp_input+0x1e2>
          goto icmperr;
 80138a0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f7f8 f99c 	bl	800bbe0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80138a8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80138aa:	3728      	adds	r7, #40	@ 0x28
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}
 80138b0:	2000f280 	.word	0x2000f280
 80138b4:	2000f294 	.word	0x2000f294
 80138b8:	080196bc 	.word	0x080196bc
 80138bc:	080196f4 	.word	0x080196f4
 80138c0:	0801972c 	.word	0x0801972c
 80138c4:	08019754 	.word	0x08019754

080138c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b082      	sub	sp, #8
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	460b      	mov	r3, r1
 80138d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80138d4:	78fb      	ldrb	r3, [r7, #3]
 80138d6:	461a      	mov	r2, r3
 80138d8:	2103      	movs	r1, #3
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 f814 	bl	8013908 <icmp_send_response>
}
 80138e0:	bf00      	nop
 80138e2:	3708      	adds	r7, #8
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}

080138e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	460b      	mov	r3, r1
 80138f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80138f4:	78fb      	ldrb	r3, [r7, #3]
 80138f6:	461a      	mov	r2, r3
 80138f8:	210b      	movs	r1, #11
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f000 f804 	bl	8013908 <icmp_send_response>
}
 8013900:	bf00      	nop
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b08c      	sub	sp, #48	@ 0x30
 801390c:	af04      	add	r7, sp, #16
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	460b      	mov	r3, r1
 8013912:	70fb      	strb	r3, [r7, #3]
 8013914:	4613      	mov	r3, r2
 8013916:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013918:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801391c:	2124      	movs	r1, #36	@ 0x24
 801391e:	2022      	movs	r0, #34	@ 0x22
 8013920:	f7f7 fe7a 	bl	800b618 <pbuf_alloc>
 8013924:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013926:	69fb      	ldr	r3, [r7, #28]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d04c      	beq.n	80139c6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	895b      	ldrh	r3, [r3, #10]
 8013930:	2b23      	cmp	r3, #35	@ 0x23
 8013932:	d806      	bhi.n	8013942 <icmp_send_response+0x3a>
 8013934:	4b26      	ldr	r3, [pc, #152]	@ (80139d0 <icmp_send_response+0xc8>)
 8013936:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801393a:	4926      	ldr	r1, [pc, #152]	@ (80139d4 <icmp_send_response+0xcc>)
 801393c:	4826      	ldr	r0, [pc, #152]	@ (80139d8 <icmp_send_response+0xd0>)
 801393e:	f001 fcd7 	bl	80152f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	78fa      	ldrb	r2, [r7, #3]
 8013952:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	78ba      	ldrb	r2, [r7, #2]
 8013958:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	2200      	movs	r2, #0
 801395e:	711a      	strb	r2, [r3, #4]
 8013960:	2200      	movs	r2, #0
 8013962:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	2200      	movs	r2, #0
 8013968:	719a      	strb	r2, [r3, #6]
 801396a:	2200      	movs	r2, #0
 801396c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801396e:	69fb      	ldr	r3, [r7, #28]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	f103 0008 	add.w	r0, r3, #8
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	221c      	movs	r2, #28
 801397c:	4619      	mov	r1, r3
 801397e:	f001 ff60 	bl	8015842 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	68db      	ldr	r3, [r3, #12]
 8013986:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013988:	f107 030c 	add.w	r3, r7, #12
 801398c:	4618      	mov	r0, r3
 801398e:	f000 f825 	bl	80139dc <ip4_route>
 8013992:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d011      	beq.n	80139be <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	2200      	movs	r2, #0
 801399e:	709a      	strb	r2, [r3, #2]
 80139a0:	2200      	movs	r2, #0
 80139a2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80139a4:	f107 020c 	add.w	r2, r7, #12
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	9302      	str	r3, [sp, #8]
 80139ac:	2301      	movs	r3, #1
 80139ae:	9301      	str	r3, [sp, #4]
 80139b0:	2300      	movs	r3, #0
 80139b2:	9300      	str	r3, [sp, #0]
 80139b4:	23ff      	movs	r3, #255	@ 0xff
 80139b6:	2100      	movs	r1, #0
 80139b8:	69f8      	ldr	r0, [r7, #28]
 80139ba:	f000 f9cd 	bl	8013d58 <ip4_output_if>
  }
  pbuf_free(q);
 80139be:	69f8      	ldr	r0, [r7, #28]
 80139c0:	f7f8 f90e 	bl	800bbe0 <pbuf_free>
 80139c4:	e000      	b.n	80139c8 <icmp_send_response+0xc0>
    return;
 80139c6:	bf00      	nop
}
 80139c8:	3720      	adds	r7, #32
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	080196bc 	.word	0x080196bc
 80139d4:	08019788 	.word	0x08019788
 80139d8:	0801972c 	.word	0x0801972c

080139dc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80139dc:	b480      	push	{r7}
 80139de:	b085      	sub	sp, #20
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80139e4:	4b33      	ldr	r3, [pc, #204]	@ (8013ab4 <ip4_route+0xd8>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	60fb      	str	r3, [r7, #12]
 80139ea:	e036      	b.n	8013a5a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139f2:	f003 0301 	and.w	r3, r3, #1
 80139f6:	b2db      	uxtb	r3, r3
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d02b      	beq.n	8013a54 <ip4_route+0x78>
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a02:	089b      	lsrs	r3, r3, #2
 8013a04:	f003 0301 	and.w	r3, r3, #1
 8013a08:	b2db      	uxtb	r3, r3
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d022      	beq.n	8013a54 <ip4_route+0x78>
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	3304      	adds	r3, #4
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d01d      	beq.n	8013a54 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681a      	ldr	r2, [r3, #0]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	3304      	adds	r3, #4
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	405a      	eors	r2, r3
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	3308      	adds	r3, #8
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4013      	ands	r3, r2
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d101      	bne.n	8013a34 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	e038      	b.n	8013aa6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a3a:	f003 0302 	and.w	r3, r3, #2
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d108      	bne.n	8013a54 <ip4_route+0x78>
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	330c      	adds	r3, #12
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d101      	bne.n	8013a54 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	e028      	b.n	8013aa6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	60fb      	str	r3, [r7, #12]
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1c5      	bne.n	80139ec <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013a60:	4b15      	ldr	r3, [pc, #84]	@ (8013ab8 <ip4_route+0xdc>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d01a      	beq.n	8013a9e <ip4_route+0xc2>
 8013a68:	4b13      	ldr	r3, [pc, #76]	@ (8013ab8 <ip4_route+0xdc>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a70:	f003 0301 	and.w	r3, r3, #1
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d012      	beq.n	8013a9e <ip4_route+0xc2>
 8013a78:	4b0f      	ldr	r3, [pc, #60]	@ (8013ab8 <ip4_route+0xdc>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a80:	f003 0304 	and.w	r3, r3, #4
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00a      	beq.n	8013a9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a88:	4b0b      	ldr	r3, [pc, #44]	@ (8013ab8 <ip4_route+0xdc>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	3304      	adds	r3, #4
 8013a8e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d004      	beq.n	8013a9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8013a9c:	d101      	bne.n	8013aa2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	e001      	b.n	8013aa6 <ip4_route+0xca>
  }

  return netif_default;
 8013aa2:	4b05      	ldr	r3, [pc, #20]	@ (8013ab8 <ip4_route+0xdc>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3714      	adds	r7, #20
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop
 8013ab4:	200171a8 	.word	0x200171a8
 8013ab8:	200171ac 	.word	0x200171ac

08013abc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013aca:	f003 0301 	and.w	r3, r3, #1
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d016      	beq.n	8013b02 <ip4_input_accept+0x46>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	3304      	adds	r3, #4
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d011      	beq.n	8013b02 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013ade:	4b0b      	ldr	r3, [pc, #44]	@ (8013b0c <ip4_input_accept+0x50>)
 8013ae0:	695a      	ldr	r2, [r3, #20]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	3304      	adds	r3, #4
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d008      	beq.n	8013afe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013aec:	4b07      	ldr	r3, [pc, #28]	@ (8013b0c <ip4_input_accept+0x50>)
 8013aee:	695b      	ldr	r3, [r3, #20]
 8013af0:	6879      	ldr	r1, [r7, #4]
 8013af2:	4618      	mov	r0, r3
 8013af4:	f000 fa08 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 8013af8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d001      	beq.n	8013b02 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013afe:	2301      	movs	r3, #1
 8013b00:	e000      	b.n	8013b04 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013b02:	2300      	movs	r3, #0
}
 8013b04:	4618      	mov	r0, r3
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	2000f280 	.word	0x2000f280

08013b10 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	685b      	ldr	r3, [r3, #4]
 8013b1e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	091b      	lsrs	r3, r3, #4
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	2b04      	cmp	r3, #4
 8013b2a:	d004      	beq.n	8013b36 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f7f8 f857 	bl	800bbe0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013b32:	2300      	movs	r3, #0
 8013b34:	e107      	b.n	8013d46 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	781b      	ldrb	r3, [r3, #0]
 8013b3a:	f003 030f 	and.w	r3, r3, #15
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	009b      	lsls	r3, r3, #2
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	885b      	ldrh	r3, [r3, #2]
 8013b4a:	b29b      	uxth	r3, r3
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7f6 fbdb 	bl	800a308 <lwip_htons>
 8013b52:	4603      	mov	r3, r0
 8013b54:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	891b      	ldrh	r3, [r3, #8]
 8013b5a:	89ba      	ldrh	r2, [r7, #12]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d204      	bcs.n	8013b6a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013b60:	89bb      	ldrh	r3, [r7, #12]
 8013b62:	4619      	mov	r1, r3
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f7f7 feb5 	bl	800b8d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	895b      	ldrh	r3, [r3, #10]
 8013b6e:	89fa      	ldrh	r2, [r7, #14]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d807      	bhi.n	8013b84 <ip4_input+0x74>
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	891b      	ldrh	r3, [r3, #8]
 8013b78:	89ba      	ldrh	r2, [r7, #12]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d802      	bhi.n	8013b84 <ip4_input+0x74>
 8013b7e:	89fb      	ldrh	r3, [r7, #14]
 8013b80:	2b13      	cmp	r3, #19
 8013b82:	d804      	bhi.n	8013b8e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7f8 f82b 	bl	800bbe0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	e0db      	b.n	8013d46 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	691b      	ldr	r3, [r3, #16]
 8013b92:	4a6f      	ldr	r2, [pc, #444]	@ (8013d50 <ip4_input+0x240>)
 8013b94:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8013d50 <ip4_input+0x240>)
 8013b9c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b9e:	4b6c      	ldr	r3, [pc, #432]	@ (8013d50 <ip4_input+0x240>)
 8013ba0:	695b      	ldr	r3, [r3, #20]
 8013ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013ba6:	2be0      	cmp	r3, #224	@ 0xe0
 8013ba8:	d112      	bne.n	8013bd0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013bb0:	f003 0301 	and.w	r3, r3, #1
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d007      	beq.n	8013bca <ip4_input+0xba>
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	3304      	adds	r3, #4
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d002      	beq.n	8013bca <ip4_input+0xba>
      netif = inp;
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	613b      	str	r3, [r7, #16]
 8013bc8:	e02a      	b.n	8013c20 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	613b      	str	r3, [r7, #16]
 8013bce:	e027      	b.n	8013c20 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013bd0:	6838      	ldr	r0, [r7, #0]
 8013bd2:	f7ff ff73 	bl	8013abc <ip4_input_accept>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d002      	beq.n	8013be2 <ip4_input+0xd2>
      netif = inp;
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	613b      	str	r3, [r7, #16]
 8013be0:	e01e      	b.n	8013c20 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013be2:	2300      	movs	r3, #0
 8013be4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013be6:	4b5a      	ldr	r3, [pc, #360]	@ (8013d50 <ip4_input+0x240>)
 8013be8:	695b      	ldr	r3, [r3, #20]
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8013bee:	d017      	beq.n	8013c20 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013bf0:	4b58      	ldr	r3, [pc, #352]	@ (8013d54 <ip4_input+0x244>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	613b      	str	r3, [r7, #16]
 8013bf6:	e00e      	b.n	8013c16 <ip4_input+0x106>
          if (netif == inp) {
 8013bf8:	693a      	ldr	r2, [r7, #16]
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d006      	beq.n	8013c0e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013c00:	6938      	ldr	r0, [r7, #16]
 8013c02:	f7ff ff5b 	bl	8013abc <ip4_input_accept>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d108      	bne.n	8013c1e <ip4_input+0x10e>
 8013c0c:	e000      	b.n	8013c10 <ip4_input+0x100>
            continue;
 8013c0e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	613b      	str	r3, [r7, #16]
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d1ed      	bne.n	8013bf8 <ip4_input+0xe8>
 8013c1c:	e000      	b.n	8013c20 <ip4_input+0x110>
            break;
 8013c1e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c20:	4b4b      	ldr	r3, [pc, #300]	@ (8013d50 <ip4_input+0x240>)
 8013c22:	691b      	ldr	r3, [r3, #16]
 8013c24:	6839      	ldr	r1, [r7, #0]
 8013c26:	4618      	mov	r0, r3
 8013c28:	f000 f96e 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d105      	bne.n	8013c3e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013c32:	4b47      	ldr	r3, [pc, #284]	@ (8013d50 <ip4_input+0x240>)
 8013c34:	691b      	ldr	r3, [r3, #16]
 8013c36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013c3a:	2be0      	cmp	r3, #224	@ 0xe0
 8013c3c:	d104      	bne.n	8013c48 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f7f7 ffce 	bl	800bbe0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013c44:	2300      	movs	r3, #0
 8013c46:	e07e      	b.n	8013d46 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d104      	bne.n	8013c58 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f7f7 ffc6 	bl	800bbe0 <pbuf_free>
    return ERR_OK;
 8013c54:	2300      	movs	r3, #0
 8013c56:	e076      	b.n	8013d46 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	88db      	ldrh	r3, [r3, #6]
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	461a      	mov	r2, r3
 8013c60:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013c64:	4013      	ands	r3, r2
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d00b      	beq.n	8013c82 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f000 fc92 	bl	8014594 <ip4_reass>
 8013c70:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d101      	bne.n	8013c7c <ip4_input+0x16c>
      return ERR_OK;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	e064      	b.n	8013d46 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013c82:	4a33      	ldr	r2, [pc, #204]	@ (8013d50 <ip4_input+0x240>)
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013c88:	4a31      	ldr	r2, [pc, #196]	@ (8013d50 <ip4_input+0x240>)
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013c8e:	4a30      	ldr	r2, [pc, #192]	@ (8013d50 <ip4_input+0x240>)
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	f003 030f 	and.w	r3, r3, #15
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	009b      	lsls	r3, r3, #2
 8013ca0:	b2db      	uxtb	r3, r3
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8013d50 <ip4_input+0x240>)
 8013ca6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013ca8:	89fb      	ldrh	r3, [r7, #14]
 8013caa:	4619      	mov	r1, r3
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f7f7 ff11 	bl	800bad4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	7a5b      	ldrb	r3, [r3, #9]
 8013cb6:	2b11      	cmp	r3, #17
 8013cb8:	d006      	beq.n	8013cc8 <ip4_input+0x1b8>
 8013cba:	2b11      	cmp	r3, #17
 8013cbc:	dc13      	bgt.n	8013ce6 <ip4_input+0x1d6>
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d00c      	beq.n	8013cdc <ip4_input+0x1cc>
 8013cc2:	2b06      	cmp	r3, #6
 8013cc4:	d005      	beq.n	8013cd2 <ip4_input+0x1c2>
 8013cc6:	e00e      	b.n	8013ce6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013cc8:	6839      	ldr	r1, [r7, #0]
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f7fe fc68 	bl	80125a0 <udp_input>
        break;
 8013cd0:	e026      	b.n	8013d20 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013cd2:	6839      	ldr	r1, [r7, #0]
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f7fa f85f 	bl	800dd98 <tcp_input>
        break;
 8013cda:	e021      	b.n	8013d20 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013cdc:	6839      	ldr	r1, [r7, #0]
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f7ff fcee 	bl	80136c0 <icmp_input>
        break;
 8013ce4:	e01c      	b.n	8013d20 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8013d50 <ip4_input+0x240>)
 8013ce8:	695b      	ldr	r3, [r3, #20]
 8013cea:	6939      	ldr	r1, [r7, #16]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f000 f90b 	bl	8013f08 <ip4_addr_isbroadcast_u32>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d10f      	bne.n	8013d18 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013cf8:	4b15      	ldr	r3, [pc, #84]	@ (8013d50 <ip4_input+0x240>)
 8013cfa:	695b      	ldr	r3, [r3, #20]
 8013cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013d00:	2be0      	cmp	r3, #224	@ 0xe0
 8013d02:	d009      	beq.n	8013d18 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013d08:	4619      	mov	r1, r3
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f7f7 ff55 	bl	800bbba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013d10:	2102      	movs	r1, #2
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ff fdd8 	bl	80138c8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f7f7 ff61 	bl	800bbe0 <pbuf_free>
        break;
 8013d1e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013d20:	4b0b      	ldr	r3, [pc, #44]	@ (8013d50 <ip4_input+0x240>)
 8013d22:	2200      	movs	r2, #0
 8013d24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013d26:	4b0a      	ldr	r3, [pc, #40]	@ (8013d50 <ip4_input+0x240>)
 8013d28:	2200      	movs	r2, #0
 8013d2a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013d2c:	4b08      	ldr	r3, [pc, #32]	@ (8013d50 <ip4_input+0x240>)
 8013d2e:	2200      	movs	r2, #0
 8013d30:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013d32:	4b07      	ldr	r3, [pc, #28]	@ (8013d50 <ip4_input+0x240>)
 8013d34:	2200      	movs	r2, #0
 8013d36:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013d38:	4b05      	ldr	r3, [pc, #20]	@ (8013d50 <ip4_input+0x240>)
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013d3e:	4b04      	ldr	r3, [pc, #16]	@ (8013d50 <ip4_input+0x240>)
 8013d40:	2200      	movs	r2, #0
 8013d42:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013d44:	2300      	movs	r3, #0
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3718      	adds	r7, #24
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	2000f280 	.word	0x2000f280
 8013d54:	200171a8 	.word	0x200171a8

08013d58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b08a      	sub	sp, #40	@ 0x28
 8013d5c:	af04      	add	r7, sp, #16
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	607a      	str	r2, [r7, #4]
 8013d64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d009      	beq.n	8013d84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d003      	beq.n	8013d7e <ip4_output_if+0x26>
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d102      	bne.n	8013d84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d80:	3304      	adds	r3, #4
 8013d82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013d84:	78fa      	ldrb	r2, [r7, #3]
 8013d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d88:	9302      	str	r3, [sp, #8]
 8013d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013d8e:	9301      	str	r3, [sp, #4]
 8013d90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013d94:	9300      	str	r3, [sp, #0]
 8013d96:	4613      	mov	r3, r2
 8013d98:	687a      	ldr	r2, [r7, #4]
 8013d9a:	6979      	ldr	r1, [r7, #20]
 8013d9c:	68f8      	ldr	r0, [r7, #12]
 8013d9e:	f000 f805 	bl	8013dac <ip4_output_if_src>
 8013da2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3718      	adds	r7, #24
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b088      	sub	sp, #32
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	607a      	str	r2, [r7, #4]
 8013db8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	7b9b      	ldrb	r3, [r3, #14]
 8013dbe:	2b01      	cmp	r3, #1
 8013dc0:	d006      	beq.n	8013dd0 <ip4_output_if_src+0x24>
 8013dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8013ef0 <ip4_output_if_src+0x144>)
 8013dc4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013dc8:	494a      	ldr	r1, [pc, #296]	@ (8013ef4 <ip4_output_if_src+0x148>)
 8013dca:	484b      	ldr	r0, [pc, #300]	@ (8013ef8 <ip4_output_if_src+0x14c>)
 8013dcc:	f001 fa90 	bl	80152f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d060      	beq.n	8013e98 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013dd6:	2314      	movs	r3, #20
 8013dd8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013dda:	2114      	movs	r1, #20
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f7f7 fe69 	bl	800bab4 <pbuf_add_header>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d002      	beq.n	8013dee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013de8:	f06f 0301 	mvn.w	r3, #1
 8013dec:	e07c      	b.n	8013ee8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	685b      	ldr	r3, [r3, #4]
 8013df2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	895b      	ldrh	r3, [r3, #10]
 8013df8:	2b13      	cmp	r3, #19
 8013dfa:	d806      	bhi.n	8013e0a <ip4_output_if_src+0x5e>
 8013dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8013ef0 <ip4_output_if_src+0x144>)
 8013dfe:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013e02:	493e      	ldr	r1, [pc, #248]	@ (8013efc <ip4_output_if_src+0x150>)
 8013e04:	483c      	ldr	r0, [pc, #240]	@ (8013ef8 <ip4_output_if_src+0x14c>)
 8013e06:	f001 fa73 	bl	80152f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013e0a:	69fb      	ldr	r3, [r7, #28]
 8013e0c:	78fa      	ldrb	r2, [r7, #3]
 8013e0e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013e10:	69fb      	ldr	r3, [r7, #28]
 8013e12:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013e16:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681a      	ldr	r2, [r3, #0]
 8013e1c:	69fb      	ldr	r3, [r7, #28]
 8013e1e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013e20:	8b7b      	ldrh	r3, [r7, #26]
 8013e22:	089b      	lsrs	r3, r3, #2
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e2c:	b2da      	uxtb	r2, r3
 8013e2e:	69fb      	ldr	r3, [r7, #28]
 8013e30:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013e38:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	891b      	ldrh	r3, [r3, #8]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7f6 fa62 	bl	800a308 <lwip_htons>
 8013e44:	4603      	mov	r3, r0
 8013e46:	461a      	mov	r2, r3
 8013e48:	69fb      	ldr	r3, [r7, #28]
 8013e4a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013e4c:	69fb      	ldr	r3, [r7, #28]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	719a      	strb	r2, [r3, #6]
 8013e52:	2200      	movs	r2, #0
 8013e54:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013e56:	4b2a      	ldr	r3, [pc, #168]	@ (8013f00 <ip4_output_if_src+0x154>)
 8013e58:	881b      	ldrh	r3, [r3, #0]
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7f6 fa54 	bl	800a308 <lwip_htons>
 8013e60:	4603      	mov	r3, r0
 8013e62:	461a      	mov	r2, r3
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013e68:	4b25      	ldr	r3, [pc, #148]	@ (8013f00 <ip4_output_if_src+0x154>)
 8013e6a:	881b      	ldrh	r3, [r3, #0]
 8013e6c:	3301      	adds	r3, #1
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	4b23      	ldr	r3, [pc, #140]	@ (8013f00 <ip4_output_if_src+0x154>)
 8013e72:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d104      	bne.n	8013e84 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013e7a:	4b22      	ldr	r3, [pc, #136]	@ (8013f04 <ip4_output_if_src+0x158>)
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	69fb      	ldr	r3, [r7, #28]
 8013e80:	60da      	str	r2, [r3, #12]
 8013e82:	e003      	b.n	8013e8c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	681a      	ldr	r2, [r3, #0]
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	729a      	strb	r2, [r3, #10]
 8013e92:	2200      	movs	r2, #0
 8013e94:	72da      	strb	r2, [r3, #11]
 8013e96:	e00f      	b.n	8013eb8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	895b      	ldrh	r3, [r3, #10]
 8013e9c:	2b13      	cmp	r3, #19
 8013e9e:	d802      	bhi.n	8013ea6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013ea0:	f06f 0301 	mvn.w	r3, #1
 8013ea4:	e020      	b.n	8013ee8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	691b      	ldr	r3, [r3, #16]
 8013eb0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013eb2:	f107 0314 	add.w	r3, r7, #20
 8013eb6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d00c      	beq.n	8013eda <ip4_output_if_src+0x12e>
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	891a      	ldrh	r2, [r3, #8]
 8013ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ec6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d906      	bls.n	8013eda <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f000 fd53 	bl	801497c <ip4_frag>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	e006      	b.n	8013ee8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013edc:	695b      	ldr	r3, [r3, #20]
 8013ede:	687a      	ldr	r2, [r7, #4]
 8013ee0:	68f9      	ldr	r1, [r7, #12]
 8013ee2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ee4:	4798      	blx	r3
 8013ee6:	4603      	mov	r3, r0
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3720      	adds	r7, #32
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}
 8013ef0:	080197b4 	.word	0x080197b4
 8013ef4:	080197e8 	.word	0x080197e8
 8013ef8:	080197f4 	.word	0x080197f4
 8013efc:	0801981c 	.word	0x0801981c
 8013f00:	20017306 	.word	0x20017306
 8013f04:	0801a3a8 	.word	0x0801a3a8

08013f08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b085      	sub	sp, #20
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f1c:	d002      	beq.n	8013f24 <ip4_addr_isbroadcast_u32+0x1c>
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d101      	bne.n	8013f28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013f24:	2301      	movs	r3, #1
 8013f26:	e02a      	b.n	8013f7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f2e:	f003 0302 	and.w	r3, r3, #2
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d101      	bne.n	8013f3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013f36:	2300      	movs	r3, #0
 8013f38:	e021      	b.n	8013f7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	3304      	adds	r3, #4
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	429a      	cmp	r2, r3
 8013f44:	d101      	bne.n	8013f4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013f46:	2300      	movs	r3, #0
 8013f48:	e019      	b.n	8013f7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	3304      	adds	r3, #4
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	405a      	eors	r2, r3
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	3308      	adds	r3, #8
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4013      	ands	r3, r2
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d10d      	bne.n	8013f7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	3308      	adds	r3, #8
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	43da      	mvns	r2, r3
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	3308      	adds	r3, #8
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d101      	bne.n	8013f7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013f78:	2301      	movs	r3, #1
 8013f7a:	e000      	b.n	8013f7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013f7c:	2300      	movs	r3, #0
  }
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3714      	adds	r7, #20
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr
	...

08013f8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b084      	sub	sp, #16
 8013f90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013f92:	2300      	movs	r3, #0
 8013f94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013f96:	4b12      	ldr	r3, [pc, #72]	@ (8013fe0 <ip_reass_tmr+0x54>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013f9c:	e018      	b.n	8013fd0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	7fdb      	ldrb	r3, [r3, #31]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00b      	beq.n	8013fbe <ip_reass_tmr+0x32>
      r->timer--;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	7fdb      	ldrb	r3, [r3, #31]
 8013faa:	3b01      	subs	r3, #1
 8013fac:	b2da      	uxtb	r2, r3
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	60fb      	str	r3, [r7, #12]
 8013fbc:	e008      	b.n	8013fd0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013fc8:	68b9      	ldr	r1, [r7, #8]
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f000 f80a 	bl	8013fe4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d1e3      	bne.n	8013f9e <ip_reass_tmr+0x12>
    }
  }
}
 8013fd6:	bf00      	nop
 8013fd8:	bf00      	nop
 8013fda:	3710      	adds	r7, #16
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	20017308 	.word	0x20017308

08013fe4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b088      	sub	sp, #32
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
 8013fec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013ff2:	683a      	ldr	r2, [r7, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	429a      	cmp	r2, r3
 8013ff8:	d105      	bne.n	8014006 <ip_reass_free_complete_datagram+0x22>
 8013ffa:	4b45      	ldr	r3, [pc, #276]	@ (8014110 <ip_reass_free_complete_datagram+0x12c>)
 8013ffc:	22ab      	movs	r2, #171	@ 0xab
 8013ffe:	4945      	ldr	r1, [pc, #276]	@ (8014114 <ip_reass_free_complete_datagram+0x130>)
 8014000:	4845      	ldr	r0, [pc, #276]	@ (8014118 <ip_reass_free_complete_datagram+0x134>)
 8014002:	f001 f975 	bl	80152f0 <iprintf>
  if (prev != NULL) {
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d00a      	beq.n	8014022 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	429a      	cmp	r2, r3
 8014014:	d005      	beq.n	8014022 <ip_reass_free_complete_datagram+0x3e>
 8014016:	4b3e      	ldr	r3, [pc, #248]	@ (8014110 <ip_reass_free_complete_datagram+0x12c>)
 8014018:	22ad      	movs	r2, #173	@ 0xad
 801401a:	4940      	ldr	r1, [pc, #256]	@ (801411c <ip_reass_free_complete_datagram+0x138>)
 801401c:	483e      	ldr	r0, [pc, #248]	@ (8014118 <ip_reass_free_complete_datagram+0x134>)
 801401e:	f001 f967 	bl	80152f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	889b      	ldrh	r3, [r3, #4]
 801402e:	b29b      	uxth	r3, r3
 8014030:	2b00      	cmp	r3, #0
 8014032:	d12a      	bne.n	801408a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	685b      	ldr	r3, [r3, #4]
 8014038:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014042:	69bb      	ldr	r3, [r7, #24]
 8014044:	6858      	ldr	r0, [r3, #4]
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	3308      	adds	r3, #8
 801404a:	2214      	movs	r2, #20
 801404c:	4619      	mov	r1, r3
 801404e:	f001 fbf8 	bl	8015842 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014052:	2101      	movs	r1, #1
 8014054:	69b8      	ldr	r0, [r7, #24]
 8014056:	f7ff fc47 	bl	80138e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801405a:	69b8      	ldr	r0, [r7, #24]
 801405c:	f7f7 fe4e 	bl	800bcfc <pbuf_clen>
 8014060:	4603      	mov	r3, r0
 8014062:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014064:	8bfa      	ldrh	r2, [r7, #30]
 8014066:	8a7b      	ldrh	r3, [r7, #18]
 8014068:	4413      	add	r3, r2
 801406a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801406e:	db05      	blt.n	801407c <ip_reass_free_complete_datagram+0x98>
 8014070:	4b27      	ldr	r3, [pc, #156]	@ (8014110 <ip_reass_free_complete_datagram+0x12c>)
 8014072:	22bc      	movs	r2, #188	@ 0xbc
 8014074:	492a      	ldr	r1, [pc, #168]	@ (8014120 <ip_reass_free_complete_datagram+0x13c>)
 8014076:	4828      	ldr	r0, [pc, #160]	@ (8014118 <ip_reass_free_complete_datagram+0x134>)
 8014078:	f001 f93a 	bl	80152f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801407c:	8bfa      	ldrh	r2, [r7, #30]
 801407e:	8a7b      	ldrh	r3, [r7, #18]
 8014080:	4413      	add	r3, r2
 8014082:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014084:	69b8      	ldr	r0, [r7, #24]
 8014086:	f7f7 fdab 	bl	800bbe0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014090:	e01f      	b.n	80140d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014092:	69bb      	ldr	r3, [r7, #24]
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80140a2:	68f8      	ldr	r0, [r7, #12]
 80140a4:	f7f7 fe2a 	bl	800bcfc <pbuf_clen>
 80140a8:	4603      	mov	r3, r0
 80140aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80140ac:	8bfa      	ldrh	r2, [r7, #30]
 80140ae:	8a7b      	ldrh	r3, [r7, #18]
 80140b0:	4413      	add	r3, r2
 80140b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140b6:	db05      	blt.n	80140c4 <ip_reass_free_complete_datagram+0xe0>
 80140b8:	4b15      	ldr	r3, [pc, #84]	@ (8014110 <ip_reass_free_complete_datagram+0x12c>)
 80140ba:	22cc      	movs	r2, #204	@ 0xcc
 80140bc:	4918      	ldr	r1, [pc, #96]	@ (8014120 <ip_reass_free_complete_datagram+0x13c>)
 80140be:	4816      	ldr	r0, [pc, #88]	@ (8014118 <ip_reass_free_complete_datagram+0x134>)
 80140c0:	f001 f916 	bl	80152f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80140c4:	8bfa      	ldrh	r2, [r7, #30]
 80140c6:	8a7b      	ldrh	r3, [r7, #18]
 80140c8:	4413      	add	r3, r2
 80140ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80140cc:	68f8      	ldr	r0, [r7, #12]
 80140ce:	f7f7 fd87 	bl	800bbe0 <pbuf_free>
  while (p != NULL) {
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d1dc      	bne.n	8014092 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80140d8:	6839      	ldr	r1, [r7, #0]
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f000 f8c2 	bl	8014264 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80140e0:	4b10      	ldr	r3, [pc, #64]	@ (8014124 <ip_reass_free_complete_datagram+0x140>)
 80140e2:	881b      	ldrh	r3, [r3, #0]
 80140e4:	8bfa      	ldrh	r2, [r7, #30]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d905      	bls.n	80140f6 <ip_reass_free_complete_datagram+0x112>
 80140ea:	4b09      	ldr	r3, [pc, #36]	@ (8014110 <ip_reass_free_complete_datagram+0x12c>)
 80140ec:	22d2      	movs	r2, #210	@ 0xd2
 80140ee:	490e      	ldr	r1, [pc, #56]	@ (8014128 <ip_reass_free_complete_datagram+0x144>)
 80140f0:	4809      	ldr	r0, [pc, #36]	@ (8014118 <ip_reass_free_complete_datagram+0x134>)
 80140f2:	f001 f8fd 	bl	80152f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80140f6:	4b0b      	ldr	r3, [pc, #44]	@ (8014124 <ip_reass_free_complete_datagram+0x140>)
 80140f8:	881a      	ldrh	r2, [r3, #0]
 80140fa:	8bfb      	ldrh	r3, [r7, #30]
 80140fc:	1ad3      	subs	r3, r2, r3
 80140fe:	b29a      	uxth	r2, r3
 8014100:	4b08      	ldr	r3, [pc, #32]	@ (8014124 <ip_reass_free_complete_datagram+0x140>)
 8014102:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014104:	8bfb      	ldrh	r3, [r7, #30]
}
 8014106:	4618      	mov	r0, r3
 8014108:	3720      	adds	r7, #32
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}
 801410e:	bf00      	nop
 8014110:	0801984c 	.word	0x0801984c
 8014114:	08019888 	.word	0x08019888
 8014118:	08019894 	.word	0x08019894
 801411c:	080198bc 	.word	0x080198bc
 8014120:	080198d0 	.word	0x080198d0
 8014124:	2001730c 	.word	0x2001730c
 8014128:	080198f0 	.word	0x080198f0

0801412c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b08a      	sub	sp, #40	@ 0x28
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014136:	2300      	movs	r3, #0
 8014138:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801413a:	2300      	movs	r3, #0
 801413c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801413e:	2300      	movs	r3, #0
 8014140:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014142:	2300      	movs	r3, #0
 8014144:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014146:	2300      	movs	r3, #0
 8014148:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801414a:	4b28      	ldr	r3, [pc, #160]	@ (80141ec <ip_reass_remove_oldest_datagram+0xc0>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014150:	e030      	b.n	80141b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014154:	695a      	ldr	r2, [r3, #20]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	68db      	ldr	r3, [r3, #12]
 801415a:	429a      	cmp	r2, r3
 801415c:	d10c      	bne.n	8014178 <ip_reass_remove_oldest_datagram+0x4c>
 801415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014160:	699a      	ldr	r2, [r3, #24]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	691b      	ldr	r3, [r3, #16]
 8014166:	429a      	cmp	r2, r3
 8014168:	d106      	bne.n	8014178 <ip_reass_remove_oldest_datagram+0x4c>
 801416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416c:	899a      	ldrh	r2, [r3, #12]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	889b      	ldrh	r3, [r3, #4]
 8014172:	b29b      	uxth	r3, r3
 8014174:	429a      	cmp	r2, r3
 8014176:	d014      	beq.n	80141a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	3301      	adds	r3, #1
 801417c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801417e:	6a3b      	ldr	r3, [r7, #32]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d104      	bne.n	801418e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014186:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	61bb      	str	r3, [r7, #24]
 801418c:	e009      	b.n	80141a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014190:	7fda      	ldrb	r2, [r3, #31]
 8014192:	6a3b      	ldr	r3, [r7, #32]
 8014194:	7fdb      	ldrb	r3, [r3, #31]
 8014196:	429a      	cmp	r2, r3
 8014198:	d803      	bhi.n	80141a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801419c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801419e:	69fb      	ldr	r3, [r7, #28]
 80141a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80141a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d001      	beq.n	80141ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80141aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80141ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80141b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d1cb      	bne.n	8014152 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80141ba:	6a3b      	ldr	r3, [r7, #32]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d008      	beq.n	80141d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80141c0:	69b9      	ldr	r1, [r7, #24]
 80141c2:	6a38      	ldr	r0, [r7, #32]
 80141c4:	f7ff ff0e 	bl	8013fe4 <ip_reass_free_complete_datagram>
 80141c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80141ca:	697a      	ldr	r2, [r7, #20]
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	4413      	add	r3, r2
 80141d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80141d2:	697a      	ldr	r2, [r7, #20]
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	da02      	bge.n	80141e0 <ip_reass_remove_oldest_datagram+0xb4>
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	2b01      	cmp	r3, #1
 80141de:	dcac      	bgt.n	801413a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80141e0:	697b      	ldr	r3, [r7, #20]
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3728      	adds	r7, #40	@ 0x28
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	20017308 	.word	0x20017308

080141f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80141fa:	2004      	movs	r0, #4
 80141fc:	f7f6 fdd6 	bl	800adac <memp_malloc>
 8014200:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d110      	bne.n	801422a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014208:	6839      	ldr	r1, [r7, #0]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7ff ff8e 	bl	801412c <ip_reass_remove_oldest_datagram>
 8014210:	4602      	mov	r2, r0
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	4293      	cmp	r3, r2
 8014216:	dc03      	bgt.n	8014220 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014218:	2004      	movs	r0, #4
 801421a:	f7f6 fdc7 	bl	800adac <memp_malloc>
 801421e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d101      	bne.n	801422a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014226:	2300      	movs	r3, #0
 8014228:	e016      	b.n	8014258 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801422a:	2220      	movs	r2, #32
 801422c:	2100      	movs	r1, #0
 801422e:	68f8      	ldr	r0, [r7, #12]
 8014230:	f001 fa06 	bl	8015640 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	220f      	movs	r2, #15
 8014238:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801423a:	4b09      	ldr	r3, [pc, #36]	@ (8014260 <ip_reass_enqueue_new_datagram+0x70>)
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014242:	4a07      	ldr	r2, [pc, #28]	@ (8014260 <ip_reass_enqueue_new_datagram+0x70>)
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	3308      	adds	r3, #8
 801424c:	2214      	movs	r2, #20
 801424e:	6879      	ldr	r1, [r7, #4]
 8014250:	4618      	mov	r0, r3
 8014252:	f001 faf6 	bl	8015842 <memcpy>
  return ipr;
 8014256:	68fb      	ldr	r3, [r7, #12]
}
 8014258:	4618      	mov	r0, r3
 801425a:	3710      	adds	r7, #16
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	20017308 	.word	0x20017308

08014264 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801426e:	4b10      	ldr	r3, [pc, #64]	@ (80142b0 <ip_reass_dequeue_datagram+0x4c>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	429a      	cmp	r2, r3
 8014276:	d104      	bne.n	8014282 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	4a0c      	ldr	r2, [pc, #48]	@ (80142b0 <ip_reass_dequeue_datagram+0x4c>)
 801427e:	6013      	str	r3, [r2, #0]
 8014280:	e00d      	b.n	801429e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d106      	bne.n	8014296 <ip_reass_dequeue_datagram+0x32>
 8014288:	4b0a      	ldr	r3, [pc, #40]	@ (80142b4 <ip_reass_dequeue_datagram+0x50>)
 801428a:	f240 1245 	movw	r2, #325	@ 0x145
 801428e:	490a      	ldr	r1, [pc, #40]	@ (80142b8 <ip_reass_dequeue_datagram+0x54>)
 8014290:	480a      	ldr	r0, [pc, #40]	@ (80142bc <ip_reass_dequeue_datagram+0x58>)
 8014292:	f001 f82d 	bl	80152f0 <iprintf>
    prev->next = ipr->next;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801429e:	6879      	ldr	r1, [r7, #4]
 80142a0:	2004      	movs	r0, #4
 80142a2:	f7f6 fdf9 	bl	800ae98 <memp_free>
}
 80142a6:	bf00      	nop
 80142a8:	3708      	adds	r7, #8
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	bf00      	nop
 80142b0:	20017308 	.word	0x20017308
 80142b4:	0801984c 	.word	0x0801984c
 80142b8:	08019914 	.word	0x08019914
 80142bc:	08019894 	.word	0x08019894

080142c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b08c      	sub	sp, #48	@ 0x30
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80142cc:	2300      	movs	r3, #0
 80142ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80142d0:	2301      	movs	r3, #1
 80142d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	885b      	ldrh	r3, [r3, #2]
 80142de:	b29b      	uxth	r3, r3
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f6 f811 	bl	800a308 <lwip_htons>
 80142e6:	4603      	mov	r3, r0
 80142e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80142ea:	69fb      	ldr	r3, [r7, #28]
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	f003 030f 	and.w	r3, r3, #15
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	009b      	lsls	r3, r3, #2
 80142f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80142f8:	7e7b      	ldrb	r3, [r7, #25]
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	8b7a      	ldrh	r2, [r7, #26]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d202      	bcs.n	8014308 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014302:	f04f 33ff 	mov.w	r3, #4294967295
 8014306:	e135      	b.n	8014574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014308:	7e7b      	ldrb	r3, [r7, #25]
 801430a:	b29b      	uxth	r3, r3
 801430c:	8b7a      	ldrh	r2, [r7, #26]
 801430e:	1ad3      	subs	r3, r2, r3
 8014310:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	88db      	ldrh	r3, [r3, #6]
 8014316:	b29b      	uxth	r3, r3
 8014318:	4618      	mov	r0, r3
 801431a:	f7f5 fff5 	bl	800a308 <lwip_htons>
 801431e:	4603      	mov	r3, r0
 8014320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014324:	b29b      	uxth	r3, r3
 8014326:	00db      	lsls	r3, r3, #3
 8014328:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8014330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014332:	2200      	movs	r2, #0
 8014334:	701a      	strb	r2, [r3, #0]
 8014336:	2200      	movs	r2, #0
 8014338:	705a      	strb	r2, [r3, #1]
 801433a:	2200      	movs	r2, #0
 801433c:	709a      	strb	r2, [r3, #2]
 801433e:	2200      	movs	r2, #0
 8014340:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014344:	8afa      	ldrh	r2, [r7, #22]
 8014346:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014348:	8afa      	ldrh	r2, [r7, #22]
 801434a:	8b7b      	ldrh	r3, [r7, #26]
 801434c:	4413      	add	r3, r2
 801434e:	b29a      	uxth	r2, r3
 8014350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014352:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014356:	88db      	ldrh	r3, [r3, #6]
 8014358:	b29b      	uxth	r3, r3
 801435a:	8afa      	ldrh	r2, [r7, #22]
 801435c:	429a      	cmp	r2, r3
 801435e:	d902      	bls.n	8014366 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014360:	f04f 33ff 	mov.w	r3, #4294967295
 8014364:	e106      	b.n	8014574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	627b      	str	r3, [r7, #36]	@ 0x24
 801436c:	e068      	b.n	8014440 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014376:	889b      	ldrh	r3, [r3, #4]
 8014378:	b29a      	uxth	r2, r3
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	889b      	ldrh	r3, [r3, #4]
 801437e:	b29b      	uxth	r3, r3
 8014380:	429a      	cmp	r2, r3
 8014382:	d235      	bcs.n	80143f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014388:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801438c:	2b00      	cmp	r3, #0
 801438e:	d020      	beq.n	80143d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014392:	889b      	ldrh	r3, [r3, #4]
 8014394:	b29a      	uxth	r2, r3
 8014396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014398:	88db      	ldrh	r3, [r3, #6]
 801439a:	b29b      	uxth	r3, r3
 801439c:	429a      	cmp	r2, r3
 801439e:	d307      	bcc.n	80143b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80143a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143a2:	88db      	ldrh	r3, [r3, #6]
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	889b      	ldrh	r3, [r3, #4]
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d902      	bls.n	80143b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143b0:	f04f 33ff 	mov.w	r3, #4294967295
 80143b4:	e0de      	b.n	8014574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80143b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b8:	68ba      	ldr	r2, [r7, #8]
 80143ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80143bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143be:	88db      	ldrh	r3, [r3, #6]
 80143c0:	b29a      	uxth	r2, r3
 80143c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c4:	889b      	ldrh	r3, [r3, #4]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d03d      	beq.n	8014448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80143cc:	2300      	movs	r3, #0
 80143ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80143d0:	e03a      	b.n	8014448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80143d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d4:	88db      	ldrh	r3, [r3, #6]
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	889b      	ldrh	r3, [r3, #4]
 80143dc:	b29b      	uxth	r3, r3
 80143de:	429a      	cmp	r2, r3
 80143e0:	d902      	bls.n	80143e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143e2:	f04f 33ff 	mov.w	r3, #4294967295
 80143e6:	e0c5      	b.n	8014574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	68ba      	ldr	r2, [r7, #8]
 80143ec:	605a      	str	r2, [r3, #4]
      break;
 80143ee:	e02b      	b.n	8014448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80143f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143f2:	889b      	ldrh	r3, [r3, #4]
 80143f4:	b29a      	uxth	r2, r3
 80143f6:	693b      	ldr	r3, [r7, #16]
 80143f8:	889b      	ldrh	r3, [r3, #4]
 80143fa:	b29b      	uxth	r3, r3
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d102      	bne.n	8014406 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014400:	f04f 33ff 	mov.w	r3, #4294967295
 8014404:	e0b6      	b.n	8014574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014408:	889b      	ldrh	r3, [r3, #4]
 801440a:	b29a      	uxth	r2, r3
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	88db      	ldrh	r3, [r3, #6]
 8014410:	b29b      	uxth	r3, r3
 8014412:	429a      	cmp	r2, r3
 8014414:	d202      	bcs.n	801441c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014416:	f04f 33ff 	mov.w	r3, #4294967295
 801441a:	e0ab      	b.n	8014574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801441e:	2b00      	cmp	r3, #0
 8014420:	d009      	beq.n	8014436 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014424:	88db      	ldrh	r3, [r3, #6]
 8014426:	b29a      	uxth	r2, r3
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	889b      	ldrh	r3, [r3, #4]
 801442c:	b29b      	uxth	r3, r3
 801442e:	429a      	cmp	r2, r3
 8014430:	d001      	beq.n	8014436 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014432:	2300      	movs	r3, #0
 8014434:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8014440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014442:	2b00      	cmp	r3, #0
 8014444:	d193      	bne.n	801436e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014446:	e000      	b.n	801444a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014448:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801444c:	2b00      	cmp	r3, #0
 801444e:	d12d      	bne.n	80144ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014452:	2b00      	cmp	r3, #0
 8014454:	d01c      	beq.n	8014490 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014458:	88db      	ldrh	r3, [r3, #6]
 801445a:	b29a      	uxth	r2, r3
 801445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801445e:	889b      	ldrh	r3, [r3, #4]
 8014460:	b29b      	uxth	r3, r3
 8014462:	429a      	cmp	r2, r3
 8014464:	d906      	bls.n	8014474 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014466:	4b45      	ldr	r3, [pc, #276]	@ (801457c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014468:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801446c:	4944      	ldr	r1, [pc, #272]	@ (8014580 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801446e:	4845      	ldr	r0, [pc, #276]	@ (8014584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014470:	f000 ff3e 	bl	80152f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014476:	68ba      	ldr	r2, [r7, #8]
 8014478:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801447c:	88db      	ldrh	r3, [r3, #6]
 801447e:	b29a      	uxth	r2, r3
 8014480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014482:	889b      	ldrh	r3, [r3, #4]
 8014484:	b29b      	uxth	r3, r3
 8014486:	429a      	cmp	r2, r3
 8014488:	d010      	beq.n	80144ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801448a:	2300      	movs	r3, #0
 801448c:	623b      	str	r3, [r7, #32]
 801448e:	e00d      	b.n	80144ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d006      	beq.n	80144a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014498:	4b38      	ldr	r3, [pc, #224]	@ (801457c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801449a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801449e:	493a      	ldr	r1, [pc, #232]	@ (8014588 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80144a0:	4838      	ldr	r0, [pc, #224]	@ (8014584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144a2:	f000 ff25 	bl	80152f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	68ba      	ldr	r2, [r7, #8]
 80144aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d105      	bne.n	80144be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	7f9b      	ldrb	r3, [r3, #30]
 80144b6:	f003 0301 	and.w	r3, r3, #1
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d059      	beq.n	8014572 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80144be:	6a3b      	ldr	r3, [r7, #32]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d04f      	beq.n	8014564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d006      	beq.n	80144da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	889b      	ldrh	r3, [r3, #4]
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d002      	beq.n	80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80144da:	2300      	movs	r3, #0
 80144dc:	623b      	str	r3, [r7, #32]
 80144de:	e041      	b.n	8014564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80144e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80144e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80144ea:	e012      	b.n	8014512 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80144ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144ee:	685b      	ldr	r3, [r3, #4]
 80144f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80144f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144f4:	88db      	ldrh	r3, [r3, #6]
 80144f6:	b29a      	uxth	r2, r3
 80144f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144fa:	889b      	ldrh	r3, [r3, #4]
 80144fc:	b29b      	uxth	r3, r3
 80144fe:	429a      	cmp	r2, r3
 8014500:	d002      	beq.n	8014508 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014502:	2300      	movs	r3, #0
 8014504:	623b      	str	r3, [r7, #32]
            break;
 8014506:	e007      	b.n	8014518 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801450a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014514:	2b00      	cmp	r3, #0
 8014516:	d1e9      	bne.n	80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014518:	6a3b      	ldr	r3, [r7, #32]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d022      	beq.n	8014564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d106      	bne.n	8014534 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014526:	4b15      	ldr	r3, [pc, #84]	@ (801457c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014528:	f240 12df 	movw	r2, #479	@ 0x1df
 801452c:	4917      	ldr	r1, [pc, #92]	@ (801458c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801452e:	4815      	ldr	r0, [pc, #84]	@ (8014584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014530:	f000 fede 	bl	80152f0 <iprintf>
          LWIP_ASSERT("sanity check",
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801453c:	429a      	cmp	r2, r3
 801453e:	d106      	bne.n	801454e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014540:	4b0e      	ldr	r3, [pc, #56]	@ (801457c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014542:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8014546:	4911      	ldr	r1, [pc, #68]	@ (801458c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014548:	480e      	ldr	r0, [pc, #56]	@ (8014584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801454a:	f000 fed1 	bl	80152f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801454e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d006      	beq.n	8014564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014556:	4b09      	ldr	r3, [pc, #36]	@ (801457c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014558:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801455c:	490c      	ldr	r1, [pc, #48]	@ (8014590 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801455e:	4809      	ldr	r0, [pc, #36]	@ (8014584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014560:	f000 fec6 	bl	80152f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014564:	6a3b      	ldr	r3, [r7, #32]
 8014566:	2b00      	cmp	r3, #0
 8014568:	bf14      	ite	ne
 801456a:	2301      	movne	r3, #1
 801456c:	2300      	moveq	r3, #0
 801456e:	b2db      	uxtb	r3, r3
 8014570:	e000      	b.n	8014574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014572:	2300      	movs	r3, #0
}
 8014574:	4618      	mov	r0, r3
 8014576:	3730      	adds	r7, #48	@ 0x30
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	0801984c 	.word	0x0801984c
 8014580:	08019930 	.word	0x08019930
 8014584:	08019894 	.word	0x08019894
 8014588:	08019950 	.word	0x08019950
 801458c:	08019988 	.word	0x08019988
 8014590:	08019998 	.word	0x08019998

08014594 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b08e      	sub	sp, #56	@ 0x38
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80145a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	f003 030f 	and.w	r3, r3, #15
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	b2db      	uxtb	r3, r3
 80145b0:	2b14      	cmp	r3, #20
 80145b2:	f040 8171 	bne.w	8014898 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80145b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145b8:	88db      	ldrh	r3, [r3, #6]
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	4618      	mov	r0, r3
 80145be:	f7f5 fea3 	bl	800a308 <lwip_htons>
 80145c2:	4603      	mov	r3, r0
 80145c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	00db      	lsls	r3, r3, #3
 80145cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80145ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145d0:	885b      	ldrh	r3, [r3, #2]
 80145d2:	b29b      	uxth	r3, r3
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7f5 fe97 	bl	800a308 <lwip_htons>
 80145da:	4603      	mov	r3, r0
 80145dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80145de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	f003 030f 	and.w	r3, r3, #15
 80145e6:	b2db      	uxtb	r3, r3
 80145e8:	009b      	lsls	r3, r3, #2
 80145ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80145ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80145f6:	429a      	cmp	r2, r3
 80145f8:	f0c0 8150 	bcc.w	801489c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80145fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014600:	b29b      	uxth	r3, r3
 8014602:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014604:	1ad3      	subs	r3, r2, r3
 8014606:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f7f7 fb77 	bl	800bcfc <pbuf_clen>
 801460e:	4603      	mov	r3, r0
 8014610:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014612:	4b8c      	ldr	r3, [pc, #560]	@ (8014844 <ip4_reass+0x2b0>)
 8014614:	881b      	ldrh	r3, [r3, #0]
 8014616:	461a      	mov	r2, r3
 8014618:	8c3b      	ldrh	r3, [r7, #32]
 801461a:	4413      	add	r3, r2
 801461c:	2b0a      	cmp	r3, #10
 801461e:	dd10      	ble.n	8014642 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014620:	8c3b      	ldrh	r3, [r7, #32]
 8014622:	4619      	mov	r1, r3
 8014624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014626:	f7ff fd81 	bl	801412c <ip_reass_remove_oldest_datagram>
 801462a:	4603      	mov	r3, r0
 801462c:	2b00      	cmp	r3, #0
 801462e:	f000 8137 	beq.w	80148a0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014632:	4b84      	ldr	r3, [pc, #528]	@ (8014844 <ip4_reass+0x2b0>)
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	461a      	mov	r2, r3
 8014638:	8c3b      	ldrh	r3, [r7, #32]
 801463a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801463c:	2b0a      	cmp	r3, #10
 801463e:	f300 812f 	bgt.w	80148a0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014642:	4b81      	ldr	r3, [pc, #516]	@ (8014848 <ip4_reass+0x2b4>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	633b      	str	r3, [r7, #48]	@ 0x30
 8014648:	e015      	b.n	8014676 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801464c:	695a      	ldr	r2, [r3, #20]
 801464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014650:	68db      	ldr	r3, [r3, #12]
 8014652:	429a      	cmp	r2, r3
 8014654:	d10c      	bne.n	8014670 <ip4_reass+0xdc>
 8014656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014658:	699a      	ldr	r2, [r3, #24]
 801465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801465c:	691b      	ldr	r3, [r3, #16]
 801465e:	429a      	cmp	r2, r3
 8014660:	d106      	bne.n	8014670 <ip4_reass+0xdc>
 8014662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014664:	899a      	ldrh	r2, [r3, #12]
 8014666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014668:	889b      	ldrh	r3, [r3, #4]
 801466a:	b29b      	uxth	r3, r3
 801466c:	429a      	cmp	r2, r3
 801466e:	d006      	beq.n	801467e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	633b      	str	r3, [r7, #48]	@ 0x30
 8014676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014678:	2b00      	cmp	r3, #0
 801467a:	d1e6      	bne.n	801464a <ip4_reass+0xb6>
 801467c:	e000      	b.n	8014680 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801467e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014682:	2b00      	cmp	r3, #0
 8014684:	d109      	bne.n	801469a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014686:	8c3b      	ldrh	r3, [r7, #32]
 8014688:	4619      	mov	r1, r3
 801468a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801468c:	f7ff fdb0 	bl	80141f0 <ip_reass_enqueue_new_datagram>
 8014690:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014694:	2b00      	cmp	r3, #0
 8014696:	d11c      	bne.n	80146d2 <ip4_reass+0x13e>
      goto nullreturn;
 8014698:	e105      	b.n	80148a6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801469c:	88db      	ldrh	r3, [r3, #6]
 801469e:	b29b      	uxth	r3, r3
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7f5 fe31 	bl	800a308 <lwip_htons>
 80146a6:	4603      	mov	r3, r0
 80146a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d110      	bne.n	80146d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80146b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146b2:	89db      	ldrh	r3, [r3, #14]
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7f5 fe27 	bl	800a308 <lwip_htons>
 80146ba:	4603      	mov	r3, r0
 80146bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d006      	beq.n	80146d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80146c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146c6:	3308      	adds	r3, #8
 80146c8:	2214      	movs	r2, #20
 80146ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80146cc:	4618      	mov	r0, r3
 80146ce:	f001 f8b8 	bl	8015842 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80146d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146d4:	88db      	ldrh	r3, [r3, #6]
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	f003 0320 	and.w	r3, r3, #32
 80146dc:	2b00      	cmp	r3, #0
 80146de:	bf0c      	ite	eq
 80146e0:	2301      	moveq	r3, #1
 80146e2:	2300      	movne	r3, #0
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80146e8:	69fb      	ldr	r3, [r7, #28]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d00e      	beq.n	801470c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80146ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80146f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146f2:	4413      	add	r3, r2
 80146f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80146f6:	8b7a      	ldrh	r2, [r7, #26]
 80146f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80146fa:	429a      	cmp	r2, r3
 80146fc:	f0c0 80a0 	bcc.w	8014840 <ip4_reass+0x2ac>
 8014700:	8b7b      	ldrh	r3, [r7, #26]
 8014702:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014706:	4293      	cmp	r3, r2
 8014708:	f200 809a 	bhi.w	8014840 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801470c:	69fa      	ldr	r2, [r7, #28]
 801470e:	6879      	ldr	r1, [r7, #4]
 8014710:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014712:	f7ff fdd5 	bl	80142c0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014716:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801471e:	f000 809b 	beq.w	8014858 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014722:	4b48      	ldr	r3, [pc, #288]	@ (8014844 <ip4_reass+0x2b0>)
 8014724:	881a      	ldrh	r2, [r3, #0]
 8014726:	8c3b      	ldrh	r3, [r7, #32]
 8014728:	4413      	add	r3, r2
 801472a:	b29a      	uxth	r2, r3
 801472c:	4b45      	ldr	r3, [pc, #276]	@ (8014844 <ip4_reass+0x2b0>)
 801472e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014730:	69fb      	ldr	r3, [r7, #28]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d00d      	beq.n	8014752 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014736:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014738:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801473a:	4413      	add	r3, r2
 801473c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014740:	8a7a      	ldrh	r2, [r7, #18]
 8014742:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014746:	7f9b      	ldrb	r3, [r3, #30]
 8014748:	f043 0301 	orr.w	r3, r3, #1
 801474c:	b2da      	uxtb	r2, r3
 801474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014750:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	2b01      	cmp	r3, #1
 8014756:	d171      	bne.n	801483c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801475a:	8b9b      	ldrh	r3, [r3, #28]
 801475c:	3314      	adds	r3, #20
 801475e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014774:	3308      	adds	r3, #8
 8014776:	2214      	movs	r2, #20
 8014778:	4619      	mov	r1, r3
 801477a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801477c:	f001 f861 	bl	8015842 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014780:	8a3b      	ldrh	r3, [r7, #16]
 8014782:	4618      	mov	r0, r3
 8014784:	f7f5 fdc0 	bl	800a308 <lwip_htons>
 8014788:	4603      	mov	r3, r0
 801478a:	461a      	mov	r2, r3
 801478c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801478e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014792:	2200      	movs	r2, #0
 8014794:	719a      	strb	r2, [r3, #6]
 8014796:	2200      	movs	r2, #0
 8014798:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801479c:	2200      	movs	r2, #0
 801479e:	729a      	strb	r2, [r3, #10]
 80147a0:	2200      	movs	r2, #0
 80147a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80147a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147a6:	685b      	ldr	r3, [r3, #4]
 80147a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80147aa:	e00d      	b.n	80147c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80147ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80147b2:	2114      	movs	r1, #20
 80147b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80147b6:	f7f7 f98d 	bl	800bad4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80147ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f7f7 fadd 	bl	800bd7c <pbuf_cat>
      r = iprh->next_pbuf;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80147c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d1ee      	bne.n	80147ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80147ce:	4b1e      	ldr	r3, [pc, #120]	@ (8014848 <ip4_reass+0x2b4>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d102      	bne.n	80147de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80147d8:	2300      	movs	r3, #0
 80147da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147dc:	e010      	b.n	8014800 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80147de:	4b1a      	ldr	r3, [pc, #104]	@ (8014848 <ip4_reass+0x2b4>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147e4:	e007      	b.n	80147f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80147e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d006      	beq.n	80147fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80147f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d1f4      	bne.n	80147e6 <ip4_reass+0x252>
 80147fc:	e000      	b.n	8014800 <ip4_reass+0x26c>
          break;
 80147fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014802:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014804:	f7ff fd2e 	bl	8014264 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f7f7 fa77 	bl	800bcfc <pbuf_clen>
 801480e:	4603      	mov	r3, r0
 8014810:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014812:	4b0c      	ldr	r3, [pc, #48]	@ (8014844 <ip4_reass+0x2b0>)
 8014814:	881b      	ldrh	r3, [r3, #0]
 8014816:	8c3a      	ldrh	r2, [r7, #32]
 8014818:	429a      	cmp	r2, r3
 801481a:	d906      	bls.n	801482a <ip4_reass+0x296>
 801481c:	4b0b      	ldr	r3, [pc, #44]	@ (801484c <ip4_reass+0x2b8>)
 801481e:	f240 229b 	movw	r2, #667	@ 0x29b
 8014822:	490b      	ldr	r1, [pc, #44]	@ (8014850 <ip4_reass+0x2bc>)
 8014824:	480b      	ldr	r0, [pc, #44]	@ (8014854 <ip4_reass+0x2c0>)
 8014826:	f000 fd63 	bl	80152f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801482a:	4b06      	ldr	r3, [pc, #24]	@ (8014844 <ip4_reass+0x2b0>)
 801482c:	881a      	ldrh	r2, [r3, #0]
 801482e:	8c3b      	ldrh	r3, [r7, #32]
 8014830:	1ad3      	subs	r3, r2, r3
 8014832:	b29a      	uxth	r2, r3
 8014834:	4b03      	ldr	r3, [pc, #12]	@ (8014844 <ip4_reass+0x2b0>)
 8014836:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	e038      	b.n	80148ae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801483c:	2300      	movs	r3, #0
 801483e:	e036      	b.n	80148ae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014840:	bf00      	nop
 8014842:	e00a      	b.n	801485a <ip4_reass+0x2c6>
 8014844:	2001730c 	.word	0x2001730c
 8014848:	20017308 	.word	0x20017308
 801484c:	0801984c 	.word	0x0801984c
 8014850:	080199bc 	.word	0x080199bc
 8014854:	08019894 	.word	0x08019894
    goto nullreturn_ipr;
 8014858:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801485a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801485c:	2b00      	cmp	r3, #0
 801485e:	d106      	bne.n	801486e <ip4_reass+0x2da>
 8014860:	4b15      	ldr	r3, [pc, #84]	@ (80148b8 <ip4_reass+0x324>)
 8014862:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8014866:	4915      	ldr	r1, [pc, #84]	@ (80148bc <ip4_reass+0x328>)
 8014868:	4815      	ldr	r0, [pc, #84]	@ (80148c0 <ip4_reass+0x32c>)
 801486a:	f000 fd41 	bl	80152f0 <iprintf>
  if (ipr->p == NULL) {
 801486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014870:	685b      	ldr	r3, [r3, #4]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d116      	bne.n	80148a4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014876:	4b13      	ldr	r3, [pc, #76]	@ (80148c4 <ip4_reass+0x330>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801487c:	429a      	cmp	r2, r3
 801487e:	d006      	beq.n	801488e <ip4_reass+0x2fa>
 8014880:	4b0d      	ldr	r3, [pc, #52]	@ (80148b8 <ip4_reass+0x324>)
 8014882:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014886:	4910      	ldr	r1, [pc, #64]	@ (80148c8 <ip4_reass+0x334>)
 8014888:	480d      	ldr	r0, [pc, #52]	@ (80148c0 <ip4_reass+0x32c>)
 801488a:	f000 fd31 	bl	80152f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801488e:	2100      	movs	r1, #0
 8014890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014892:	f7ff fce7 	bl	8014264 <ip_reass_dequeue_datagram>
 8014896:	e006      	b.n	80148a6 <ip4_reass+0x312>
    goto nullreturn;
 8014898:	bf00      	nop
 801489a:	e004      	b.n	80148a6 <ip4_reass+0x312>
    goto nullreturn;
 801489c:	bf00      	nop
 801489e:	e002      	b.n	80148a6 <ip4_reass+0x312>
      goto nullreturn;
 80148a0:	bf00      	nop
 80148a2:	e000      	b.n	80148a6 <ip4_reass+0x312>
  }

nullreturn:
 80148a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7f7 f99a 	bl	800bbe0 <pbuf_free>
  return NULL;
 80148ac:	2300      	movs	r3, #0
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3738      	adds	r7, #56	@ 0x38
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	0801984c 	.word	0x0801984c
 80148bc:	080199d8 	.word	0x080199d8
 80148c0:	08019894 	.word	0x08019894
 80148c4:	20017308 	.word	0x20017308
 80148c8:	080199e4 	.word	0x080199e4

080148cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80148d0:	2005      	movs	r0, #5
 80148d2:	f7f6 fa6b 	bl	800adac <memp_malloc>
 80148d6:	4603      	mov	r3, r0
}
 80148d8:	4618      	mov	r0, r3
 80148da:	bd80      	pop	{r7, pc}

080148dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d106      	bne.n	80148f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80148ea:	4b07      	ldr	r3, [pc, #28]	@ (8014908 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80148ec:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80148f0:	4906      	ldr	r1, [pc, #24]	@ (801490c <ip_frag_free_pbuf_custom_ref+0x30>)
 80148f2:	4807      	ldr	r0, [pc, #28]	@ (8014910 <ip_frag_free_pbuf_custom_ref+0x34>)
 80148f4:	f000 fcfc 	bl	80152f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80148f8:	6879      	ldr	r1, [r7, #4]
 80148fa:	2005      	movs	r0, #5
 80148fc:	f7f6 facc 	bl	800ae98 <memp_free>
}
 8014900:	bf00      	nop
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	0801984c 	.word	0x0801984c
 801490c:	08019a04 	.word	0x08019a04
 8014910:	08019894 	.word	0x08019894

08014914 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b084      	sub	sp, #16
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d106      	bne.n	8014934 <ipfrag_free_pbuf_custom+0x20>
 8014926:	4b11      	ldr	r3, [pc, #68]	@ (801496c <ipfrag_free_pbuf_custom+0x58>)
 8014928:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801492c:	4910      	ldr	r1, [pc, #64]	@ (8014970 <ipfrag_free_pbuf_custom+0x5c>)
 801492e:	4811      	ldr	r0, [pc, #68]	@ (8014974 <ipfrag_free_pbuf_custom+0x60>)
 8014930:	f000 fcde 	bl	80152f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014934:	68fa      	ldr	r2, [r7, #12]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	429a      	cmp	r2, r3
 801493a:	d006      	beq.n	801494a <ipfrag_free_pbuf_custom+0x36>
 801493c:	4b0b      	ldr	r3, [pc, #44]	@ (801496c <ipfrag_free_pbuf_custom+0x58>)
 801493e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014942:	490d      	ldr	r1, [pc, #52]	@ (8014978 <ipfrag_free_pbuf_custom+0x64>)
 8014944:	480b      	ldr	r0, [pc, #44]	@ (8014974 <ipfrag_free_pbuf_custom+0x60>)
 8014946:	f000 fcd3 	bl	80152f0 <iprintf>
  if (pcr->original != NULL) {
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	695b      	ldr	r3, [r3, #20]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d004      	beq.n	801495c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	695b      	ldr	r3, [r3, #20]
 8014956:	4618      	mov	r0, r3
 8014958:	f7f7 f942 	bl	800bbe0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801495c:	68f8      	ldr	r0, [r7, #12]
 801495e:	f7ff ffbd 	bl	80148dc <ip_frag_free_pbuf_custom_ref>
}
 8014962:	bf00      	nop
 8014964:	3710      	adds	r7, #16
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	0801984c 	.word	0x0801984c
 8014970:	08019a10 	.word	0x08019a10
 8014974:	08019894 	.word	0x08019894
 8014978:	08019a1c 	.word	0x08019a1c

0801497c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b094      	sub	sp, #80	@ 0x50
 8014980:	af02      	add	r7, sp, #8
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	60b9      	str	r1, [r7, #8]
 8014986:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014988:	2300      	movs	r3, #0
 801498a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014992:	3b14      	subs	r3, #20
 8014994:	2b00      	cmp	r3, #0
 8014996:	da00      	bge.n	801499a <ip4_frag+0x1e>
 8014998:	3307      	adds	r3, #7
 801499a:	10db      	asrs	r3, r3, #3
 801499c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801499e:	2314      	movs	r3, #20
 80149a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80149a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149aa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80149ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	f003 030f 	and.w	r3, r3, #15
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	b2db      	uxtb	r3, r3
 80149ba:	2b14      	cmp	r3, #20
 80149bc:	d002      	beq.n	80149c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80149be:	f06f 0305 	mvn.w	r3, #5
 80149c2:	e110      	b.n	8014be6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	895b      	ldrh	r3, [r3, #10]
 80149c8:	2b13      	cmp	r3, #19
 80149ca:	d809      	bhi.n	80149e0 <ip4_frag+0x64>
 80149cc:	4b88      	ldr	r3, [pc, #544]	@ (8014bf0 <ip4_frag+0x274>)
 80149ce:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80149d2:	4988      	ldr	r1, [pc, #544]	@ (8014bf4 <ip4_frag+0x278>)
 80149d4:	4888      	ldr	r0, [pc, #544]	@ (8014bf8 <ip4_frag+0x27c>)
 80149d6:	f000 fc8b 	bl	80152f0 <iprintf>
 80149da:	f06f 0305 	mvn.w	r3, #5
 80149de:	e102      	b.n	8014be6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80149e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149e2:	88db      	ldrh	r3, [r3, #6]
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7f5 fc8e 	bl	800a308 <lwip_htons>
 80149ec:	4603      	mov	r3, r0
 80149ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80149f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80149f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80149f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80149fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80149fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014a00:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	891b      	ldrh	r3, [r3, #8]
 8014a06:	3b14      	subs	r3, #20
 8014a08:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014a0c:	e0e1      	b.n	8014bd2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014a0e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014a10:	00db      	lsls	r3, r3, #3
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014a18:	4293      	cmp	r3, r2
 8014a1a:	bf28      	it	cs
 8014a1c:	4613      	movcs	r3, r2
 8014a1e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014a20:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014a24:	2114      	movs	r1, #20
 8014a26:	200e      	movs	r0, #14
 8014a28:	f7f6 fdf6 	bl	800b618 <pbuf_alloc>
 8014a2c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	f000 80d5 	beq.w	8014be0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a38:	895b      	ldrh	r3, [r3, #10]
 8014a3a:	2b13      	cmp	r3, #19
 8014a3c:	d806      	bhi.n	8014a4c <ip4_frag+0xd0>
 8014a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8014bf0 <ip4_frag+0x274>)
 8014a40:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014a44:	496d      	ldr	r1, [pc, #436]	@ (8014bfc <ip4_frag+0x280>)
 8014a46:	486c      	ldr	r0, [pc, #432]	@ (8014bf8 <ip4_frag+0x27c>)
 8014a48:	f000 fc52 	bl	80152f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a4e:	685b      	ldr	r3, [r3, #4]
 8014a50:	2214      	movs	r2, #20
 8014a52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014a54:	4618      	mov	r0, r3
 8014a56:	f000 fef4 	bl	8015842 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8014a60:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014a62:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014a66:	e064      	b.n	8014b32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	895a      	ldrh	r2, [r3, #10]
 8014a6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014a6e:	1ad3      	subs	r3, r2, r3
 8014a70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	895b      	ldrh	r3, [r3, #10]
 8014a76:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d906      	bls.n	8014a8a <ip4_frag+0x10e>
 8014a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8014bf0 <ip4_frag+0x274>)
 8014a7e:	f240 322d 	movw	r2, #813	@ 0x32d
 8014a82:	495f      	ldr	r1, [pc, #380]	@ (8014c00 <ip4_frag+0x284>)
 8014a84:	485c      	ldr	r0, [pc, #368]	@ (8014bf8 <ip4_frag+0x27c>)
 8014a86:	f000 fc33 	bl	80152f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014a8a:	8bfa      	ldrh	r2, [r7, #30]
 8014a8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014a90:	4293      	cmp	r3, r2
 8014a92:	bf28      	it	cs
 8014a94:	4613      	movcs	r3, r2
 8014a96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014a9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d105      	bne.n	8014aae <ip4_frag+0x132>
        poff = 0;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	60fb      	str	r3, [r7, #12]
        continue;
 8014aac:	e041      	b.n	8014b32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014aae:	f7ff ff0d 	bl	80148cc <ip_frag_alloc_pbuf_custom_ref>
 8014ab2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014ab4:	69bb      	ldr	r3, [r7, #24]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d103      	bne.n	8014ac2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014aba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014abc:	f7f7 f890 	bl	800bbe0 <pbuf_free>
        goto memerr;
 8014ac0:	e08f      	b.n	8014be2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014ac2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014ac8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014aca:	4413      	add	r3, r2
 8014acc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014ad0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014ad4:	9201      	str	r2, [sp, #4]
 8014ad6:	9300      	str	r3, [sp, #0]
 8014ad8:	4603      	mov	r3, r0
 8014ada:	2241      	movs	r2, #65	@ 0x41
 8014adc:	2000      	movs	r0, #0
 8014ade:	f7f6 fec5 	bl	800b86c <pbuf_alloced_custom>
 8014ae2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d106      	bne.n	8014af8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014aea:	69b8      	ldr	r0, [r7, #24]
 8014aec:	f7ff fef6 	bl	80148dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014af0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014af2:	f7f7 f875 	bl	800bbe0 <pbuf_free>
        goto memerr;
 8014af6:	e074      	b.n	8014be2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014af8:	68f8      	ldr	r0, [r7, #12]
 8014afa:	f7f7 f917 	bl	800bd2c <pbuf_ref>
      pcr->original = p;
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	68fa      	ldr	r2, [r7, #12]
 8014b02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014b04:	69bb      	ldr	r3, [r7, #24]
 8014b06:	4a3f      	ldr	r2, [pc, #252]	@ (8014c04 <ip4_frag+0x288>)
 8014b08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014b0a:	6979      	ldr	r1, [r7, #20]
 8014b0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b0e:	f7f7 f935 	bl	800bd7c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014b12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014b16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014b1a:	1ad3      	subs	r3, r2, r3
 8014b1c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014b20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d004      	beq.n	8014b32 <ip4_frag+0x1b6>
        poff = 0;
 8014b28:	2300      	movs	r3, #0
 8014b2a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014b32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d196      	bne.n	8014a68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014b3a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014b3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014b40:	4413      	add	r3, r2
 8014b42:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014b48:	f1a3 0213 	sub.w	r2, r3, #19
 8014b4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014b50:	429a      	cmp	r2, r3
 8014b52:	bfcc      	ite	gt
 8014b54:	2301      	movgt	r3, #1
 8014b56:	2300      	movle	r3, #0
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014b64:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014b66:	6a3b      	ldr	r3, [r7, #32]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d002      	beq.n	8014b72 <ip4_frag+0x1f6>
 8014b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d003      	beq.n	8014b7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014b72:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014b74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014b78:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014b7a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7f5 fbc3 	bl	800a308 <lwip_htons>
 8014b82:	4603      	mov	r3, r0
 8014b84:	461a      	mov	r2, r3
 8014b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014b8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014b8c:	3314      	adds	r3, #20
 8014b8e:	b29b      	uxth	r3, r3
 8014b90:	4618      	mov	r0, r3
 8014b92:	f7f5 fbb9 	bl	800a308 <lwip_htons>
 8014b96:	4603      	mov	r3, r0
 8014b98:	461a      	mov	r2, r3
 8014b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	729a      	strb	r2, [r3, #10]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	695b      	ldr	r3, [r3, #20]
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014bb0:	68b8      	ldr	r0, [r7, #8]
 8014bb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014bb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014bb6:	f7f7 f813 	bl	800bbe0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014bba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014bbe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014bc0:	1ad3      	subs	r3, r2, r3
 8014bc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014bc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014bca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014bcc:	4413      	add	r3, r2
 8014bce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014bd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f47f af19 	bne.w	8014a0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	e002      	b.n	8014be6 <ip4_frag+0x26a>
      goto memerr;
 8014be0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3748      	adds	r7, #72	@ 0x48
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	0801984c 	.word	0x0801984c
 8014bf4:	08019a28 	.word	0x08019a28
 8014bf8:	08019894 	.word	0x08019894
 8014bfc:	08019a44 	.word	0x08019a44
 8014c00:	08019a64 	.word	0x08019a64
 8014c04:	08014915 	.word	0x08014915

08014c08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b086      	sub	sp, #24
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014c12:	230e      	movs	r3, #14
 8014c14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	895b      	ldrh	r3, [r3, #10]
 8014c1a:	2b0e      	cmp	r3, #14
 8014c1c:	d96e      	bls.n	8014cfc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	7bdb      	ldrb	r3, [r3, #15]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d106      	bne.n	8014c34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	b2da      	uxtb	r2, r3
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	685b      	ldr	r3, [r3, #4]
 8014c38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014c3a:	693b      	ldr	r3, [r7, #16]
 8014c3c:	7b1a      	ldrb	r2, [r3, #12]
 8014c3e:	7b5b      	ldrb	r3, [r3, #13]
 8014c40:	021b      	lsls	r3, r3, #8
 8014c42:	4313      	orrs	r3, r2
 8014c44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	f003 0301 	and.w	r3, r3, #1
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d023      	beq.n	8014c9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	d10f      	bne.n	8014c7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	785b      	ldrb	r3, [r3, #1]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d11b      	bne.n	8014c9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c66:	2b5e      	cmp	r3, #94	@ 0x5e
 8014c68:	d117      	bne.n	8014c9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	7b5b      	ldrb	r3, [r3, #13]
 8014c6e:	f043 0310 	orr.w	r3, r3, #16
 8014c72:	b2da      	uxtb	r2, r3
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	735a      	strb	r2, [r3, #13]
 8014c78:	e00f      	b.n	8014c9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	2206      	movs	r2, #6
 8014c7e:	4928      	ldr	r1, [pc, #160]	@ (8014d20 <ethernet_input+0x118>)
 8014c80:	4618      	mov	r0, r3
 8014c82:	f000 fcb3 	bl	80155ec <memcmp>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d106      	bne.n	8014c9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	7b5b      	ldrb	r3, [r3, #13]
 8014c90:	f043 0308 	orr.w	r3, r3, #8
 8014c94:	b2da      	uxtb	r2, r3
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014c9a:	89fb      	ldrh	r3, [r7, #14]
 8014c9c:	2b08      	cmp	r3, #8
 8014c9e:	d003      	beq.n	8014ca8 <ethernet_input+0xa0>
 8014ca0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014ca4:	d014      	beq.n	8014cd0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014ca6:	e032      	b.n	8014d0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cae:	f003 0308 	and.w	r3, r3, #8
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d024      	beq.n	8014d00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014cb6:	8afb      	ldrh	r3, [r7, #22]
 8014cb8:	4619      	mov	r1, r3
 8014cba:	6878      	ldr	r0, [r7, #4]
 8014cbc:	f7f6 ff0a 	bl	800bad4 <pbuf_remove_header>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d11e      	bne.n	8014d04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014cc6:	6839      	ldr	r1, [r7, #0]
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f7fe ff21 	bl	8013b10 <ip4_input>
      break;
 8014cce:	e013      	b.n	8014cf8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cd6:	f003 0308 	and.w	r3, r3, #8
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d014      	beq.n	8014d08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014cde:	8afb      	ldrh	r3, [r7, #22]
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f7f6 fef6 	bl	800bad4 <pbuf_remove_header>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d10e      	bne.n	8014d0c <ethernet_input+0x104>
        etharp_input(p, netif);
 8014cee:	6839      	ldr	r1, [r7, #0]
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f7fe f8c1 	bl	8012e78 <etharp_input>
      break;
 8014cf6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	e00c      	b.n	8014d16 <ethernet_input+0x10e>
    goto free_and_return;
 8014cfc:	bf00      	nop
 8014cfe:	e006      	b.n	8014d0e <ethernet_input+0x106>
        goto free_and_return;
 8014d00:	bf00      	nop
 8014d02:	e004      	b.n	8014d0e <ethernet_input+0x106>
        goto free_and_return;
 8014d04:	bf00      	nop
 8014d06:	e002      	b.n	8014d0e <ethernet_input+0x106>
        goto free_and_return;
 8014d08:	bf00      	nop
 8014d0a:	e000      	b.n	8014d0e <ethernet_input+0x106>
        goto free_and_return;
 8014d0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f7f6 ff66 	bl	800bbe0 <pbuf_free>
  return ERR_OK;
 8014d14:	2300      	movs	r3, #0
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3718      	adds	r7, #24
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	0801a3ac 	.word	0x0801a3ac

08014d24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	60b9      	str	r1, [r7, #8]
 8014d2e:	607a      	str	r2, [r7, #4]
 8014d30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014d32:	8c3b      	ldrh	r3, [r7, #32]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7f5 fae7 	bl	800a308 <lwip_htons>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014d3e:	210e      	movs	r1, #14
 8014d40:	68b8      	ldr	r0, [r7, #8]
 8014d42:	f7f6 feb7 	bl	800bab4 <pbuf_add_header>
 8014d46:	4603      	mov	r3, r0
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d125      	bne.n	8014d98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	8afa      	ldrh	r2, [r7, #22]
 8014d56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	2206      	movs	r2, #6
 8014d5c:	6839      	ldr	r1, [r7, #0]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f000 fd6f 	bl	8015842 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014d64:	693b      	ldr	r3, [r7, #16]
 8014d66:	3306      	adds	r3, #6
 8014d68:	2206      	movs	r2, #6
 8014d6a:	6879      	ldr	r1, [r7, #4]
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f000 fd68 	bl	8015842 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014d78:	2b06      	cmp	r3, #6
 8014d7a:	d006      	beq.n	8014d8a <ethernet_output+0x66>
 8014d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8014da8 <ethernet_output+0x84>)
 8014d7e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014d82:	490a      	ldr	r1, [pc, #40]	@ (8014dac <ethernet_output+0x88>)
 8014d84:	480a      	ldr	r0, [pc, #40]	@ (8014db0 <ethernet_output+0x8c>)
 8014d86:	f000 fab3 	bl	80152f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	699b      	ldr	r3, [r3, #24]
 8014d8e:	68b9      	ldr	r1, [r7, #8]
 8014d90:	68f8      	ldr	r0, [r7, #12]
 8014d92:	4798      	blx	r3
 8014d94:	4603      	mov	r3, r0
 8014d96:	e002      	b.n	8014d9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014d98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014d9a:	f06f 0301 	mvn.w	r3, #1
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3718      	adds	r7, #24
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}
 8014da6:	bf00      	nop
 8014da8:	08019a74 	.word	0x08019a74
 8014dac:	08019aac 	.word	0x08019aac
 8014db0:	08019ae0 	.word	0x08019ae0

08014db4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b086      	sub	sp, #24
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
 8014dbc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	60bb      	str	r3, [r7, #8]
 8014dc2:	2304      	movs	r3, #4
 8014dc4:	60fb      	str	r3, [r7, #12]
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	613b      	str	r3, [r7, #16]
 8014dca:	2300      	movs	r3, #0
 8014dcc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014dce:	f107 0308 	add.w	r3, r7, #8
 8014dd2:	2100      	movs	r1, #0
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f7f0 ffe5 	bl	8005da4 <osMessageCreate>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d102      	bne.n	8014dee <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014de8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dec:	e000      	b.n	8014df0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014dee:	2300      	movs	r3, #0
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3718      	adds	r7, #24
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}

08014df8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b084      	sub	sp, #16
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	6839      	ldr	r1, [r7, #0]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7f0 fff2 	bl	8005df4 <osMessagePut>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d102      	bne.n	8014e1c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014e16:	2300      	movs	r3, #0
 8014e18:	73fb      	strb	r3, [r7, #15]
 8014e1a:	e001      	b.n	8014e20 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014e1c:	23ff      	movs	r3, #255	@ 0xff
 8014e1e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e24:	4618      	mov	r0, r3
 8014e26:	3710      	adds	r7, #16
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b08c      	sub	sp, #48	@ 0x30
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	61f8      	str	r0, [r7, #28]
 8014e34:	61b9      	str	r1, [r7, #24]
 8014e36:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014e38:	f7f0 fdf2 	bl	8005a20 <osKernelSysTick>
 8014e3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d017      	beq.n	8014e74 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014e44:	69fb      	ldr	r3, [r7, #28]
 8014e46:	6819      	ldr	r1, [r3, #0]
 8014e48:	f107 0320 	add.w	r3, r7, #32
 8014e4c:	697a      	ldr	r2, [r7, #20]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7f1 f810 	bl	8005e74 <osMessageGet>

    if(event.status == osEventMessage)
 8014e54:	6a3b      	ldr	r3, [r7, #32]
 8014e56:	2b10      	cmp	r3, #16
 8014e58:	d109      	bne.n	8014e6e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	69bb      	ldr	r3, [r7, #24]
 8014e60:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014e62:	f7f0 fddd 	bl	8005a20 <osKernelSysTick>
 8014e66:	4602      	mov	r2, r0
 8014e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e6a:	1ad3      	subs	r3, r2, r3
 8014e6c:	e019      	b.n	8014ea2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e72:	e016      	b.n	8014ea2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014e74:	69fb      	ldr	r3, [r7, #28]
 8014e76:	6819      	ldr	r1, [r3, #0]
 8014e78:	463b      	mov	r3, r7
 8014e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7f0 fff8 	bl	8005e74 <osMessageGet>
 8014e84:	f107 0320 	add.w	r3, r7, #32
 8014e88:	463a      	mov	r2, r7
 8014e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e92:	461a      	mov	r2, r3
 8014e94:	69bb      	ldr	r3, [r7, #24]
 8014e96:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014e98:	f7f0 fdc2 	bl	8005a20 <osKernelSysTick>
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ea0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3730      	adds	r7, #48	@ 0x30
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}

08014eaa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014eaa:	b480      	push	{r7}
 8014eac:	b083      	sub	sp, #12
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d101      	bne.n	8014ebe <sys_mbox_valid+0x14>
    return 0;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	e000      	b.n	8014ec0 <sys_mbox_valid+0x16>
  else
    return 1;
 8014ebe:	2301      	movs	r3, #1
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr

08014ecc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014ed0:	4803      	ldr	r0, [pc, #12]	@ (8014ee0 <sys_init+0x14>)
 8014ed2:	f7f0 fe15 	bl	8005b00 <osMutexCreate>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	4a02      	ldr	r2, [pc, #8]	@ (8014ee4 <sys_init+0x18>)
 8014eda:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014edc:	bf00      	nop
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	0801a3bc 	.word	0x0801a3bc
 8014ee4:	20017310 	.word	0x20017310

08014ee8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b084      	sub	sp, #16
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	60bb      	str	r3, [r7, #8]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014ef8:	f107 0308 	add.w	r3, r7, #8
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7f0 fdff 	bl	8005b00 <osMutexCreate>
 8014f02:	4602      	mov	r2, r0
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d102      	bne.n	8014f16 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014f10:	f04f 33ff 	mov.w	r3, #4294967295
 8014f14:	e000      	b.n	8014f18 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014f16:	2300      	movs	r3, #0
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3710      	adds	r7, #16
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7f0 fdfd 	bl	8005b30 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014f36:	bf00      	nop
 8014f38:	3708      	adds	r7, #8
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}

08014f3e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014f3e:	b580      	push	{r7, lr}
 8014f40:	b082      	sub	sp, #8
 8014f42:	af00      	add	r7, sp, #0
 8014f44:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7f0 fe3e 	bl	8005bcc <osMutexRelease>
}
 8014f50:	bf00      	nop
 8014f52:	3708      	adds	r7, #8
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b08c      	sub	sp, #48	@ 0x30
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	60f8      	str	r0, [r7, #12]
 8014f60:	60b9      	str	r1, [r7, #8]
 8014f62:	607a      	str	r2, [r7, #4]
 8014f64:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014f66:	f107 0314 	add.w	r3, r7, #20
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	601a      	str	r2, [r3, #0]
 8014f6e:	605a      	str	r2, [r3, #4]
 8014f70:	609a      	str	r2, [r3, #8]
 8014f72:	60da      	str	r2, [r3, #12]
 8014f74:	611a      	str	r2, [r3, #16]
 8014f76:	615a      	str	r2, [r3, #20]
 8014f78:	619a      	str	r2, [r3, #24]
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	617b      	str	r3, [r7, #20]
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	61bb      	str	r3, [r7, #24]
 8014f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f84:	b21b      	sxth	r3, r3
 8014f86:	83bb      	strh	r3, [r7, #28]
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014f8c:	f107 0314 	add.w	r3, r7, #20
 8014f90:	6879      	ldr	r1, [r7, #4]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7f0 fd54 	bl	8005a40 <osThreadCreate>
 8014f98:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3730      	adds	r7, #48	@ 0x30
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
	...

08014fa4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014fa8:	4b04      	ldr	r3, [pc, #16]	@ (8014fbc <sys_arch_protect+0x18>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	f04f 31ff 	mov.w	r1, #4294967295
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7f0 fdbd 	bl	8005b30 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014fb6:	2301      	movs	r3, #1
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	20017310 	.word	0x20017310

08014fc0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014fc8:	4b04      	ldr	r3, [pc, #16]	@ (8014fdc <sys_arch_unprotect+0x1c>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7f0 fdfd 	bl	8005bcc <osMutexRelease>
}
 8014fd2:	bf00      	nop
 8014fd4:	3708      	adds	r7, #8
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	20017310 	.word	0x20017310

08014fe0 <atoi>:
 8014fe0:	220a      	movs	r2, #10
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	f000 b8b8 	b.w	8015158 <strtol>

08014fe8 <rand>:
 8014fe8:	4b16      	ldr	r3, [pc, #88]	@ (8015044 <rand+0x5c>)
 8014fea:	b510      	push	{r4, lr}
 8014fec:	681c      	ldr	r4, [r3, #0]
 8014fee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ff0:	b9b3      	cbnz	r3, 8015020 <rand+0x38>
 8014ff2:	2018      	movs	r0, #24
 8014ff4:	f000 fc9c 	bl	8015930 <malloc>
 8014ff8:	4602      	mov	r2, r0
 8014ffa:	6320      	str	r0, [r4, #48]	@ 0x30
 8014ffc:	b920      	cbnz	r0, 8015008 <rand+0x20>
 8014ffe:	4b12      	ldr	r3, [pc, #72]	@ (8015048 <rand+0x60>)
 8015000:	4812      	ldr	r0, [pc, #72]	@ (801504c <rand+0x64>)
 8015002:	2152      	movs	r1, #82	@ 0x52
 8015004:	f000 fc2c 	bl	8015860 <__assert_func>
 8015008:	4911      	ldr	r1, [pc, #68]	@ (8015050 <rand+0x68>)
 801500a:	4b12      	ldr	r3, [pc, #72]	@ (8015054 <rand+0x6c>)
 801500c:	e9c0 1300 	strd	r1, r3, [r0]
 8015010:	4b11      	ldr	r3, [pc, #68]	@ (8015058 <rand+0x70>)
 8015012:	6083      	str	r3, [r0, #8]
 8015014:	230b      	movs	r3, #11
 8015016:	8183      	strh	r3, [r0, #12]
 8015018:	2100      	movs	r1, #0
 801501a:	2001      	movs	r0, #1
 801501c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015020:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015022:	480e      	ldr	r0, [pc, #56]	@ (801505c <rand+0x74>)
 8015024:	690b      	ldr	r3, [r1, #16]
 8015026:	694c      	ldr	r4, [r1, #20]
 8015028:	4a0d      	ldr	r2, [pc, #52]	@ (8015060 <rand+0x78>)
 801502a:	4358      	muls	r0, r3
 801502c:	fb02 0004 	mla	r0, r2, r4, r0
 8015030:	fba3 3202 	umull	r3, r2, r3, r2
 8015034:	3301      	adds	r3, #1
 8015036:	eb40 0002 	adc.w	r0, r0, r2
 801503a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801503e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015042:	bd10      	pop	{r4, pc}
 8015044:	20000064 	.word	0x20000064
 8015048:	0801a3c4 	.word	0x0801a3c4
 801504c:	0801a3db 	.word	0x0801a3db
 8015050:	abcd330e 	.word	0xabcd330e
 8015054:	e66d1234 	.word	0xe66d1234
 8015058:	0005deec 	.word	0x0005deec
 801505c:	5851f42d 	.word	0x5851f42d
 8015060:	4c957f2d 	.word	0x4c957f2d

08015064 <_strtol_l.isra.0>:
 8015064:	2b24      	cmp	r3, #36	@ 0x24
 8015066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801506a:	4686      	mov	lr, r0
 801506c:	4690      	mov	r8, r2
 801506e:	d801      	bhi.n	8015074 <_strtol_l.isra.0+0x10>
 8015070:	2b01      	cmp	r3, #1
 8015072:	d106      	bne.n	8015082 <_strtol_l.isra.0+0x1e>
 8015074:	f000 fbb0 	bl	80157d8 <__errno>
 8015078:	2316      	movs	r3, #22
 801507a:	6003      	str	r3, [r0, #0]
 801507c:	2000      	movs	r0, #0
 801507e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015082:	4834      	ldr	r0, [pc, #208]	@ (8015154 <_strtol_l.isra.0+0xf0>)
 8015084:	460d      	mov	r5, r1
 8015086:	462a      	mov	r2, r5
 8015088:	f815 4b01 	ldrb.w	r4, [r5], #1
 801508c:	5d06      	ldrb	r6, [r0, r4]
 801508e:	f016 0608 	ands.w	r6, r6, #8
 8015092:	d1f8      	bne.n	8015086 <_strtol_l.isra.0+0x22>
 8015094:	2c2d      	cmp	r4, #45	@ 0x2d
 8015096:	d110      	bne.n	80150ba <_strtol_l.isra.0+0x56>
 8015098:	782c      	ldrb	r4, [r5, #0]
 801509a:	2601      	movs	r6, #1
 801509c:	1c95      	adds	r5, r2, #2
 801509e:	f033 0210 	bics.w	r2, r3, #16
 80150a2:	d115      	bne.n	80150d0 <_strtol_l.isra.0+0x6c>
 80150a4:	2c30      	cmp	r4, #48	@ 0x30
 80150a6:	d10d      	bne.n	80150c4 <_strtol_l.isra.0+0x60>
 80150a8:	782a      	ldrb	r2, [r5, #0]
 80150aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80150ae:	2a58      	cmp	r2, #88	@ 0x58
 80150b0:	d108      	bne.n	80150c4 <_strtol_l.isra.0+0x60>
 80150b2:	786c      	ldrb	r4, [r5, #1]
 80150b4:	3502      	adds	r5, #2
 80150b6:	2310      	movs	r3, #16
 80150b8:	e00a      	b.n	80150d0 <_strtol_l.isra.0+0x6c>
 80150ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80150bc:	bf04      	itt	eq
 80150be:	782c      	ldrbeq	r4, [r5, #0]
 80150c0:	1c95      	addeq	r5, r2, #2
 80150c2:	e7ec      	b.n	801509e <_strtol_l.isra.0+0x3a>
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1f6      	bne.n	80150b6 <_strtol_l.isra.0+0x52>
 80150c8:	2c30      	cmp	r4, #48	@ 0x30
 80150ca:	bf14      	ite	ne
 80150cc:	230a      	movne	r3, #10
 80150ce:	2308      	moveq	r3, #8
 80150d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80150d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80150d8:	2200      	movs	r2, #0
 80150da:	fbbc f9f3 	udiv	r9, ip, r3
 80150de:	4610      	mov	r0, r2
 80150e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80150e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80150e8:	2f09      	cmp	r7, #9
 80150ea:	d80f      	bhi.n	801510c <_strtol_l.isra.0+0xa8>
 80150ec:	463c      	mov	r4, r7
 80150ee:	42a3      	cmp	r3, r4
 80150f0:	dd1b      	ble.n	801512a <_strtol_l.isra.0+0xc6>
 80150f2:	1c57      	adds	r7, r2, #1
 80150f4:	d007      	beq.n	8015106 <_strtol_l.isra.0+0xa2>
 80150f6:	4581      	cmp	r9, r0
 80150f8:	d314      	bcc.n	8015124 <_strtol_l.isra.0+0xc0>
 80150fa:	d101      	bne.n	8015100 <_strtol_l.isra.0+0x9c>
 80150fc:	45a2      	cmp	sl, r4
 80150fe:	db11      	blt.n	8015124 <_strtol_l.isra.0+0xc0>
 8015100:	fb00 4003 	mla	r0, r0, r3, r4
 8015104:	2201      	movs	r2, #1
 8015106:	f815 4b01 	ldrb.w	r4, [r5], #1
 801510a:	e7eb      	b.n	80150e4 <_strtol_l.isra.0+0x80>
 801510c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015110:	2f19      	cmp	r7, #25
 8015112:	d801      	bhi.n	8015118 <_strtol_l.isra.0+0xb4>
 8015114:	3c37      	subs	r4, #55	@ 0x37
 8015116:	e7ea      	b.n	80150ee <_strtol_l.isra.0+0x8a>
 8015118:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801511c:	2f19      	cmp	r7, #25
 801511e:	d804      	bhi.n	801512a <_strtol_l.isra.0+0xc6>
 8015120:	3c57      	subs	r4, #87	@ 0x57
 8015122:	e7e4      	b.n	80150ee <_strtol_l.isra.0+0x8a>
 8015124:	f04f 32ff 	mov.w	r2, #4294967295
 8015128:	e7ed      	b.n	8015106 <_strtol_l.isra.0+0xa2>
 801512a:	1c53      	adds	r3, r2, #1
 801512c:	d108      	bne.n	8015140 <_strtol_l.isra.0+0xdc>
 801512e:	2322      	movs	r3, #34	@ 0x22
 8015130:	f8ce 3000 	str.w	r3, [lr]
 8015134:	4660      	mov	r0, ip
 8015136:	f1b8 0f00 	cmp.w	r8, #0
 801513a:	d0a0      	beq.n	801507e <_strtol_l.isra.0+0x1a>
 801513c:	1e69      	subs	r1, r5, #1
 801513e:	e006      	b.n	801514e <_strtol_l.isra.0+0xea>
 8015140:	b106      	cbz	r6, 8015144 <_strtol_l.isra.0+0xe0>
 8015142:	4240      	negs	r0, r0
 8015144:	f1b8 0f00 	cmp.w	r8, #0
 8015148:	d099      	beq.n	801507e <_strtol_l.isra.0+0x1a>
 801514a:	2a00      	cmp	r2, #0
 801514c:	d1f6      	bne.n	801513c <_strtol_l.isra.0+0xd8>
 801514e:	f8c8 1000 	str.w	r1, [r8]
 8015152:	e794      	b.n	801507e <_strtol_l.isra.0+0x1a>
 8015154:	0801a4a3 	.word	0x0801a4a3

08015158 <strtol>:
 8015158:	4613      	mov	r3, r2
 801515a:	460a      	mov	r2, r1
 801515c:	4601      	mov	r1, r0
 801515e:	4802      	ldr	r0, [pc, #8]	@ (8015168 <strtol+0x10>)
 8015160:	6800      	ldr	r0, [r0, #0]
 8015162:	f7ff bf7f 	b.w	8015064 <_strtol_l.isra.0>
 8015166:	bf00      	nop
 8015168:	20000064 	.word	0x20000064

0801516c <std>:
 801516c:	2300      	movs	r3, #0
 801516e:	b510      	push	{r4, lr}
 8015170:	4604      	mov	r4, r0
 8015172:	e9c0 3300 	strd	r3, r3, [r0]
 8015176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801517a:	6083      	str	r3, [r0, #8]
 801517c:	8181      	strh	r1, [r0, #12]
 801517e:	6643      	str	r3, [r0, #100]	@ 0x64
 8015180:	81c2      	strh	r2, [r0, #14]
 8015182:	6183      	str	r3, [r0, #24]
 8015184:	4619      	mov	r1, r3
 8015186:	2208      	movs	r2, #8
 8015188:	305c      	adds	r0, #92	@ 0x5c
 801518a:	f000 fa59 	bl	8015640 <memset>
 801518e:	4b0d      	ldr	r3, [pc, #52]	@ (80151c4 <std+0x58>)
 8015190:	6263      	str	r3, [r4, #36]	@ 0x24
 8015192:	4b0d      	ldr	r3, [pc, #52]	@ (80151c8 <std+0x5c>)
 8015194:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015196:	4b0d      	ldr	r3, [pc, #52]	@ (80151cc <std+0x60>)
 8015198:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801519a:	4b0d      	ldr	r3, [pc, #52]	@ (80151d0 <std+0x64>)
 801519c:	6323      	str	r3, [r4, #48]	@ 0x30
 801519e:	4b0d      	ldr	r3, [pc, #52]	@ (80151d4 <std+0x68>)
 80151a0:	6224      	str	r4, [r4, #32]
 80151a2:	429c      	cmp	r4, r3
 80151a4:	d006      	beq.n	80151b4 <std+0x48>
 80151a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80151aa:	4294      	cmp	r4, r2
 80151ac:	d002      	beq.n	80151b4 <std+0x48>
 80151ae:	33d0      	adds	r3, #208	@ 0xd0
 80151b0:	429c      	cmp	r4, r3
 80151b2:	d105      	bne.n	80151c0 <std+0x54>
 80151b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80151b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151bc:	f000 bb36 	b.w	801582c <__retarget_lock_init_recursive>
 80151c0:	bd10      	pop	{r4, pc}
 80151c2:	bf00      	nop
 80151c4:	0801543d 	.word	0x0801543d
 80151c8:	0801545f 	.word	0x0801545f
 80151cc:	08015497 	.word	0x08015497
 80151d0:	080154bb 	.word	0x080154bb
 80151d4:	20017314 	.word	0x20017314

080151d8 <stdio_exit_handler>:
 80151d8:	4a02      	ldr	r2, [pc, #8]	@ (80151e4 <stdio_exit_handler+0xc>)
 80151da:	4903      	ldr	r1, [pc, #12]	@ (80151e8 <stdio_exit_handler+0x10>)
 80151dc:	4803      	ldr	r0, [pc, #12]	@ (80151ec <stdio_exit_handler+0x14>)
 80151de:	f000 b869 	b.w	80152b4 <_fwalk_sglue>
 80151e2:	bf00      	nop
 80151e4:	20000058 	.word	0x20000058
 80151e8:	080163f1 	.word	0x080163f1
 80151ec:	20000068 	.word	0x20000068

080151f0 <cleanup_stdio>:
 80151f0:	6841      	ldr	r1, [r0, #4]
 80151f2:	4b0c      	ldr	r3, [pc, #48]	@ (8015224 <cleanup_stdio+0x34>)
 80151f4:	4299      	cmp	r1, r3
 80151f6:	b510      	push	{r4, lr}
 80151f8:	4604      	mov	r4, r0
 80151fa:	d001      	beq.n	8015200 <cleanup_stdio+0x10>
 80151fc:	f001 f8f8 	bl	80163f0 <_fflush_r>
 8015200:	68a1      	ldr	r1, [r4, #8]
 8015202:	4b09      	ldr	r3, [pc, #36]	@ (8015228 <cleanup_stdio+0x38>)
 8015204:	4299      	cmp	r1, r3
 8015206:	d002      	beq.n	801520e <cleanup_stdio+0x1e>
 8015208:	4620      	mov	r0, r4
 801520a:	f001 f8f1 	bl	80163f0 <_fflush_r>
 801520e:	68e1      	ldr	r1, [r4, #12]
 8015210:	4b06      	ldr	r3, [pc, #24]	@ (801522c <cleanup_stdio+0x3c>)
 8015212:	4299      	cmp	r1, r3
 8015214:	d004      	beq.n	8015220 <cleanup_stdio+0x30>
 8015216:	4620      	mov	r0, r4
 8015218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801521c:	f001 b8e8 	b.w	80163f0 <_fflush_r>
 8015220:	bd10      	pop	{r4, pc}
 8015222:	bf00      	nop
 8015224:	20017314 	.word	0x20017314
 8015228:	2001737c 	.word	0x2001737c
 801522c:	200173e4 	.word	0x200173e4

08015230 <global_stdio_init.part.0>:
 8015230:	b510      	push	{r4, lr}
 8015232:	4b0b      	ldr	r3, [pc, #44]	@ (8015260 <global_stdio_init.part.0+0x30>)
 8015234:	4c0b      	ldr	r4, [pc, #44]	@ (8015264 <global_stdio_init.part.0+0x34>)
 8015236:	4a0c      	ldr	r2, [pc, #48]	@ (8015268 <global_stdio_init.part.0+0x38>)
 8015238:	601a      	str	r2, [r3, #0]
 801523a:	4620      	mov	r0, r4
 801523c:	2200      	movs	r2, #0
 801523e:	2104      	movs	r1, #4
 8015240:	f7ff ff94 	bl	801516c <std>
 8015244:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015248:	2201      	movs	r2, #1
 801524a:	2109      	movs	r1, #9
 801524c:	f7ff ff8e 	bl	801516c <std>
 8015250:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015254:	2202      	movs	r2, #2
 8015256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801525a:	2112      	movs	r1, #18
 801525c:	f7ff bf86 	b.w	801516c <std>
 8015260:	2001744c 	.word	0x2001744c
 8015264:	20017314 	.word	0x20017314
 8015268:	080151d9 	.word	0x080151d9

0801526c <__sfp_lock_acquire>:
 801526c:	4801      	ldr	r0, [pc, #4]	@ (8015274 <__sfp_lock_acquire+0x8>)
 801526e:	f000 bade 	b.w	801582e <__retarget_lock_acquire_recursive>
 8015272:	bf00      	nop
 8015274:	20017455 	.word	0x20017455

08015278 <__sfp_lock_release>:
 8015278:	4801      	ldr	r0, [pc, #4]	@ (8015280 <__sfp_lock_release+0x8>)
 801527a:	f000 bad9 	b.w	8015830 <__retarget_lock_release_recursive>
 801527e:	bf00      	nop
 8015280:	20017455 	.word	0x20017455

08015284 <__sinit>:
 8015284:	b510      	push	{r4, lr}
 8015286:	4604      	mov	r4, r0
 8015288:	f7ff fff0 	bl	801526c <__sfp_lock_acquire>
 801528c:	6a23      	ldr	r3, [r4, #32]
 801528e:	b11b      	cbz	r3, 8015298 <__sinit+0x14>
 8015290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015294:	f7ff bff0 	b.w	8015278 <__sfp_lock_release>
 8015298:	4b04      	ldr	r3, [pc, #16]	@ (80152ac <__sinit+0x28>)
 801529a:	6223      	str	r3, [r4, #32]
 801529c:	4b04      	ldr	r3, [pc, #16]	@ (80152b0 <__sinit+0x2c>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d1f5      	bne.n	8015290 <__sinit+0xc>
 80152a4:	f7ff ffc4 	bl	8015230 <global_stdio_init.part.0>
 80152a8:	e7f2      	b.n	8015290 <__sinit+0xc>
 80152aa:	bf00      	nop
 80152ac:	080151f1 	.word	0x080151f1
 80152b0:	2001744c 	.word	0x2001744c

080152b4 <_fwalk_sglue>:
 80152b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152b8:	4607      	mov	r7, r0
 80152ba:	4688      	mov	r8, r1
 80152bc:	4614      	mov	r4, r2
 80152be:	2600      	movs	r6, #0
 80152c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80152c4:	f1b9 0901 	subs.w	r9, r9, #1
 80152c8:	d505      	bpl.n	80152d6 <_fwalk_sglue+0x22>
 80152ca:	6824      	ldr	r4, [r4, #0]
 80152cc:	2c00      	cmp	r4, #0
 80152ce:	d1f7      	bne.n	80152c0 <_fwalk_sglue+0xc>
 80152d0:	4630      	mov	r0, r6
 80152d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152d6:	89ab      	ldrh	r3, [r5, #12]
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d907      	bls.n	80152ec <_fwalk_sglue+0x38>
 80152dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152e0:	3301      	adds	r3, #1
 80152e2:	d003      	beq.n	80152ec <_fwalk_sglue+0x38>
 80152e4:	4629      	mov	r1, r5
 80152e6:	4638      	mov	r0, r7
 80152e8:	47c0      	blx	r8
 80152ea:	4306      	orrs	r6, r0
 80152ec:	3568      	adds	r5, #104	@ 0x68
 80152ee:	e7e9      	b.n	80152c4 <_fwalk_sglue+0x10>

080152f0 <iprintf>:
 80152f0:	b40f      	push	{r0, r1, r2, r3}
 80152f2:	b507      	push	{r0, r1, r2, lr}
 80152f4:	4906      	ldr	r1, [pc, #24]	@ (8015310 <iprintf+0x20>)
 80152f6:	ab04      	add	r3, sp, #16
 80152f8:	6808      	ldr	r0, [r1, #0]
 80152fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80152fe:	6881      	ldr	r1, [r0, #8]
 8015300:	9301      	str	r3, [sp, #4]
 8015302:	f000 fd4d 	bl	8015da0 <_vfiprintf_r>
 8015306:	b003      	add	sp, #12
 8015308:	f85d eb04 	ldr.w	lr, [sp], #4
 801530c:	b004      	add	sp, #16
 801530e:	4770      	bx	lr
 8015310:	20000064 	.word	0x20000064

08015314 <_puts_r>:
 8015314:	6a03      	ldr	r3, [r0, #32]
 8015316:	b570      	push	{r4, r5, r6, lr}
 8015318:	6884      	ldr	r4, [r0, #8]
 801531a:	4605      	mov	r5, r0
 801531c:	460e      	mov	r6, r1
 801531e:	b90b      	cbnz	r3, 8015324 <_puts_r+0x10>
 8015320:	f7ff ffb0 	bl	8015284 <__sinit>
 8015324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015326:	07db      	lsls	r3, r3, #31
 8015328:	d405      	bmi.n	8015336 <_puts_r+0x22>
 801532a:	89a3      	ldrh	r3, [r4, #12]
 801532c:	0598      	lsls	r0, r3, #22
 801532e:	d402      	bmi.n	8015336 <_puts_r+0x22>
 8015330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015332:	f000 fa7c 	bl	801582e <__retarget_lock_acquire_recursive>
 8015336:	89a3      	ldrh	r3, [r4, #12]
 8015338:	0719      	lsls	r1, r3, #28
 801533a:	d502      	bpl.n	8015342 <_puts_r+0x2e>
 801533c:	6923      	ldr	r3, [r4, #16]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d135      	bne.n	80153ae <_puts_r+0x9a>
 8015342:	4621      	mov	r1, r4
 8015344:	4628      	mov	r0, r5
 8015346:	f000 f8fb 	bl	8015540 <__swsetup_r>
 801534a:	b380      	cbz	r0, 80153ae <_puts_r+0x9a>
 801534c:	f04f 35ff 	mov.w	r5, #4294967295
 8015350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015352:	07da      	lsls	r2, r3, #31
 8015354:	d405      	bmi.n	8015362 <_puts_r+0x4e>
 8015356:	89a3      	ldrh	r3, [r4, #12]
 8015358:	059b      	lsls	r3, r3, #22
 801535a:	d402      	bmi.n	8015362 <_puts_r+0x4e>
 801535c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801535e:	f000 fa67 	bl	8015830 <__retarget_lock_release_recursive>
 8015362:	4628      	mov	r0, r5
 8015364:	bd70      	pop	{r4, r5, r6, pc}
 8015366:	2b00      	cmp	r3, #0
 8015368:	da04      	bge.n	8015374 <_puts_r+0x60>
 801536a:	69a2      	ldr	r2, [r4, #24]
 801536c:	429a      	cmp	r2, r3
 801536e:	dc17      	bgt.n	80153a0 <_puts_r+0x8c>
 8015370:	290a      	cmp	r1, #10
 8015372:	d015      	beq.n	80153a0 <_puts_r+0x8c>
 8015374:	6823      	ldr	r3, [r4, #0]
 8015376:	1c5a      	adds	r2, r3, #1
 8015378:	6022      	str	r2, [r4, #0]
 801537a:	7019      	strb	r1, [r3, #0]
 801537c:	68a3      	ldr	r3, [r4, #8]
 801537e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015382:	3b01      	subs	r3, #1
 8015384:	60a3      	str	r3, [r4, #8]
 8015386:	2900      	cmp	r1, #0
 8015388:	d1ed      	bne.n	8015366 <_puts_r+0x52>
 801538a:	2b00      	cmp	r3, #0
 801538c:	da11      	bge.n	80153b2 <_puts_r+0x9e>
 801538e:	4622      	mov	r2, r4
 8015390:	210a      	movs	r1, #10
 8015392:	4628      	mov	r0, r5
 8015394:	f000 f895 	bl	80154c2 <__swbuf_r>
 8015398:	3001      	adds	r0, #1
 801539a:	d0d7      	beq.n	801534c <_puts_r+0x38>
 801539c:	250a      	movs	r5, #10
 801539e:	e7d7      	b.n	8015350 <_puts_r+0x3c>
 80153a0:	4622      	mov	r2, r4
 80153a2:	4628      	mov	r0, r5
 80153a4:	f000 f88d 	bl	80154c2 <__swbuf_r>
 80153a8:	3001      	adds	r0, #1
 80153aa:	d1e7      	bne.n	801537c <_puts_r+0x68>
 80153ac:	e7ce      	b.n	801534c <_puts_r+0x38>
 80153ae:	3e01      	subs	r6, #1
 80153b0:	e7e4      	b.n	801537c <_puts_r+0x68>
 80153b2:	6823      	ldr	r3, [r4, #0]
 80153b4:	1c5a      	adds	r2, r3, #1
 80153b6:	6022      	str	r2, [r4, #0]
 80153b8:	220a      	movs	r2, #10
 80153ba:	701a      	strb	r2, [r3, #0]
 80153bc:	e7ee      	b.n	801539c <_puts_r+0x88>
	...

080153c0 <puts>:
 80153c0:	4b02      	ldr	r3, [pc, #8]	@ (80153cc <puts+0xc>)
 80153c2:	4601      	mov	r1, r0
 80153c4:	6818      	ldr	r0, [r3, #0]
 80153c6:	f7ff bfa5 	b.w	8015314 <_puts_r>
 80153ca:	bf00      	nop
 80153cc:	20000064 	.word	0x20000064

080153d0 <sniprintf>:
 80153d0:	b40c      	push	{r2, r3}
 80153d2:	b530      	push	{r4, r5, lr}
 80153d4:	4b18      	ldr	r3, [pc, #96]	@ (8015438 <sniprintf+0x68>)
 80153d6:	1e0c      	subs	r4, r1, #0
 80153d8:	681d      	ldr	r5, [r3, #0]
 80153da:	b09d      	sub	sp, #116	@ 0x74
 80153dc:	da08      	bge.n	80153f0 <sniprintf+0x20>
 80153de:	238b      	movs	r3, #139	@ 0x8b
 80153e0:	602b      	str	r3, [r5, #0]
 80153e2:	f04f 30ff 	mov.w	r0, #4294967295
 80153e6:	b01d      	add	sp, #116	@ 0x74
 80153e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153ec:	b002      	add	sp, #8
 80153ee:	4770      	bx	lr
 80153f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80153f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80153f8:	f04f 0300 	mov.w	r3, #0
 80153fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80153fe:	bf14      	ite	ne
 8015400:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015404:	4623      	moveq	r3, r4
 8015406:	9304      	str	r3, [sp, #16]
 8015408:	9307      	str	r3, [sp, #28]
 801540a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801540e:	9002      	str	r0, [sp, #8]
 8015410:	9006      	str	r0, [sp, #24]
 8015412:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015416:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015418:	ab21      	add	r3, sp, #132	@ 0x84
 801541a:	a902      	add	r1, sp, #8
 801541c:	4628      	mov	r0, r5
 801541e:	9301      	str	r3, [sp, #4]
 8015420:	f000 fb98 	bl	8015b54 <_svfiprintf_r>
 8015424:	1c43      	adds	r3, r0, #1
 8015426:	bfbc      	itt	lt
 8015428:	238b      	movlt	r3, #139	@ 0x8b
 801542a:	602b      	strlt	r3, [r5, #0]
 801542c:	2c00      	cmp	r4, #0
 801542e:	d0da      	beq.n	80153e6 <sniprintf+0x16>
 8015430:	9b02      	ldr	r3, [sp, #8]
 8015432:	2200      	movs	r2, #0
 8015434:	701a      	strb	r2, [r3, #0]
 8015436:	e7d6      	b.n	80153e6 <sniprintf+0x16>
 8015438:	20000064 	.word	0x20000064

0801543c <__sread>:
 801543c:	b510      	push	{r4, lr}
 801543e:	460c      	mov	r4, r1
 8015440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015444:	f000 f9a4 	bl	8015790 <_read_r>
 8015448:	2800      	cmp	r0, #0
 801544a:	bfab      	itete	ge
 801544c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801544e:	89a3      	ldrhlt	r3, [r4, #12]
 8015450:	181b      	addge	r3, r3, r0
 8015452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015456:	bfac      	ite	ge
 8015458:	6563      	strge	r3, [r4, #84]	@ 0x54
 801545a:	81a3      	strhlt	r3, [r4, #12]
 801545c:	bd10      	pop	{r4, pc}

0801545e <__swrite>:
 801545e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015462:	461f      	mov	r7, r3
 8015464:	898b      	ldrh	r3, [r1, #12]
 8015466:	05db      	lsls	r3, r3, #23
 8015468:	4605      	mov	r5, r0
 801546a:	460c      	mov	r4, r1
 801546c:	4616      	mov	r6, r2
 801546e:	d505      	bpl.n	801547c <__swrite+0x1e>
 8015470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015474:	2302      	movs	r3, #2
 8015476:	2200      	movs	r2, #0
 8015478:	f000 f978 	bl	801576c <_lseek_r>
 801547c:	89a3      	ldrh	r3, [r4, #12]
 801547e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015486:	81a3      	strh	r3, [r4, #12]
 8015488:	4632      	mov	r2, r6
 801548a:	463b      	mov	r3, r7
 801548c:	4628      	mov	r0, r5
 801548e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015492:	f000 b98f 	b.w	80157b4 <_write_r>

08015496 <__sseek>:
 8015496:	b510      	push	{r4, lr}
 8015498:	460c      	mov	r4, r1
 801549a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801549e:	f000 f965 	bl	801576c <_lseek_r>
 80154a2:	1c43      	adds	r3, r0, #1
 80154a4:	89a3      	ldrh	r3, [r4, #12]
 80154a6:	bf15      	itete	ne
 80154a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80154aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80154ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80154b2:	81a3      	strheq	r3, [r4, #12]
 80154b4:	bf18      	it	ne
 80154b6:	81a3      	strhne	r3, [r4, #12]
 80154b8:	bd10      	pop	{r4, pc}

080154ba <__sclose>:
 80154ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154be:	f000 b8e7 	b.w	8015690 <_close_r>

080154c2 <__swbuf_r>:
 80154c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154c4:	460e      	mov	r6, r1
 80154c6:	4614      	mov	r4, r2
 80154c8:	4605      	mov	r5, r0
 80154ca:	b118      	cbz	r0, 80154d4 <__swbuf_r+0x12>
 80154cc:	6a03      	ldr	r3, [r0, #32]
 80154ce:	b90b      	cbnz	r3, 80154d4 <__swbuf_r+0x12>
 80154d0:	f7ff fed8 	bl	8015284 <__sinit>
 80154d4:	69a3      	ldr	r3, [r4, #24]
 80154d6:	60a3      	str	r3, [r4, #8]
 80154d8:	89a3      	ldrh	r3, [r4, #12]
 80154da:	071a      	lsls	r2, r3, #28
 80154dc:	d501      	bpl.n	80154e2 <__swbuf_r+0x20>
 80154de:	6923      	ldr	r3, [r4, #16]
 80154e0:	b943      	cbnz	r3, 80154f4 <__swbuf_r+0x32>
 80154e2:	4621      	mov	r1, r4
 80154e4:	4628      	mov	r0, r5
 80154e6:	f000 f82b 	bl	8015540 <__swsetup_r>
 80154ea:	b118      	cbz	r0, 80154f4 <__swbuf_r+0x32>
 80154ec:	f04f 37ff 	mov.w	r7, #4294967295
 80154f0:	4638      	mov	r0, r7
 80154f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154f4:	6823      	ldr	r3, [r4, #0]
 80154f6:	6922      	ldr	r2, [r4, #16]
 80154f8:	1a98      	subs	r0, r3, r2
 80154fa:	6963      	ldr	r3, [r4, #20]
 80154fc:	b2f6      	uxtb	r6, r6
 80154fe:	4283      	cmp	r3, r0
 8015500:	4637      	mov	r7, r6
 8015502:	dc05      	bgt.n	8015510 <__swbuf_r+0x4e>
 8015504:	4621      	mov	r1, r4
 8015506:	4628      	mov	r0, r5
 8015508:	f000 ff72 	bl	80163f0 <_fflush_r>
 801550c:	2800      	cmp	r0, #0
 801550e:	d1ed      	bne.n	80154ec <__swbuf_r+0x2a>
 8015510:	68a3      	ldr	r3, [r4, #8]
 8015512:	3b01      	subs	r3, #1
 8015514:	60a3      	str	r3, [r4, #8]
 8015516:	6823      	ldr	r3, [r4, #0]
 8015518:	1c5a      	adds	r2, r3, #1
 801551a:	6022      	str	r2, [r4, #0]
 801551c:	701e      	strb	r6, [r3, #0]
 801551e:	6962      	ldr	r2, [r4, #20]
 8015520:	1c43      	adds	r3, r0, #1
 8015522:	429a      	cmp	r2, r3
 8015524:	d004      	beq.n	8015530 <__swbuf_r+0x6e>
 8015526:	89a3      	ldrh	r3, [r4, #12]
 8015528:	07db      	lsls	r3, r3, #31
 801552a:	d5e1      	bpl.n	80154f0 <__swbuf_r+0x2e>
 801552c:	2e0a      	cmp	r6, #10
 801552e:	d1df      	bne.n	80154f0 <__swbuf_r+0x2e>
 8015530:	4621      	mov	r1, r4
 8015532:	4628      	mov	r0, r5
 8015534:	f000 ff5c 	bl	80163f0 <_fflush_r>
 8015538:	2800      	cmp	r0, #0
 801553a:	d0d9      	beq.n	80154f0 <__swbuf_r+0x2e>
 801553c:	e7d6      	b.n	80154ec <__swbuf_r+0x2a>
	...

08015540 <__swsetup_r>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	4b29      	ldr	r3, [pc, #164]	@ (80155e8 <__swsetup_r+0xa8>)
 8015544:	4605      	mov	r5, r0
 8015546:	6818      	ldr	r0, [r3, #0]
 8015548:	460c      	mov	r4, r1
 801554a:	b118      	cbz	r0, 8015554 <__swsetup_r+0x14>
 801554c:	6a03      	ldr	r3, [r0, #32]
 801554e:	b90b      	cbnz	r3, 8015554 <__swsetup_r+0x14>
 8015550:	f7ff fe98 	bl	8015284 <__sinit>
 8015554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015558:	0719      	lsls	r1, r3, #28
 801555a:	d422      	bmi.n	80155a2 <__swsetup_r+0x62>
 801555c:	06da      	lsls	r2, r3, #27
 801555e:	d407      	bmi.n	8015570 <__swsetup_r+0x30>
 8015560:	2209      	movs	r2, #9
 8015562:	602a      	str	r2, [r5, #0]
 8015564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015568:	81a3      	strh	r3, [r4, #12]
 801556a:	f04f 30ff 	mov.w	r0, #4294967295
 801556e:	e033      	b.n	80155d8 <__swsetup_r+0x98>
 8015570:	0758      	lsls	r0, r3, #29
 8015572:	d512      	bpl.n	801559a <__swsetup_r+0x5a>
 8015574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015576:	b141      	cbz	r1, 801558a <__swsetup_r+0x4a>
 8015578:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801557c:	4299      	cmp	r1, r3
 801557e:	d002      	beq.n	8015586 <__swsetup_r+0x46>
 8015580:	4628      	mov	r0, r5
 8015582:	f000 f98b 	bl	801589c <_free_r>
 8015586:	2300      	movs	r3, #0
 8015588:	6363      	str	r3, [r4, #52]	@ 0x34
 801558a:	89a3      	ldrh	r3, [r4, #12]
 801558c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015590:	81a3      	strh	r3, [r4, #12]
 8015592:	2300      	movs	r3, #0
 8015594:	6063      	str	r3, [r4, #4]
 8015596:	6923      	ldr	r3, [r4, #16]
 8015598:	6023      	str	r3, [r4, #0]
 801559a:	89a3      	ldrh	r3, [r4, #12]
 801559c:	f043 0308 	orr.w	r3, r3, #8
 80155a0:	81a3      	strh	r3, [r4, #12]
 80155a2:	6923      	ldr	r3, [r4, #16]
 80155a4:	b94b      	cbnz	r3, 80155ba <__swsetup_r+0x7a>
 80155a6:	89a3      	ldrh	r3, [r4, #12]
 80155a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80155ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80155b0:	d003      	beq.n	80155ba <__swsetup_r+0x7a>
 80155b2:	4621      	mov	r1, r4
 80155b4:	4628      	mov	r0, r5
 80155b6:	f000 ff7b 	bl	80164b0 <__smakebuf_r>
 80155ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155be:	f013 0201 	ands.w	r2, r3, #1
 80155c2:	d00a      	beq.n	80155da <__swsetup_r+0x9a>
 80155c4:	2200      	movs	r2, #0
 80155c6:	60a2      	str	r2, [r4, #8]
 80155c8:	6962      	ldr	r2, [r4, #20]
 80155ca:	4252      	negs	r2, r2
 80155cc:	61a2      	str	r2, [r4, #24]
 80155ce:	6922      	ldr	r2, [r4, #16]
 80155d0:	b942      	cbnz	r2, 80155e4 <__swsetup_r+0xa4>
 80155d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80155d6:	d1c5      	bne.n	8015564 <__swsetup_r+0x24>
 80155d8:	bd38      	pop	{r3, r4, r5, pc}
 80155da:	0799      	lsls	r1, r3, #30
 80155dc:	bf58      	it	pl
 80155de:	6962      	ldrpl	r2, [r4, #20]
 80155e0:	60a2      	str	r2, [r4, #8]
 80155e2:	e7f4      	b.n	80155ce <__swsetup_r+0x8e>
 80155e4:	2000      	movs	r0, #0
 80155e6:	e7f7      	b.n	80155d8 <__swsetup_r+0x98>
 80155e8:	20000064 	.word	0x20000064

080155ec <memcmp>:
 80155ec:	b510      	push	{r4, lr}
 80155ee:	3901      	subs	r1, #1
 80155f0:	4402      	add	r2, r0
 80155f2:	4290      	cmp	r0, r2
 80155f4:	d101      	bne.n	80155fa <memcmp+0xe>
 80155f6:	2000      	movs	r0, #0
 80155f8:	e005      	b.n	8015606 <memcmp+0x1a>
 80155fa:	7803      	ldrb	r3, [r0, #0]
 80155fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015600:	42a3      	cmp	r3, r4
 8015602:	d001      	beq.n	8015608 <memcmp+0x1c>
 8015604:	1b18      	subs	r0, r3, r4
 8015606:	bd10      	pop	{r4, pc}
 8015608:	3001      	adds	r0, #1
 801560a:	e7f2      	b.n	80155f2 <memcmp+0x6>

0801560c <memmove>:
 801560c:	4288      	cmp	r0, r1
 801560e:	b510      	push	{r4, lr}
 8015610:	eb01 0402 	add.w	r4, r1, r2
 8015614:	d902      	bls.n	801561c <memmove+0x10>
 8015616:	4284      	cmp	r4, r0
 8015618:	4623      	mov	r3, r4
 801561a:	d807      	bhi.n	801562c <memmove+0x20>
 801561c:	1e43      	subs	r3, r0, #1
 801561e:	42a1      	cmp	r1, r4
 8015620:	d008      	beq.n	8015634 <memmove+0x28>
 8015622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015626:	f803 2f01 	strb.w	r2, [r3, #1]!
 801562a:	e7f8      	b.n	801561e <memmove+0x12>
 801562c:	4402      	add	r2, r0
 801562e:	4601      	mov	r1, r0
 8015630:	428a      	cmp	r2, r1
 8015632:	d100      	bne.n	8015636 <memmove+0x2a>
 8015634:	bd10      	pop	{r4, pc}
 8015636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801563a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801563e:	e7f7      	b.n	8015630 <memmove+0x24>

08015640 <memset>:
 8015640:	4402      	add	r2, r0
 8015642:	4603      	mov	r3, r0
 8015644:	4293      	cmp	r3, r2
 8015646:	d100      	bne.n	801564a <memset+0xa>
 8015648:	4770      	bx	lr
 801564a:	f803 1b01 	strb.w	r1, [r3], #1
 801564e:	e7f9      	b.n	8015644 <memset+0x4>

08015650 <strchr>:
 8015650:	b2c9      	uxtb	r1, r1
 8015652:	4603      	mov	r3, r0
 8015654:	4618      	mov	r0, r3
 8015656:	f813 2b01 	ldrb.w	r2, [r3], #1
 801565a:	b112      	cbz	r2, 8015662 <strchr+0x12>
 801565c:	428a      	cmp	r2, r1
 801565e:	d1f9      	bne.n	8015654 <strchr+0x4>
 8015660:	4770      	bx	lr
 8015662:	2900      	cmp	r1, #0
 8015664:	bf18      	it	ne
 8015666:	2000      	movne	r0, #0
 8015668:	4770      	bx	lr

0801566a <strncmp>:
 801566a:	b510      	push	{r4, lr}
 801566c:	b16a      	cbz	r2, 801568a <strncmp+0x20>
 801566e:	3901      	subs	r1, #1
 8015670:	1884      	adds	r4, r0, r2
 8015672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015676:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801567a:	429a      	cmp	r2, r3
 801567c:	d103      	bne.n	8015686 <strncmp+0x1c>
 801567e:	42a0      	cmp	r0, r4
 8015680:	d001      	beq.n	8015686 <strncmp+0x1c>
 8015682:	2a00      	cmp	r2, #0
 8015684:	d1f5      	bne.n	8015672 <strncmp+0x8>
 8015686:	1ad0      	subs	r0, r2, r3
 8015688:	bd10      	pop	{r4, pc}
 801568a:	4610      	mov	r0, r2
 801568c:	e7fc      	b.n	8015688 <strncmp+0x1e>
	...

08015690 <_close_r>:
 8015690:	b538      	push	{r3, r4, r5, lr}
 8015692:	4d06      	ldr	r5, [pc, #24]	@ (80156ac <_close_r+0x1c>)
 8015694:	2300      	movs	r3, #0
 8015696:	4604      	mov	r4, r0
 8015698:	4608      	mov	r0, r1
 801569a:	602b      	str	r3, [r5, #0]
 801569c:	f7ec fa60 	bl	8001b60 <_close>
 80156a0:	1c43      	adds	r3, r0, #1
 80156a2:	d102      	bne.n	80156aa <_close_r+0x1a>
 80156a4:	682b      	ldr	r3, [r5, #0]
 80156a6:	b103      	cbz	r3, 80156aa <_close_r+0x1a>
 80156a8:	6023      	str	r3, [r4, #0]
 80156aa:	bd38      	pop	{r3, r4, r5, pc}
 80156ac:	20017450 	.word	0x20017450

080156b0 <_reclaim_reent>:
 80156b0:	4b2d      	ldr	r3, [pc, #180]	@ (8015768 <_reclaim_reent+0xb8>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	4283      	cmp	r3, r0
 80156b6:	b570      	push	{r4, r5, r6, lr}
 80156b8:	4604      	mov	r4, r0
 80156ba:	d053      	beq.n	8015764 <_reclaim_reent+0xb4>
 80156bc:	69c3      	ldr	r3, [r0, #28]
 80156be:	b31b      	cbz	r3, 8015708 <_reclaim_reent+0x58>
 80156c0:	68db      	ldr	r3, [r3, #12]
 80156c2:	b163      	cbz	r3, 80156de <_reclaim_reent+0x2e>
 80156c4:	2500      	movs	r5, #0
 80156c6:	69e3      	ldr	r3, [r4, #28]
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	5959      	ldr	r1, [r3, r5]
 80156cc:	b9b1      	cbnz	r1, 80156fc <_reclaim_reent+0x4c>
 80156ce:	3504      	adds	r5, #4
 80156d0:	2d80      	cmp	r5, #128	@ 0x80
 80156d2:	d1f8      	bne.n	80156c6 <_reclaim_reent+0x16>
 80156d4:	69e3      	ldr	r3, [r4, #28]
 80156d6:	4620      	mov	r0, r4
 80156d8:	68d9      	ldr	r1, [r3, #12]
 80156da:	f000 f8df 	bl	801589c <_free_r>
 80156de:	69e3      	ldr	r3, [r4, #28]
 80156e0:	6819      	ldr	r1, [r3, #0]
 80156e2:	b111      	cbz	r1, 80156ea <_reclaim_reent+0x3a>
 80156e4:	4620      	mov	r0, r4
 80156e6:	f000 f8d9 	bl	801589c <_free_r>
 80156ea:	69e3      	ldr	r3, [r4, #28]
 80156ec:	689d      	ldr	r5, [r3, #8]
 80156ee:	b15d      	cbz	r5, 8015708 <_reclaim_reent+0x58>
 80156f0:	4629      	mov	r1, r5
 80156f2:	4620      	mov	r0, r4
 80156f4:	682d      	ldr	r5, [r5, #0]
 80156f6:	f000 f8d1 	bl	801589c <_free_r>
 80156fa:	e7f8      	b.n	80156ee <_reclaim_reent+0x3e>
 80156fc:	680e      	ldr	r6, [r1, #0]
 80156fe:	4620      	mov	r0, r4
 8015700:	f000 f8cc 	bl	801589c <_free_r>
 8015704:	4631      	mov	r1, r6
 8015706:	e7e1      	b.n	80156cc <_reclaim_reent+0x1c>
 8015708:	6961      	ldr	r1, [r4, #20]
 801570a:	b111      	cbz	r1, 8015712 <_reclaim_reent+0x62>
 801570c:	4620      	mov	r0, r4
 801570e:	f000 f8c5 	bl	801589c <_free_r>
 8015712:	69e1      	ldr	r1, [r4, #28]
 8015714:	b111      	cbz	r1, 801571c <_reclaim_reent+0x6c>
 8015716:	4620      	mov	r0, r4
 8015718:	f000 f8c0 	bl	801589c <_free_r>
 801571c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801571e:	b111      	cbz	r1, 8015726 <_reclaim_reent+0x76>
 8015720:	4620      	mov	r0, r4
 8015722:	f000 f8bb 	bl	801589c <_free_r>
 8015726:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015728:	b111      	cbz	r1, 8015730 <_reclaim_reent+0x80>
 801572a:	4620      	mov	r0, r4
 801572c:	f000 f8b6 	bl	801589c <_free_r>
 8015730:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015732:	b111      	cbz	r1, 801573a <_reclaim_reent+0x8a>
 8015734:	4620      	mov	r0, r4
 8015736:	f000 f8b1 	bl	801589c <_free_r>
 801573a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801573c:	b111      	cbz	r1, 8015744 <_reclaim_reent+0x94>
 801573e:	4620      	mov	r0, r4
 8015740:	f000 f8ac 	bl	801589c <_free_r>
 8015744:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015746:	b111      	cbz	r1, 801574e <_reclaim_reent+0x9e>
 8015748:	4620      	mov	r0, r4
 801574a:	f000 f8a7 	bl	801589c <_free_r>
 801574e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015750:	b111      	cbz	r1, 8015758 <_reclaim_reent+0xa8>
 8015752:	4620      	mov	r0, r4
 8015754:	f000 f8a2 	bl	801589c <_free_r>
 8015758:	6a23      	ldr	r3, [r4, #32]
 801575a:	b11b      	cbz	r3, 8015764 <_reclaim_reent+0xb4>
 801575c:	4620      	mov	r0, r4
 801575e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015762:	4718      	bx	r3
 8015764:	bd70      	pop	{r4, r5, r6, pc}
 8015766:	bf00      	nop
 8015768:	20000064 	.word	0x20000064

0801576c <_lseek_r>:
 801576c:	b538      	push	{r3, r4, r5, lr}
 801576e:	4d07      	ldr	r5, [pc, #28]	@ (801578c <_lseek_r+0x20>)
 8015770:	4604      	mov	r4, r0
 8015772:	4608      	mov	r0, r1
 8015774:	4611      	mov	r1, r2
 8015776:	2200      	movs	r2, #0
 8015778:	602a      	str	r2, [r5, #0]
 801577a:	461a      	mov	r2, r3
 801577c:	f7ec fa17 	bl	8001bae <_lseek>
 8015780:	1c43      	adds	r3, r0, #1
 8015782:	d102      	bne.n	801578a <_lseek_r+0x1e>
 8015784:	682b      	ldr	r3, [r5, #0]
 8015786:	b103      	cbz	r3, 801578a <_lseek_r+0x1e>
 8015788:	6023      	str	r3, [r4, #0]
 801578a:	bd38      	pop	{r3, r4, r5, pc}
 801578c:	20017450 	.word	0x20017450

08015790 <_read_r>:
 8015790:	b538      	push	{r3, r4, r5, lr}
 8015792:	4d07      	ldr	r5, [pc, #28]	@ (80157b0 <_read_r+0x20>)
 8015794:	4604      	mov	r4, r0
 8015796:	4608      	mov	r0, r1
 8015798:	4611      	mov	r1, r2
 801579a:	2200      	movs	r2, #0
 801579c:	602a      	str	r2, [r5, #0]
 801579e:	461a      	mov	r2, r3
 80157a0:	f7ec f9a5 	bl	8001aee <_read>
 80157a4:	1c43      	adds	r3, r0, #1
 80157a6:	d102      	bne.n	80157ae <_read_r+0x1e>
 80157a8:	682b      	ldr	r3, [r5, #0]
 80157aa:	b103      	cbz	r3, 80157ae <_read_r+0x1e>
 80157ac:	6023      	str	r3, [r4, #0]
 80157ae:	bd38      	pop	{r3, r4, r5, pc}
 80157b0:	20017450 	.word	0x20017450

080157b4 <_write_r>:
 80157b4:	b538      	push	{r3, r4, r5, lr}
 80157b6:	4d07      	ldr	r5, [pc, #28]	@ (80157d4 <_write_r+0x20>)
 80157b8:	4604      	mov	r4, r0
 80157ba:	4608      	mov	r0, r1
 80157bc:	4611      	mov	r1, r2
 80157be:	2200      	movs	r2, #0
 80157c0:	602a      	str	r2, [r5, #0]
 80157c2:	461a      	mov	r2, r3
 80157c4:	f7ec f9b0 	bl	8001b28 <_write>
 80157c8:	1c43      	adds	r3, r0, #1
 80157ca:	d102      	bne.n	80157d2 <_write_r+0x1e>
 80157cc:	682b      	ldr	r3, [r5, #0]
 80157ce:	b103      	cbz	r3, 80157d2 <_write_r+0x1e>
 80157d0:	6023      	str	r3, [r4, #0]
 80157d2:	bd38      	pop	{r3, r4, r5, pc}
 80157d4:	20017450 	.word	0x20017450

080157d8 <__errno>:
 80157d8:	4b01      	ldr	r3, [pc, #4]	@ (80157e0 <__errno+0x8>)
 80157da:	6818      	ldr	r0, [r3, #0]
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop
 80157e0:	20000064 	.word	0x20000064

080157e4 <__libc_init_array>:
 80157e4:	b570      	push	{r4, r5, r6, lr}
 80157e6:	4d0d      	ldr	r5, [pc, #52]	@ (801581c <__libc_init_array+0x38>)
 80157e8:	4c0d      	ldr	r4, [pc, #52]	@ (8015820 <__libc_init_array+0x3c>)
 80157ea:	1b64      	subs	r4, r4, r5
 80157ec:	10a4      	asrs	r4, r4, #2
 80157ee:	2600      	movs	r6, #0
 80157f0:	42a6      	cmp	r6, r4
 80157f2:	d109      	bne.n	8015808 <__libc_init_array+0x24>
 80157f4:	4d0b      	ldr	r5, [pc, #44]	@ (8015824 <__libc_init_array+0x40>)
 80157f6:	4c0c      	ldr	r4, [pc, #48]	@ (8015828 <__libc_init_array+0x44>)
 80157f8:	f000 ff4a 	bl	8016690 <_init>
 80157fc:	1b64      	subs	r4, r4, r5
 80157fe:	10a4      	asrs	r4, r4, #2
 8015800:	2600      	movs	r6, #0
 8015802:	42a6      	cmp	r6, r4
 8015804:	d105      	bne.n	8015812 <__libc_init_array+0x2e>
 8015806:	bd70      	pop	{r4, r5, r6, pc}
 8015808:	f855 3b04 	ldr.w	r3, [r5], #4
 801580c:	4798      	blx	r3
 801580e:	3601      	adds	r6, #1
 8015810:	e7ee      	b.n	80157f0 <__libc_init_array+0xc>
 8015812:	f855 3b04 	ldr.w	r3, [r5], #4
 8015816:	4798      	blx	r3
 8015818:	3601      	adds	r6, #1
 801581a:	e7f2      	b.n	8015802 <__libc_init_array+0x1e>
 801581c:	0801a5ac 	.word	0x0801a5ac
 8015820:	0801a5ac 	.word	0x0801a5ac
 8015824:	0801a5ac 	.word	0x0801a5ac
 8015828:	0801a5b0 	.word	0x0801a5b0

0801582c <__retarget_lock_init_recursive>:
 801582c:	4770      	bx	lr

0801582e <__retarget_lock_acquire_recursive>:
 801582e:	4770      	bx	lr

08015830 <__retarget_lock_release_recursive>:
 8015830:	4770      	bx	lr

08015832 <strcpy>:
 8015832:	4603      	mov	r3, r0
 8015834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015838:	f803 2b01 	strb.w	r2, [r3], #1
 801583c:	2a00      	cmp	r2, #0
 801583e:	d1f9      	bne.n	8015834 <strcpy+0x2>
 8015840:	4770      	bx	lr

08015842 <memcpy>:
 8015842:	440a      	add	r2, r1
 8015844:	4291      	cmp	r1, r2
 8015846:	f100 33ff 	add.w	r3, r0, #4294967295
 801584a:	d100      	bne.n	801584e <memcpy+0xc>
 801584c:	4770      	bx	lr
 801584e:	b510      	push	{r4, lr}
 8015850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015858:	4291      	cmp	r1, r2
 801585a:	d1f9      	bne.n	8015850 <memcpy+0xe>
 801585c:	bd10      	pop	{r4, pc}
	...

08015860 <__assert_func>:
 8015860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015862:	4614      	mov	r4, r2
 8015864:	461a      	mov	r2, r3
 8015866:	4b09      	ldr	r3, [pc, #36]	@ (801588c <__assert_func+0x2c>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	4605      	mov	r5, r0
 801586c:	68d8      	ldr	r0, [r3, #12]
 801586e:	b14c      	cbz	r4, 8015884 <__assert_func+0x24>
 8015870:	4b07      	ldr	r3, [pc, #28]	@ (8015890 <__assert_func+0x30>)
 8015872:	9100      	str	r1, [sp, #0]
 8015874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015878:	4906      	ldr	r1, [pc, #24]	@ (8015894 <__assert_func+0x34>)
 801587a:	462b      	mov	r3, r5
 801587c:	f000 fde0 	bl	8016440 <fiprintf>
 8015880:	f000 fe84 	bl	801658c <abort>
 8015884:	4b04      	ldr	r3, [pc, #16]	@ (8015898 <__assert_func+0x38>)
 8015886:	461c      	mov	r4, r3
 8015888:	e7f3      	b.n	8015872 <__assert_func+0x12>
 801588a:	bf00      	nop
 801588c:	20000064 	.word	0x20000064
 8015890:	0801a433 	.word	0x0801a433
 8015894:	0801a440 	.word	0x0801a440
 8015898:	0801a46e 	.word	0x0801a46e

0801589c <_free_r>:
 801589c:	b538      	push	{r3, r4, r5, lr}
 801589e:	4605      	mov	r5, r0
 80158a0:	2900      	cmp	r1, #0
 80158a2:	d041      	beq.n	8015928 <_free_r+0x8c>
 80158a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158a8:	1f0c      	subs	r4, r1, #4
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	bfb8      	it	lt
 80158ae:	18e4      	addlt	r4, r4, r3
 80158b0:	f000 f8e8 	bl	8015a84 <__malloc_lock>
 80158b4:	4a1d      	ldr	r2, [pc, #116]	@ (801592c <_free_r+0x90>)
 80158b6:	6813      	ldr	r3, [r2, #0]
 80158b8:	b933      	cbnz	r3, 80158c8 <_free_r+0x2c>
 80158ba:	6063      	str	r3, [r4, #4]
 80158bc:	6014      	str	r4, [r2, #0]
 80158be:	4628      	mov	r0, r5
 80158c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158c4:	f000 b8e4 	b.w	8015a90 <__malloc_unlock>
 80158c8:	42a3      	cmp	r3, r4
 80158ca:	d908      	bls.n	80158de <_free_r+0x42>
 80158cc:	6820      	ldr	r0, [r4, #0]
 80158ce:	1821      	adds	r1, r4, r0
 80158d0:	428b      	cmp	r3, r1
 80158d2:	bf01      	itttt	eq
 80158d4:	6819      	ldreq	r1, [r3, #0]
 80158d6:	685b      	ldreq	r3, [r3, #4]
 80158d8:	1809      	addeq	r1, r1, r0
 80158da:	6021      	streq	r1, [r4, #0]
 80158dc:	e7ed      	b.n	80158ba <_free_r+0x1e>
 80158de:	461a      	mov	r2, r3
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	b10b      	cbz	r3, 80158e8 <_free_r+0x4c>
 80158e4:	42a3      	cmp	r3, r4
 80158e6:	d9fa      	bls.n	80158de <_free_r+0x42>
 80158e8:	6811      	ldr	r1, [r2, #0]
 80158ea:	1850      	adds	r0, r2, r1
 80158ec:	42a0      	cmp	r0, r4
 80158ee:	d10b      	bne.n	8015908 <_free_r+0x6c>
 80158f0:	6820      	ldr	r0, [r4, #0]
 80158f2:	4401      	add	r1, r0
 80158f4:	1850      	adds	r0, r2, r1
 80158f6:	4283      	cmp	r3, r0
 80158f8:	6011      	str	r1, [r2, #0]
 80158fa:	d1e0      	bne.n	80158be <_free_r+0x22>
 80158fc:	6818      	ldr	r0, [r3, #0]
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	6053      	str	r3, [r2, #4]
 8015902:	4408      	add	r0, r1
 8015904:	6010      	str	r0, [r2, #0]
 8015906:	e7da      	b.n	80158be <_free_r+0x22>
 8015908:	d902      	bls.n	8015910 <_free_r+0x74>
 801590a:	230c      	movs	r3, #12
 801590c:	602b      	str	r3, [r5, #0]
 801590e:	e7d6      	b.n	80158be <_free_r+0x22>
 8015910:	6820      	ldr	r0, [r4, #0]
 8015912:	1821      	adds	r1, r4, r0
 8015914:	428b      	cmp	r3, r1
 8015916:	bf04      	itt	eq
 8015918:	6819      	ldreq	r1, [r3, #0]
 801591a:	685b      	ldreq	r3, [r3, #4]
 801591c:	6063      	str	r3, [r4, #4]
 801591e:	bf04      	itt	eq
 8015920:	1809      	addeq	r1, r1, r0
 8015922:	6021      	streq	r1, [r4, #0]
 8015924:	6054      	str	r4, [r2, #4]
 8015926:	e7ca      	b.n	80158be <_free_r+0x22>
 8015928:	bd38      	pop	{r3, r4, r5, pc}
 801592a:	bf00      	nop
 801592c:	2001745c 	.word	0x2001745c

08015930 <malloc>:
 8015930:	4b02      	ldr	r3, [pc, #8]	@ (801593c <malloc+0xc>)
 8015932:	4601      	mov	r1, r0
 8015934:	6818      	ldr	r0, [r3, #0]
 8015936:	f000 b825 	b.w	8015984 <_malloc_r>
 801593a:	bf00      	nop
 801593c:	20000064 	.word	0x20000064

08015940 <sbrk_aligned>:
 8015940:	b570      	push	{r4, r5, r6, lr}
 8015942:	4e0f      	ldr	r6, [pc, #60]	@ (8015980 <sbrk_aligned+0x40>)
 8015944:	460c      	mov	r4, r1
 8015946:	6831      	ldr	r1, [r6, #0]
 8015948:	4605      	mov	r5, r0
 801594a:	b911      	cbnz	r1, 8015952 <sbrk_aligned+0x12>
 801594c:	f000 fe0e 	bl	801656c <_sbrk_r>
 8015950:	6030      	str	r0, [r6, #0]
 8015952:	4621      	mov	r1, r4
 8015954:	4628      	mov	r0, r5
 8015956:	f000 fe09 	bl	801656c <_sbrk_r>
 801595a:	1c43      	adds	r3, r0, #1
 801595c:	d103      	bne.n	8015966 <sbrk_aligned+0x26>
 801595e:	f04f 34ff 	mov.w	r4, #4294967295
 8015962:	4620      	mov	r0, r4
 8015964:	bd70      	pop	{r4, r5, r6, pc}
 8015966:	1cc4      	adds	r4, r0, #3
 8015968:	f024 0403 	bic.w	r4, r4, #3
 801596c:	42a0      	cmp	r0, r4
 801596e:	d0f8      	beq.n	8015962 <sbrk_aligned+0x22>
 8015970:	1a21      	subs	r1, r4, r0
 8015972:	4628      	mov	r0, r5
 8015974:	f000 fdfa 	bl	801656c <_sbrk_r>
 8015978:	3001      	adds	r0, #1
 801597a:	d1f2      	bne.n	8015962 <sbrk_aligned+0x22>
 801597c:	e7ef      	b.n	801595e <sbrk_aligned+0x1e>
 801597e:	bf00      	nop
 8015980:	20017458 	.word	0x20017458

08015984 <_malloc_r>:
 8015984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015988:	1ccd      	adds	r5, r1, #3
 801598a:	f025 0503 	bic.w	r5, r5, #3
 801598e:	3508      	adds	r5, #8
 8015990:	2d0c      	cmp	r5, #12
 8015992:	bf38      	it	cc
 8015994:	250c      	movcc	r5, #12
 8015996:	2d00      	cmp	r5, #0
 8015998:	4606      	mov	r6, r0
 801599a:	db01      	blt.n	80159a0 <_malloc_r+0x1c>
 801599c:	42a9      	cmp	r1, r5
 801599e:	d904      	bls.n	80159aa <_malloc_r+0x26>
 80159a0:	230c      	movs	r3, #12
 80159a2:	6033      	str	r3, [r6, #0]
 80159a4:	2000      	movs	r0, #0
 80159a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015a80 <_malloc_r+0xfc>
 80159ae:	f000 f869 	bl	8015a84 <__malloc_lock>
 80159b2:	f8d8 3000 	ldr.w	r3, [r8]
 80159b6:	461c      	mov	r4, r3
 80159b8:	bb44      	cbnz	r4, 8015a0c <_malloc_r+0x88>
 80159ba:	4629      	mov	r1, r5
 80159bc:	4630      	mov	r0, r6
 80159be:	f7ff ffbf 	bl	8015940 <sbrk_aligned>
 80159c2:	1c43      	adds	r3, r0, #1
 80159c4:	4604      	mov	r4, r0
 80159c6:	d158      	bne.n	8015a7a <_malloc_r+0xf6>
 80159c8:	f8d8 4000 	ldr.w	r4, [r8]
 80159cc:	4627      	mov	r7, r4
 80159ce:	2f00      	cmp	r7, #0
 80159d0:	d143      	bne.n	8015a5a <_malloc_r+0xd6>
 80159d2:	2c00      	cmp	r4, #0
 80159d4:	d04b      	beq.n	8015a6e <_malloc_r+0xea>
 80159d6:	6823      	ldr	r3, [r4, #0]
 80159d8:	4639      	mov	r1, r7
 80159da:	4630      	mov	r0, r6
 80159dc:	eb04 0903 	add.w	r9, r4, r3
 80159e0:	f000 fdc4 	bl	801656c <_sbrk_r>
 80159e4:	4581      	cmp	r9, r0
 80159e6:	d142      	bne.n	8015a6e <_malloc_r+0xea>
 80159e8:	6821      	ldr	r1, [r4, #0]
 80159ea:	1a6d      	subs	r5, r5, r1
 80159ec:	4629      	mov	r1, r5
 80159ee:	4630      	mov	r0, r6
 80159f0:	f7ff ffa6 	bl	8015940 <sbrk_aligned>
 80159f4:	3001      	adds	r0, #1
 80159f6:	d03a      	beq.n	8015a6e <_malloc_r+0xea>
 80159f8:	6823      	ldr	r3, [r4, #0]
 80159fa:	442b      	add	r3, r5
 80159fc:	6023      	str	r3, [r4, #0]
 80159fe:	f8d8 3000 	ldr.w	r3, [r8]
 8015a02:	685a      	ldr	r2, [r3, #4]
 8015a04:	bb62      	cbnz	r2, 8015a60 <_malloc_r+0xdc>
 8015a06:	f8c8 7000 	str.w	r7, [r8]
 8015a0a:	e00f      	b.n	8015a2c <_malloc_r+0xa8>
 8015a0c:	6822      	ldr	r2, [r4, #0]
 8015a0e:	1b52      	subs	r2, r2, r5
 8015a10:	d420      	bmi.n	8015a54 <_malloc_r+0xd0>
 8015a12:	2a0b      	cmp	r2, #11
 8015a14:	d917      	bls.n	8015a46 <_malloc_r+0xc2>
 8015a16:	1961      	adds	r1, r4, r5
 8015a18:	42a3      	cmp	r3, r4
 8015a1a:	6025      	str	r5, [r4, #0]
 8015a1c:	bf18      	it	ne
 8015a1e:	6059      	strne	r1, [r3, #4]
 8015a20:	6863      	ldr	r3, [r4, #4]
 8015a22:	bf08      	it	eq
 8015a24:	f8c8 1000 	streq.w	r1, [r8]
 8015a28:	5162      	str	r2, [r4, r5]
 8015a2a:	604b      	str	r3, [r1, #4]
 8015a2c:	4630      	mov	r0, r6
 8015a2e:	f000 f82f 	bl	8015a90 <__malloc_unlock>
 8015a32:	f104 000b 	add.w	r0, r4, #11
 8015a36:	1d23      	adds	r3, r4, #4
 8015a38:	f020 0007 	bic.w	r0, r0, #7
 8015a3c:	1ac2      	subs	r2, r0, r3
 8015a3e:	bf1c      	itt	ne
 8015a40:	1a1b      	subne	r3, r3, r0
 8015a42:	50a3      	strne	r3, [r4, r2]
 8015a44:	e7af      	b.n	80159a6 <_malloc_r+0x22>
 8015a46:	6862      	ldr	r2, [r4, #4]
 8015a48:	42a3      	cmp	r3, r4
 8015a4a:	bf0c      	ite	eq
 8015a4c:	f8c8 2000 	streq.w	r2, [r8]
 8015a50:	605a      	strne	r2, [r3, #4]
 8015a52:	e7eb      	b.n	8015a2c <_malloc_r+0xa8>
 8015a54:	4623      	mov	r3, r4
 8015a56:	6864      	ldr	r4, [r4, #4]
 8015a58:	e7ae      	b.n	80159b8 <_malloc_r+0x34>
 8015a5a:	463c      	mov	r4, r7
 8015a5c:	687f      	ldr	r7, [r7, #4]
 8015a5e:	e7b6      	b.n	80159ce <_malloc_r+0x4a>
 8015a60:	461a      	mov	r2, r3
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	42a3      	cmp	r3, r4
 8015a66:	d1fb      	bne.n	8015a60 <_malloc_r+0xdc>
 8015a68:	2300      	movs	r3, #0
 8015a6a:	6053      	str	r3, [r2, #4]
 8015a6c:	e7de      	b.n	8015a2c <_malloc_r+0xa8>
 8015a6e:	230c      	movs	r3, #12
 8015a70:	6033      	str	r3, [r6, #0]
 8015a72:	4630      	mov	r0, r6
 8015a74:	f000 f80c 	bl	8015a90 <__malloc_unlock>
 8015a78:	e794      	b.n	80159a4 <_malloc_r+0x20>
 8015a7a:	6005      	str	r5, [r0, #0]
 8015a7c:	e7d6      	b.n	8015a2c <_malloc_r+0xa8>
 8015a7e:	bf00      	nop
 8015a80:	2001745c 	.word	0x2001745c

08015a84 <__malloc_lock>:
 8015a84:	4801      	ldr	r0, [pc, #4]	@ (8015a8c <__malloc_lock+0x8>)
 8015a86:	f7ff bed2 	b.w	801582e <__retarget_lock_acquire_recursive>
 8015a8a:	bf00      	nop
 8015a8c:	20017454 	.word	0x20017454

08015a90 <__malloc_unlock>:
 8015a90:	4801      	ldr	r0, [pc, #4]	@ (8015a98 <__malloc_unlock+0x8>)
 8015a92:	f7ff becd 	b.w	8015830 <__retarget_lock_release_recursive>
 8015a96:	bf00      	nop
 8015a98:	20017454 	.word	0x20017454

08015a9c <__ssputs_r>:
 8015a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015aa0:	688e      	ldr	r6, [r1, #8]
 8015aa2:	461f      	mov	r7, r3
 8015aa4:	42be      	cmp	r6, r7
 8015aa6:	680b      	ldr	r3, [r1, #0]
 8015aa8:	4682      	mov	sl, r0
 8015aaa:	460c      	mov	r4, r1
 8015aac:	4690      	mov	r8, r2
 8015aae:	d82d      	bhi.n	8015b0c <__ssputs_r+0x70>
 8015ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015ab8:	d026      	beq.n	8015b08 <__ssputs_r+0x6c>
 8015aba:	6965      	ldr	r5, [r4, #20]
 8015abc:	6909      	ldr	r1, [r1, #16]
 8015abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ac2:	eba3 0901 	sub.w	r9, r3, r1
 8015ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015aca:	1c7b      	adds	r3, r7, #1
 8015acc:	444b      	add	r3, r9
 8015ace:	106d      	asrs	r5, r5, #1
 8015ad0:	429d      	cmp	r5, r3
 8015ad2:	bf38      	it	cc
 8015ad4:	461d      	movcc	r5, r3
 8015ad6:	0553      	lsls	r3, r2, #21
 8015ad8:	d527      	bpl.n	8015b2a <__ssputs_r+0x8e>
 8015ada:	4629      	mov	r1, r5
 8015adc:	f7ff ff52 	bl	8015984 <_malloc_r>
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	b360      	cbz	r0, 8015b3e <__ssputs_r+0xa2>
 8015ae4:	6921      	ldr	r1, [r4, #16]
 8015ae6:	464a      	mov	r2, r9
 8015ae8:	f7ff feab 	bl	8015842 <memcpy>
 8015aec:	89a3      	ldrh	r3, [r4, #12]
 8015aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015af6:	81a3      	strh	r3, [r4, #12]
 8015af8:	6126      	str	r6, [r4, #16]
 8015afa:	6165      	str	r5, [r4, #20]
 8015afc:	444e      	add	r6, r9
 8015afe:	eba5 0509 	sub.w	r5, r5, r9
 8015b02:	6026      	str	r6, [r4, #0]
 8015b04:	60a5      	str	r5, [r4, #8]
 8015b06:	463e      	mov	r6, r7
 8015b08:	42be      	cmp	r6, r7
 8015b0a:	d900      	bls.n	8015b0e <__ssputs_r+0x72>
 8015b0c:	463e      	mov	r6, r7
 8015b0e:	6820      	ldr	r0, [r4, #0]
 8015b10:	4632      	mov	r2, r6
 8015b12:	4641      	mov	r1, r8
 8015b14:	f7ff fd7a 	bl	801560c <memmove>
 8015b18:	68a3      	ldr	r3, [r4, #8]
 8015b1a:	1b9b      	subs	r3, r3, r6
 8015b1c:	60a3      	str	r3, [r4, #8]
 8015b1e:	6823      	ldr	r3, [r4, #0]
 8015b20:	4433      	add	r3, r6
 8015b22:	6023      	str	r3, [r4, #0]
 8015b24:	2000      	movs	r0, #0
 8015b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b2a:	462a      	mov	r2, r5
 8015b2c:	f000 fd35 	bl	801659a <_realloc_r>
 8015b30:	4606      	mov	r6, r0
 8015b32:	2800      	cmp	r0, #0
 8015b34:	d1e0      	bne.n	8015af8 <__ssputs_r+0x5c>
 8015b36:	6921      	ldr	r1, [r4, #16]
 8015b38:	4650      	mov	r0, sl
 8015b3a:	f7ff feaf 	bl	801589c <_free_r>
 8015b3e:	230c      	movs	r3, #12
 8015b40:	f8ca 3000 	str.w	r3, [sl]
 8015b44:	89a3      	ldrh	r3, [r4, #12]
 8015b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b4a:	81a3      	strh	r3, [r4, #12]
 8015b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b50:	e7e9      	b.n	8015b26 <__ssputs_r+0x8a>
	...

08015b54 <_svfiprintf_r>:
 8015b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b58:	4698      	mov	r8, r3
 8015b5a:	898b      	ldrh	r3, [r1, #12]
 8015b5c:	061b      	lsls	r3, r3, #24
 8015b5e:	b09d      	sub	sp, #116	@ 0x74
 8015b60:	4607      	mov	r7, r0
 8015b62:	460d      	mov	r5, r1
 8015b64:	4614      	mov	r4, r2
 8015b66:	d510      	bpl.n	8015b8a <_svfiprintf_r+0x36>
 8015b68:	690b      	ldr	r3, [r1, #16]
 8015b6a:	b973      	cbnz	r3, 8015b8a <_svfiprintf_r+0x36>
 8015b6c:	2140      	movs	r1, #64	@ 0x40
 8015b6e:	f7ff ff09 	bl	8015984 <_malloc_r>
 8015b72:	6028      	str	r0, [r5, #0]
 8015b74:	6128      	str	r0, [r5, #16]
 8015b76:	b930      	cbnz	r0, 8015b86 <_svfiprintf_r+0x32>
 8015b78:	230c      	movs	r3, #12
 8015b7a:	603b      	str	r3, [r7, #0]
 8015b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b80:	b01d      	add	sp, #116	@ 0x74
 8015b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b86:	2340      	movs	r3, #64	@ 0x40
 8015b88:	616b      	str	r3, [r5, #20]
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b8e:	2320      	movs	r3, #32
 8015b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b98:	2330      	movs	r3, #48	@ 0x30
 8015b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015d38 <_svfiprintf_r+0x1e4>
 8015b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015ba2:	f04f 0901 	mov.w	r9, #1
 8015ba6:	4623      	mov	r3, r4
 8015ba8:	469a      	mov	sl, r3
 8015baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bae:	b10a      	cbz	r2, 8015bb4 <_svfiprintf_r+0x60>
 8015bb0:	2a25      	cmp	r2, #37	@ 0x25
 8015bb2:	d1f9      	bne.n	8015ba8 <_svfiprintf_r+0x54>
 8015bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8015bb8:	d00b      	beq.n	8015bd2 <_svfiprintf_r+0x7e>
 8015bba:	465b      	mov	r3, fp
 8015bbc:	4622      	mov	r2, r4
 8015bbe:	4629      	mov	r1, r5
 8015bc0:	4638      	mov	r0, r7
 8015bc2:	f7ff ff6b 	bl	8015a9c <__ssputs_r>
 8015bc6:	3001      	adds	r0, #1
 8015bc8:	f000 80a7 	beq.w	8015d1a <_svfiprintf_r+0x1c6>
 8015bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015bce:	445a      	add	r2, fp
 8015bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	f000 809f 	beq.w	8015d1a <_svfiprintf_r+0x1c6>
 8015bdc:	2300      	movs	r3, #0
 8015bde:	f04f 32ff 	mov.w	r2, #4294967295
 8015be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015be6:	f10a 0a01 	add.w	sl, sl, #1
 8015bea:	9304      	str	r3, [sp, #16]
 8015bec:	9307      	str	r3, [sp, #28]
 8015bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8015bf4:	4654      	mov	r4, sl
 8015bf6:	2205      	movs	r2, #5
 8015bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bfc:	484e      	ldr	r0, [pc, #312]	@ (8015d38 <_svfiprintf_r+0x1e4>)
 8015bfe:	f7ea fb0f 	bl	8000220 <memchr>
 8015c02:	9a04      	ldr	r2, [sp, #16]
 8015c04:	b9d8      	cbnz	r0, 8015c3e <_svfiprintf_r+0xea>
 8015c06:	06d0      	lsls	r0, r2, #27
 8015c08:	bf44      	itt	mi
 8015c0a:	2320      	movmi	r3, #32
 8015c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c10:	0711      	lsls	r1, r2, #28
 8015c12:	bf44      	itt	mi
 8015c14:	232b      	movmi	r3, #43	@ 0x2b
 8015c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8015c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c20:	d015      	beq.n	8015c4e <_svfiprintf_r+0xfa>
 8015c22:	9a07      	ldr	r2, [sp, #28]
 8015c24:	4654      	mov	r4, sl
 8015c26:	2000      	movs	r0, #0
 8015c28:	f04f 0c0a 	mov.w	ip, #10
 8015c2c:	4621      	mov	r1, r4
 8015c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c32:	3b30      	subs	r3, #48	@ 0x30
 8015c34:	2b09      	cmp	r3, #9
 8015c36:	d94b      	bls.n	8015cd0 <_svfiprintf_r+0x17c>
 8015c38:	b1b0      	cbz	r0, 8015c68 <_svfiprintf_r+0x114>
 8015c3a:	9207      	str	r2, [sp, #28]
 8015c3c:	e014      	b.n	8015c68 <_svfiprintf_r+0x114>
 8015c3e:	eba0 0308 	sub.w	r3, r0, r8
 8015c42:	fa09 f303 	lsl.w	r3, r9, r3
 8015c46:	4313      	orrs	r3, r2
 8015c48:	9304      	str	r3, [sp, #16]
 8015c4a:	46a2      	mov	sl, r4
 8015c4c:	e7d2      	b.n	8015bf4 <_svfiprintf_r+0xa0>
 8015c4e:	9b03      	ldr	r3, [sp, #12]
 8015c50:	1d19      	adds	r1, r3, #4
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	9103      	str	r1, [sp, #12]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	bfbb      	ittet	lt
 8015c5a:	425b      	neglt	r3, r3
 8015c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8015c60:	9307      	strge	r3, [sp, #28]
 8015c62:	9307      	strlt	r3, [sp, #28]
 8015c64:	bfb8      	it	lt
 8015c66:	9204      	strlt	r2, [sp, #16]
 8015c68:	7823      	ldrb	r3, [r4, #0]
 8015c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8015c6c:	d10a      	bne.n	8015c84 <_svfiprintf_r+0x130>
 8015c6e:	7863      	ldrb	r3, [r4, #1]
 8015c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c72:	d132      	bne.n	8015cda <_svfiprintf_r+0x186>
 8015c74:	9b03      	ldr	r3, [sp, #12]
 8015c76:	1d1a      	adds	r2, r3, #4
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	9203      	str	r2, [sp, #12]
 8015c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015c80:	3402      	adds	r4, #2
 8015c82:	9305      	str	r3, [sp, #20]
 8015c84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015d48 <_svfiprintf_r+0x1f4>
 8015c88:	7821      	ldrb	r1, [r4, #0]
 8015c8a:	2203      	movs	r2, #3
 8015c8c:	4650      	mov	r0, sl
 8015c8e:	f7ea fac7 	bl	8000220 <memchr>
 8015c92:	b138      	cbz	r0, 8015ca4 <_svfiprintf_r+0x150>
 8015c94:	9b04      	ldr	r3, [sp, #16]
 8015c96:	eba0 000a 	sub.w	r0, r0, sl
 8015c9a:	2240      	movs	r2, #64	@ 0x40
 8015c9c:	4082      	lsls	r2, r0
 8015c9e:	4313      	orrs	r3, r2
 8015ca0:	3401      	adds	r4, #1
 8015ca2:	9304      	str	r3, [sp, #16]
 8015ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ca8:	4824      	ldr	r0, [pc, #144]	@ (8015d3c <_svfiprintf_r+0x1e8>)
 8015caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015cae:	2206      	movs	r2, #6
 8015cb0:	f7ea fab6 	bl	8000220 <memchr>
 8015cb4:	2800      	cmp	r0, #0
 8015cb6:	d036      	beq.n	8015d26 <_svfiprintf_r+0x1d2>
 8015cb8:	4b21      	ldr	r3, [pc, #132]	@ (8015d40 <_svfiprintf_r+0x1ec>)
 8015cba:	bb1b      	cbnz	r3, 8015d04 <_svfiprintf_r+0x1b0>
 8015cbc:	9b03      	ldr	r3, [sp, #12]
 8015cbe:	3307      	adds	r3, #7
 8015cc0:	f023 0307 	bic.w	r3, r3, #7
 8015cc4:	3308      	adds	r3, #8
 8015cc6:	9303      	str	r3, [sp, #12]
 8015cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cca:	4433      	add	r3, r6
 8015ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cce:	e76a      	b.n	8015ba6 <_svfiprintf_r+0x52>
 8015cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8015cd4:	460c      	mov	r4, r1
 8015cd6:	2001      	movs	r0, #1
 8015cd8:	e7a8      	b.n	8015c2c <_svfiprintf_r+0xd8>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	3401      	adds	r4, #1
 8015cde:	9305      	str	r3, [sp, #20]
 8015ce0:	4619      	mov	r1, r3
 8015ce2:	f04f 0c0a 	mov.w	ip, #10
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cec:	3a30      	subs	r2, #48	@ 0x30
 8015cee:	2a09      	cmp	r2, #9
 8015cf0:	d903      	bls.n	8015cfa <_svfiprintf_r+0x1a6>
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d0c6      	beq.n	8015c84 <_svfiprintf_r+0x130>
 8015cf6:	9105      	str	r1, [sp, #20]
 8015cf8:	e7c4      	b.n	8015c84 <_svfiprintf_r+0x130>
 8015cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cfe:	4604      	mov	r4, r0
 8015d00:	2301      	movs	r3, #1
 8015d02:	e7f0      	b.n	8015ce6 <_svfiprintf_r+0x192>
 8015d04:	ab03      	add	r3, sp, #12
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	462a      	mov	r2, r5
 8015d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8015d44 <_svfiprintf_r+0x1f0>)
 8015d0c:	a904      	add	r1, sp, #16
 8015d0e:	4638      	mov	r0, r7
 8015d10:	f3af 8000 	nop.w
 8015d14:	1c42      	adds	r2, r0, #1
 8015d16:	4606      	mov	r6, r0
 8015d18:	d1d6      	bne.n	8015cc8 <_svfiprintf_r+0x174>
 8015d1a:	89ab      	ldrh	r3, [r5, #12]
 8015d1c:	065b      	lsls	r3, r3, #25
 8015d1e:	f53f af2d 	bmi.w	8015b7c <_svfiprintf_r+0x28>
 8015d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d24:	e72c      	b.n	8015b80 <_svfiprintf_r+0x2c>
 8015d26:	ab03      	add	r3, sp, #12
 8015d28:	9300      	str	r3, [sp, #0]
 8015d2a:	462a      	mov	r2, r5
 8015d2c:	4b05      	ldr	r3, [pc, #20]	@ (8015d44 <_svfiprintf_r+0x1f0>)
 8015d2e:	a904      	add	r1, sp, #16
 8015d30:	4638      	mov	r0, r7
 8015d32:	f000 f9bb 	bl	80160ac <_printf_i>
 8015d36:	e7ed      	b.n	8015d14 <_svfiprintf_r+0x1c0>
 8015d38:	0801a46f 	.word	0x0801a46f
 8015d3c:	0801a479 	.word	0x0801a479
 8015d40:	00000000 	.word	0x00000000
 8015d44:	08015a9d 	.word	0x08015a9d
 8015d48:	0801a475 	.word	0x0801a475

08015d4c <__sfputc_r>:
 8015d4c:	6893      	ldr	r3, [r2, #8]
 8015d4e:	3b01      	subs	r3, #1
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	b410      	push	{r4}
 8015d54:	6093      	str	r3, [r2, #8]
 8015d56:	da08      	bge.n	8015d6a <__sfputc_r+0x1e>
 8015d58:	6994      	ldr	r4, [r2, #24]
 8015d5a:	42a3      	cmp	r3, r4
 8015d5c:	db01      	blt.n	8015d62 <__sfputc_r+0x16>
 8015d5e:	290a      	cmp	r1, #10
 8015d60:	d103      	bne.n	8015d6a <__sfputc_r+0x1e>
 8015d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d66:	f7ff bbac 	b.w	80154c2 <__swbuf_r>
 8015d6a:	6813      	ldr	r3, [r2, #0]
 8015d6c:	1c58      	adds	r0, r3, #1
 8015d6e:	6010      	str	r0, [r2, #0]
 8015d70:	7019      	strb	r1, [r3, #0]
 8015d72:	4608      	mov	r0, r1
 8015d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d78:	4770      	bx	lr

08015d7a <__sfputs_r>:
 8015d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d7c:	4606      	mov	r6, r0
 8015d7e:	460f      	mov	r7, r1
 8015d80:	4614      	mov	r4, r2
 8015d82:	18d5      	adds	r5, r2, r3
 8015d84:	42ac      	cmp	r4, r5
 8015d86:	d101      	bne.n	8015d8c <__sfputs_r+0x12>
 8015d88:	2000      	movs	r0, #0
 8015d8a:	e007      	b.n	8015d9c <__sfputs_r+0x22>
 8015d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d90:	463a      	mov	r2, r7
 8015d92:	4630      	mov	r0, r6
 8015d94:	f7ff ffda 	bl	8015d4c <__sfputc_r>
 8015d98:	1c43      	adds	r3, r0, #1
 8015d9a:	d1f3      	bne.n	8015d84 <__sfputs_r+0xa>
 8015d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015da0 <_vfiprintf_r>:
 8015da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da4:	460d      	mov	r5, r1
 8015da6:	b09d      	sub	sp, #116	@ 0x74
 8015da8:	4614      	mov	r4, r2
 8015daa:	4698      	mov	r8, r3
 8015dac:	4606      	mov	r6, r0
 8015dae:	b118      	cbz	r0, 8015db8 <_vfiprintf_r+0x18>
 8015db0:	6a03      	ldr	r3, [r0, #32]
 8015db2:	b90b      	cbnz	r3, 8015db8 <_vfiprintf_r+0x18>
 8015db4:	f7ff fa66 	bl	8015284 <__sinit>
 8015db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015dba:	07d9      	lsls	r1, r3, #31
 8015dbc:	d405      	bmi.n	8015dca <_vfiprintf_r+0x2a>
 8015dbe:	89ab      	ldrh	r3, [r5, #12]
 8015dc0:	059a      	lsls	r2, r3, #22
 8015dc2:	d402      	bmi.n	8015dca <_vfiprintf_r+0x2a>
 8015dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015dc6:	f7ff fd32 	bl	801582e <__retarget_lock_acquire_recursive>
 8015dca:	89ab      	ldrh	r3, [r5, #12]
 8015dcc:	071b      	lsls	r3, r3, #28
 8015dce:	d501      	bpl.n	8015dd4 <_vfiprintf_r+0x34>
 8015dd0:	692b      	ldr	r3, [r5, #16]
 8015dd2:	b99b      	cbnz	r3, 8015dfc <_vfiprintf_r+0x5c>
 8015dd4:	4629      	mov	r1, r5
 8015dd6:	4630      	mov	r0, r6
 8015dd8:	f7ff fbb2 	bl	8015540 <__swsetup_r>
 8015ddc:	b170      	cbz	r0, 8015dfc <_vfiprintf_r+0x5c>
 8015dde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015de0:	07dc      	lsls	r4, r3, #31
 8015de2:	d504      	bpl.n	8015dee <_vfiprintf_r+0x4e>
 8015de4:	f04f 30ff 	mov.w	r0, #4294967295
 8015de8:	b01d      	add	sp, #116	@ 0x74
 8015dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dee:	89ab      	ldrh	r3, [r5, #12]
 8015df0:	0598      	lsls	r0, r3, #22
 8015df2:	d4f7      	bmi.n	8015de4 <_vfiprintf_r+0x44>
 8015df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015df6:	f7ff fd1b 	bl	8015830 <__retarget_lock_release_recursive>
 8015dfa:	e7f3      	b.n	8015de4 <_vfiprintf_r+0x44>
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e00:	2320      	movs	r3, #32
 8015e02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e0a:	2330      	movs	r3, #48	@ 0x30
 8015e0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015fbc <_vfiprintf_r+0x21c>
 8015e10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015e14:	f04f 0901 	mov.w	r9, #1
 8015e18:	4623      	mov	r3, r4
 8015e1a:	469a      	mov	sl, r3
 8015e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e20:	b10a      	cbz	r2, 8015e26 <_vfiprintf_r+0x86>
 8015e22:	2a25      	cmp	r2, #37	@ 0x25
 8015e24:	d1f9      	bne.n	8015e1a <_vfiprintf_r+0x7a>
 8015e26:	ebba 0b04 	subs.w	fp, sl, r4
 8015e2a:	d00b      	beq.n	8015e44 <_vfiprintf_r+0xa4>
 8015e2c:	465b      	mov	r3, fp
 8015e2e:	4622      	mov	r2, r4
 8015e30:	4629      	mov	r1, r5
 8015e32:	4630      	mov	r0, r6
 8015e34:	f7ff ffa1 	bl	8015d7a <__sfputs_r>
 8015e38:	3001      	adds	r0, #1
 8015e3a:	f000 80a7 	beq.w	8015f8c <_vfiprintf_r+0x1ec>
 8015e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e40:	445a      	add	r2, fp
 8015e42:	9209      	str	r2, [sp, #36]	@ 0x24
 8015e44:	f89a 3000 	ldrb.w	r3, [sl]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	f000 809f 	beq.w	8015f8c <_vfiprintf_r+0x1ec>
 8015e4e:	2300      	movs	r3, #0
 8015e50:	f04f 32ff 	mov.w	r2, #4294967295
 8015e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e58:	f10a 0a01 	add.w	sl, sl, #1
 8015e5c:	9304      	str	r3, [sp, #16]
 8015e5e:	9307      	str	r3, [sp, #28]
 8015e60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015e64:	931a      	str	r3, [sp, #104]	@ 0x68
 8015e66:	4654      	mov	r4, sl
 8015e68:	2205      	movs	r2, #5
 8015e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e6e:	4853      	ldr	r0, [pc, #332]	@ (8015fbc <_vfiprintf_r+0x21c>)
 8015e70:	f7ea f9d6 	bl	8000220 <memchr>
 8015e74:	9a04      	ldr	r2, [sp, #16]
 8015e76:	b9d8      	cbnz	r0, 8015eb0 <_vfiprintf_r+0x110>
 8015e78:	06d1      	lsls	r1, r2, #27
 8015e7a:	bf44      	itt	mi
 8015e7c:	2320      	movmi	r3, #32
 8015e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e82:	0713      	lsls	r3, r2, #28
 8015e84:	bf44      	itt	mi
 8015e86:	232b      	movmi	r3, #43	@ 0x2b
 8015e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e92:	d015      	beq.n	8015ec0 <_vfiprintf_r+0x120>
 8015e94:	9a07      	ldr	r2, [sp, #28]
 8015e96:	4654      	mov	r4, sl
 8015e98:	2000      	movs	r0, #0
 8015e9a:	f04f 0c0a 	mov.w	ip, #10
 8015e9e:	4621      	mov	r1, r4
 8015ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ea4:	3b30      	subs	r3, #48	@ 0x30
 8015ea6:	2b09      	cmp	r3, #9
 8015ea8:	d94b      	bls.n	8015f42 <_vfiprintf_r+0x1a2>
 8015eaa:	b1b0      	cbz	r0, 8015eda <_vfiprintf_r+0x13a>
 8015eac:	9207      	str	r2, [sp, #28]
 8015eae:	e014      	b.n	8015eda <_vfiprintf_r+0x13a>
 8015eb0:	eba0 0308 	sub.w	r3, r0, r8
 8015eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8015eb8:	4313      	orrs	r3, r2
 8015eba:	9304      	str	r3, [sp, #16]
 8015ebc:	46a2      	mov	sl, r4
 8015ebe:	e7d2      	b.n	8015e66 <_vfiprintf_r+0xc6>
 8015ec0:	9b03      	ldr	r3, [sp, #12]
 8015ec2:	1d19      	adds	r1, r3, #4
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	9103      	str	r1, [sp, #12]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	bfbb      	ittet	lt
 8015ecc:	425b      	neglt	r3, r3
 8015ece:	f042 0202 	orrlt.w	r2, r2, #2
 8015ed2:	9307      	strge	r3, [sp, #28]
 8015ed4:	9307      	strlt	r3, [sp, #28]
 8015ed6:	bfb8      	it	lt
 8015ed8:	9204      	strlt	r2, [sp, #16]
 8015eda:	7823      	ldrb	r3, [r4, #0]
 8015edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8015ede:	d10a      	bne.n	8015ef6 <_vfiprintf_r+0x156>
 8015ee0:	7863      	ldrb	r3, [r4, #1]
 8015ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8015ee4:	d132      	bne.n	8015f4c <_vfiprintf_r+0x1ac>
 8015ee6:	9b03      	ldr	r3, [sp, #12]
 8015ee8:	1d1a      	adds	r2, r3, #4
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	9203      	str	r2, [sp, #12]
 8015eee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015ef2:	3402      	adds	r4, #2
 8015ef4:	9305      	str	r3, [sp, #20]
 8015ef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015fcc <_vfiprintf_r+0x22c>
 8015efa:	7821      	ldrb	r1, [r4, #0]
 8015efc:	2203      	movs	r2, #3
 8015efe:	4650      	mov	r0, sl
 8015f00:	f7ea f98e 	bl	8000220 <memchr>
 8015f04:	b138      	cbz	r0, 8015f16 <_vfiprintf_r+0x176>
 8015f06:	9b04      	ldr	r3, [sp, #16]
 8015f08:	eba0 000a 	sub.w	r0, r0, sl
 8015f0c:	2240      	movs	r2, #64	@ 0x40
 8015f0e:	4082      	lsls	r2, r0
 8015f10:	4313      	orrs	r3, r2
 8015f12:	3401      	adds	r4, #1
 8015f14:	9304      	str	r3, [sp, #16]
 8015f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f1a:	4829      	ldr	r0, [pc, #164]	@ (8015fc0 <_vfiprintf_r+0x220>)
 8015f1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015f20:	2206      	movs	r2, #6
 8015f22:	f7ea f97d 	bl	8000220 <memchr>
 8015f26:	2800      	cmp	r0, #0
 8015f28:	d03f      	beq.n	8015faa <_vfiprintf_r+0x20a>
 8015f2a:	4b26      	ldr	r3, [pc, #152]	@ (8015fc4 <_vfiprintf_r+0x224>)
 8015f2c:	bb1b      	cbnz	r3, 8015f76 <_vfiprintf_r+0x1d6>
 8015f2e:	9b03      	ldr	r3, [sp, #12]
 8015f30:	3307      	adds	r3, #7
 8015f32:	f023 0307 	bic.w	r3, r3, #7
 8015f36:	3308      	adds	r3, #8
 8015f38:	9303      	str	r3, [sp, #12]
 8015f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f3c:	443b      	add	r3, r7
 8015f3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f40:	e76a      	b.n	8015e18 <_vfiprintf_r+0x78>
 8015f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f46:	460c      	mov	r4, r1
 8015f48:	2001      	movs	r0, #1
 8015f4a:	e7a8      	b.n	8015e9e <_vfiprintf_r+0xfe>
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	3401      	adds	r4, #1
 8015f50:	9305      	str	r3, [sp, #20]
 8015f52:	4619      	mov	r1, r3
 8015f54:	f04f 0c0a 	mov.w	ip, #10
 8015f58:	4620      	mov	r0, r4
 8015f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f5e:	3a30      	subs	r2, #48	@ 0x30
 8015f60:	2a09      	cmp	r2, #9
 8015f62:	d903      	bls.n	8015f6c <_vfiprintf_r+0x1cc>
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d0c6      	beq.n	8015ef6 <_vfiprintf_r+0x156>
 8015f68:	9105      	str	r1, [sp, #20]
 8015f6a:	e7c4      	b.n	8015ef6 <_vfiprintf_r+0x156>
 8015f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f70:	4604      	mov	r4, r0
 8015f72:	2301      	movs	r3, #1
 8015f74:	e7f0      	b.n	8015f58 <_vfiprintf_r+0x1b8>
 8015f76:	ab03      	add	r3, sp, #12
 8015f78:	9300      	str	r3, [sp, #0]
 8015f7a:	462a      	mov	r2, r5
 8015f7c:	4b12      	ldr	r3, [pc, #72]	@ (8015fc8 <_vfiprintf_r+0x228>)
 8015f7e:	a904      	add	r1, sp, #16
 8015f80:	4630      	mov	r0, r6
 8015f82:	f3af 8000 	nop.w
 8015f86:	4607      	mov	r7, r0
 8015f88:	1c78      	adds	r0, r7, #1
 8015f8a:	d1d6      	bne.n	8015f3a <_vfiprintf_r+0x19a>
 8015f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f8e:	07d9      	lsls	r1, r3, #31
 8015f90:	d405      	bmi.n	8015f9e <_vfiprintf_r+0x1fe>
 8015f92:	89ab      	ldrh	r3, [r5, #12]
 8015f94:	059a      	lsls	r2, r3, #22
 8015f96:	d402      	bmi.n	8015f9e <_vfiprintf_r+0x1fe>
 8015f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f9a:	f7ff fc49 	bl	8015830 <__retarget_lock_release_recursive>
 8015f9e:	89ab      	ldrh	r3, [r5, #12]
 8015fa0:	065b      	lsls	r3, r3, #25
 8015fa2:	f53f af1f 	bmi.w	8015de4 <_vfiprintf_r+0x44>
 8015fa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015fa8:	e71e      	b.n	8015de8 <_vfiprintf_r+0x48>
 8015faa:	ab03      	add	r3, sp, #12
 8015fac:	9300      	str	r3, [sp, #0]
 8015fae:	462a      	mov	r2, r5
 8015fb0:	4b05      	ldr	r3, [pc, #20]	@ (8015fc8 <_vfiprintf_r+0x228>)
 8015fb2:	a904      	add	r1, sp, #16
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	f000 f879 	bl	80160ac <_printf_i>
 8015fba:	e7e4      	b.n	8015f86 <_vfiprintf_r+0x1e6>
 8015fbc:	0801a46f 	.word	0x0801a46f
 8015fc0:	0801a479 	.word	0x0801a479
 8015fc4:	00000000 	.word	0x00000000
 8015fc8:	08015d7b 	.word	0x08015d7b
 8015fcc:	0801a475 	.word	0x0801a475

08015fd0 <_printf_common>:
 8015fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fd4:	4616      	mov	r6, r2
 8015fd6:	4698      	mov	r8, r3
 8015fd8:	688a      	ldr	r2, [r1, #8]
 8015fda:	690b      	ldr	r3, [r1, #16]
 8015fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	bfb8      	it	lt
 8015fe4:	4613      	movlt	r3, r2
 8015fe6:	6033      	str	r3, [r6, #0]
 8015fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015fec:	4607      	mov	r7, r0
 8015fee:	460c      	mov	r4, r1
 8015ff0:	b10a      	cbz	r2, 8015ff6 <_printf_common+0x26>
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	6033      	str	r3, [r6, #0]
 8015ff6:	6823      	ldr	r3, [r4, #0]
 8015ff8:	0699      	lsls	r1, r3, #26
 8015ffa:	bf42      	ittt	mi
 8015ffc:	6833      	ldrmi	r3, [r6, #0]
 8015ffe:	3302      	addmi	r3, #2
 8016000:	6033      	strmi	r3, [r6, #0]
 8016002:	6825      	ldr	r5, [r4, #0]
 8016004:	f015 0506 	ands.w	r5, r5, #6
 8016008:	d106      	bne.n	8016018 <_printf_common+0x48>
 801600a:	f104 0a19 	add.w	sl, r4, #25
 801600e:	68e3      	ldr	r3, [r4, #12]
 8016010:	6832      	ldr	r2, [r6, #0]
 8016012:	1a9b      	subs	r3, r3, r2
 8016014:	42ab      	cmp	r3, r5
 8016016:	dc26      	bgt.n	8016066 <_printf_common+0x96>
 8016018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801601c:	6822      	ldr	r2, [r4, #0]
 801601e:	3b00      	subs	r3, #0
 8016020:	bf18      	it	ne
 8016022:	2301      	movne	r3, #1
 8016024:	0692      	lsls	r2, r2, #26
 8016026:	d42b      	bmi.n	8016080 <_printf_common+0xb0>
 8016028:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801602c:	4641      	mov	r1, r8
 801602e:	4638      	mov	r0, r7
 8016030:	47c8      	blx	r9
 8016032:	3001      	adds	r0, #1
 8016034:	d01e      	beq.n	8016074 <_printf_common+0xa4>
 8016036:	6823      	ldr	r3, [r4, #0]
 8016038:	6922      	ldr	r2, [r4, #16]
 801603a:	f003 0306 	and.w	r3, r3, #6
 801603e:	2b04      	cmp	r3, #4
 8016040:	bf02      	ittt	eq
 8016042:	68e5      	ldreq	r5, [r4, #12]
 8016044:	6833      	ldreq	r3, [r6, #0]
 8016046:	1aed      	subeq	r5, r5, r3
 8016048:	68a3      	ldr	r3, [r4, #8]
 801604a:	bf0c      	ite	eq
 801604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016050:	2500      	movne	r5, #0
 8016052:	4293      	cmp	r3, r2
 8016054:	bfc4      	itt	gt
 8016056:	1a9b      	subgt	r3, r3, r2
 8016058:	18ed      	addgt	r5, r5, r3
 801605a:	2600      	movs	r6, #0
 801605c:	341a      	adds	r4, #26
 801605e:	42b5      	cmp	r5, r6
 8016060:	d11a      	bne.n	8016098 <_printf_common+0xc8>
 8016062:	2000      	movs	r0, #0
 8016064:	e008      	b.n	8016078 <_printf_common+0xa8>
 8016066:	2301      	movs	r3, #1
 8016068:	4652      	mov	r2, sl
 801606a:	4641      	mov	r1, r8
 801606c:	4638      	mov	r0, r7
 801606e:	47c8      	blx	r9
 8016070:	3001      	adds	r0, #1
 8016072:	d103      	bne.n	801607c <_printf_common+0xac>
 8016074:	f04f 30ff 	mov.w	r0, #4294967295
 8016078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801607c:	3501      	adds	r5, #1
 801607e:	e7c6      	b.n	801600e <_printf_common+0x3e>
 8016080:	18e1      	adds	r1, r4, r3
 8016082:	1c5a      	adds	r2, r3, #1
 8016084:	2030      	movs	r0, #48	@ 0x30
 8016086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801608a:	4422      	add	r2, r4
 801608c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016094:	3302      	adds	r3, #2
 8016096:	e7c7      	b.n	8016028 <_printf_common+0x58>
 8016098:	2301      	movs	r3, #1
 801609a:	4622      	mov	r2, r4
 801609c:	4641      	mov	r1, r8
 801609e:	4638      	mov	r0, r7
 80160a0:	47c8      	blx	r9
 80160a2:	3001      	adds	r0, #1
 80160a4:	d0e6      	beq.n	8016074 <_printf_common+0xa4>
 80160a6:	3601      	adds	r6, #1
 80160a8:	e7d9      	b.n	801605e <_printf_common+0x8e>
	...

080160ac <_printf_i>:
 80160ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160b0:	7e0f      	ldrb	r7, [r1, #24]
 80160b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80160b4:	2f78      	cmp	r7, #120	@ 0x78
 80160b6:	4691      	mov	r9, r2
 80160b8:	4680      	mov	r8, r0
 80160ba:	460c      	mov	r4, r1
 80160bc:	469a      	mov	sl, r3
 80160be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80160c2:	d807      	bhi.n	80160d4 <_printf_i+0x28>
 80160c4:	2f62      	cmp	r7, #98	@ 0x62
 80160c6:	d80a      	bhi.n	80160de <_printf_i+0x32>
 80160c8:	2f00      	cmp	r7, #0
 80160ca:	f000 80d1 	beq.w	8016270 <_printf_i+0x1c4>
 80160ce:	2f58      	cmp	r7, #88	@ 0x58
 80160d0:	f000 80b8 	beq.w	8016244 <_printf_i+0x198>
 80160d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80160d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80160dc:	e03a      	b.n	8016154 <_printf_i+0xa8>
 80160de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80160e2:	2b15      	cmp	r3, #21
 80160e4:	d8f6      	bhi.n	80160d4 <_printf_i+0x28>
 80160e6:	a101      	add	r1, pc, #4	@ (adr r1, 80160ec <_printf_i+0x40>)
 80160e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80160ec:	08016145 	.word	0x08016145
 80160f0:	08016159 	.word	0x08016159
 80160f4:	080160d5 	.word	0x080160d5
 80160f8:	080160d5 	.word	0x080160d5
 80160fc:	080160d5 	.word	0x080160d5
 8016100:	080160d5 	.word	0x080160d5
 8016104:	08016159 	.word	0x08016159
 8016108:	080160d5 	.word	0x080160d5
 801610c:	080160d5 	.word	0x080160d5
 8016110:	080160d5 	.word	0x080160d5
 8016114:	080160d5 	.word	0x080160d5
 8016118:	08016257 	.word	0x08016257
 801611c:	08016183 	.word	0x08016183
 8016120:	08016211 	.word	0x08016211
 8016124:	080160d5 	.word	0x080160d5
 8016128:	080160d5 	.word	0x080160d5
 801612c:	08016279 	.word	0x08016279
 8016130:	080160d5 	.word	0x080160d5
 8016134:	08016183 	.word	0x08016183
 8016138:	080160d5 	.word	0x080160d5
 801613c:	080160d5 	.word	0x080160d5
 8016140:	08016219 	.word	0x08016219
 8016144:	6833      	ldr	r3, [r6, #0]
 8016146:	1d1a      	adds	r2, r3, #4
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	6032      	str	r2, [r6, #0]
 801614c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016154:	2301      	movs	r3, #1
 8016156:	e09c      	b.n	8016292 <_printf_i+0x1e6>
 8016158:	6833      	ldr	r3, [r6, #0]
 801615a:	6820      	ldr	r0, [r4, #0]
 801615c:	1d19      	adds	r1, r3, #4
 801615e:	6031      	str	r1, [r6, #0]
 8016160:	0606      	lsls	r6, r0, #24
 8016162:	d501      	bpl.n	8016168 <_printf_i+0xbc>
 8016164:	681d      	ldr	r5, [r3, #0]
 8016166:	e003      	b.n	8016170 <_printf_i+0xc4>
 8016168:	0645      	lsls	r5, r0, #25
 801616a:	d5fb      	bpl.n	8016164 <_printf_i+0xb8>
 801616c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016170:	2d00      	cmp	r5, #0
 8016172:	da03      	bge.n	801617c <_printf_i+0xd0>
 8016174:	232d      	movs	r3, #45	@ 0x2d
 8016176:	426d      	negs	r5, r5
 8016178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801617c:	4858      	ldr	r0, [pc, #352]	@ (80162e0 <_printf_i+0x234>)
 801617e:	230a      	movs	r3, #10
 8016180:	e011      	b.n	80161a6 <_printf_i+0xfa>
 8016182:	6821      	ldr	r1, [r4, #0]
 8016184:	6833      	ldr	r3, [r6, #0]
 8016186:	0608      	lsls	r0, r1, #24
 8016188:	f853 5b04 	ldr.w	r5, [r3], #4
 801618c:	d402      	bmi.n	8016194 <_printf_i+0xe8>
 801618e:	0649      	lsls	r1, r1, #25
 8016190:	bf48      	it	mi
 8016192:	b2ad      	uxthmi	r5, r5
 8016194:	2f6f      	cmp	r7, #111	@ 0x6f
 8016196:	4852      	ldr	r0, [pc, #328]	@ (80162e0 <_printf_i+0x234>)
 8016198:	6033      	str	r3, [r6, #0]
 801619a:	bf14      	ite	ne
 801619c:	230a      	movne	r3, #10
 801619e:	2308      	moveq	r3, #8
 80161a0:	2100      	movs	r1, #0
 80161a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80161a6:	6866      	ldr	r6, [r4, #4]
 80161a8:	60a6      	str	r6, [r4, #8]
 80161aa:	2e00      	cmp	r6, #0
 80161ac:	db05      	blt.n	80161ba <_printf_i+0x10e>
 80161ae:	6821      	ldr	r1, [r4, #0]
 80161b0:	432e      	orrs	r6, r5
 80161b2:	f021 0104 	bic.w	r1, r1, #4
 80161b6:	6021      	str	r1, [r4, #0]
 80161b8:	d04b      	beq.n	8016252 <_printf_i+0x1a6>
 80161ba:	4616      	mov	r6, r2
 80161bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80161c0:	fb03 5711 	mls	r7, r3, r1, r5
 80161c4:	5dc7      	ldrb	r7, [r0, r7]
 80161c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80161ca:	462f      	mov	r7, r5
 80161cc:	42bb      	cmp	r3, r7
 80161ce:	460d      	mov	r5, r1
 80161d0:	d9f4      	bls.n	80161bc <_printf_i+0x110>
 80161d2:	2b08      	cmp	r3, #8
 80161d4:	d10b      	bne.n	80161ee <_printf_i+0x142>
 80161d6:	6823      	ldr	r3, [r4, #0]
 80161d8:	07df      	lsls	r7, r3, #31
 80161da:	d508      	bpl.n	80161ee <_printf_i+0x142>
 80161dc:	6923      	ldr	r3, [r4, #16]
 80161de:	6861      	ldr	r1, [r4, #4]
 80161e0:	4299      	cmp	r1, r3
 80161e2:	bfde      	ittt	le
 80161e4:	2330      	movle	r3, #48	@ 0x30
 80161e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80161ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80161ee:	1b92      	subs	r2, r2, r6
 80161f0:	6122      	str	r2, [r4, #16]
 80161f2:	f8cd a000 	str.w	sl, [sp]
 80161f6:	464b      	mov	r3, r9
 80161f8:	aa03      	add	r2, sp, #12
 80161fa:	4621      	mov	r1, r4
 80161fc:	4640      	mov	r0, r8
 80161fe:	f7ff fee7 	bl	8015fd0 <_printf_common>
 8016202:	3001      	adds	r0, #1
 8016204:	d14a      	bne.n	801629c <_printf_i+0x1f0>
 8016206:	f04f 30ff 	mov.w	r0, #4294967295
 801620a:	b004      	add	sp, #16
 801620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016210:	6823      	ldr	r3, [r4, #0]
 8016212:	f043 0320 	orr.w	r3, r3, #32
 8016216:	6023      	str	r3, [r4, #0]
 8016218:	4832      	ldr	r0, [pc, #200]	@ (80162e4 <_printf_i+0x238>)
 801621a:	2778      	movs	r7, #120	@ 0x78
 801621c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	6831      	ldr	r1, [r6, #0]
 8016224:	061f      	lsls	r7, r3, #24
 8016226:	f851 5b04 	ldr.w	r5, [r1], #4
 801622a:	d402      	bmi.n	8016232 <_printf_i+0x186>
 801622c:	065f      	lsls	r7, r3, #25
 801622e:	bf48      	it	mi
 8016230:	b2ad      	uxthmi	r5, r5
 8016232:	6031      	str	r1, [r6, #0]
 8016234:	07d9      	lsls	r1, r3, #31
 8016236:	bf44      	itt	mi
 8016238:	f043 0320 	orrmi.w	r3, r3, #32
 801623c:	6023      	strmi	r3, [r4, #0]
 801623e:	b11d      	cbz	r5, 8016248 <_printf_i+0x19c>
 8016240:	2310      	movs	r3, #16
 8016242:	e7ad      	b.n	80161a0 <_printf_i+0xf4>
 8016244:	4826      	ldr	r0, [pc, #152]	@ (80162e0 <_printf_i+0x234>)
 8016246:	e7e9      	b.n	801621c <_printf_i+0x170>
 8016248:	6823      	ldr	r3, [r4, #0]
 801624a:	f023 0320 	bic.w	r3, r3, #32
 801624e:	6023      	str	r3, [r4, #0]
 8016250:	e7f6      	b.n	8016240 <_printf_i+0x194>
 8016252:	4616      	mov	r6, r2
 8016254:	e7bd      	b.n	80161d2 <_printf_i+0x126>
 8016256:	6833      	ldr	r3, [r6, #0]
 8016258:	6825      	ldr	r5, [r4, #0]
 801625a:	6961      	ldr	r1, [r4, #20]
 801625c:	1d18      	adds	r0, r3, #4
 801625e:	6030      	str	r0, [r6, #0]
 8016260:	062e      	lsls	r6, r5, #24
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	d501      	bpl.n	801626a <_printf_i+0x1be>
 8016266:	6019      	str	r1, [r3, #0]
 8016268:	e002      	b.n	8016270 <_printf_i+0x1c4>
 801626a:	0668      	lsls	r0, r5, #25
 801626c:	d5fb      	bpl.n	8016266 <_printf_i+0x1ba>
 801626e:	8019      	strh	r1, [r3, #0]
 8016270:	2300      	movs	r3, #0
 8016272:	6123      	str	r3, [r4, #16]
 8016274:	4616      	mov	r6, r2
 8016276:	e7bc      	b.n	80161f2 <_printf_i+0x146>
 8016278:	6833      	ldr	r3, [r6, #0]
 801627a:	1d1a      	adds	r2, r3, #4
 801627c:	6032      	str	r2, [r6, #0]
 801627e:	681e      	ldr	r6, [r3, #0]
 8016280:	6862      	ldr	r2, [r4, #4]
 8016282:	2100      	movs	r1, #0
 8016284:	4630      	mov	r0, r6
 8016286:	f7e9 ffcb 	bl	8000220 <memchr>
 801628a:	b108      	cbz	r0, 8016290 <_printf_i+0x1e4>
 801628c:	1b80      	subs	r0, r0, r6
 801628e:	6060      	str	r0, [r4, #4]
 8016290:	6863      	ldr	r3, [r4, #4]
 8016292:	6123      	str	r3, [r4, #16]
 8016294:	2300      	movs	r3, #0
 8016296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801629a:	e7aa      	b.n	80161f2 <_printf_i+0x146>
 801629c:	6923      	ldr	r3, [r4, #16]
 801629e:	4632      	mov	r2, r6
 80162a0:	4649      	mov	r1, r9
 80162a2:	4640      	mov	r0, r8
 80162a4:	47d0      	blx	sl
 80162a6:	3001      	adds	r0, #1
 80162a8:	d0ad      	beq.n	8016206 <_printf_i+0x15a>
 80162aa:	6823      	ldr	r3, [r4, #0]
 80162ac:	079b      	lsls	r3, r3, #30
 80162ae:	d413      	bmi.n	80162d8 <_printf_i+0x22c>
 80162b0:	68e0      	ldr	r0, [r4, #12]
 80162b2:	9b03      	ldr	r3, [sp, #12]
 80162b4:	4298      	cmp	r0, r3
 80162b6:	bfb8      	it	lt
 80162b8:	4618      	movlt	r0, r3
 80162ba:	e7a6      	b.n	801620a <_printf_i+0x15e>
 80162bc:	2301      	movs	r3, #1
 80162be:	4632      	mov	r2, r6
 80162c0:	4649      	mov	r1, r9
 80162c2:	4640      	mov	r0, r8
 80162c4:	47d0      	blx	sl
 80162c6:	3001      	adds	r0, #1
 80162c8:	d09d      	beq.n	8016206 <_printf_i+0x15a>
 80162ca:	3501      	adds	r5, #1
 80162cc:	68e3      	ldr	r3, [r4, #12]
 80162ce:	9903      	ldr	r1, [sp, #12]
 80162d0:	1a5b      	subs	r3, r3, r1
 80162d2:	42ab      	cmp	r3, r5
 80162d4:	dcf2      	bgt.n	80162bc <_printf_i+0x210>
 80162d6:	e7eb      	b.n	80162b0 <_printf_i+0x204>
 80162d8:	2500      	movs	r5, #0
 80162da:	f104 0619 	add.w	r6, r4, #25
 80162de:	e7f5      	b.n	80162cc <_printf_i+0x220>
 80162e0:	0801a480 	.word	0x0801a480
 80162e4:	0801a491 	.word	0x0801a491

080162e8 <__sflush_r>:
 80162e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80162ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162f0:	0716      	lsls	r6, r2, #28
 80162f2:	4605      	mov	r5, r0
 80162f4:	460c      	mov	r4, r1
 80162f6:	d454      	bmi.n	80163a2 <__sflush_r+0xba>
 80162f8:	684b      	ldr	r3, [r1, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	dc02      	bgt.n	8016304 <__sflush_r+0x1c>
 80162fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016300:	2b00      	cmp	r3, #0
 8016302:	dd48      	ble.n	8016396 <__sflush_r+0xae>
 8016304:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016306:	2e00      	cmp	r6, #0
 8016308:	d045      	beq.n	8016396 <__sflush_r+0xae>
 801630a:	2300      	movs	r3, #0
 801630c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016310:	682f      	ldr	r7, [r5, #0]
 8016312:	6a21      	ldr	r1, [r4, #32]
 8016314:	602b      	str	r3, [r5, #0]
 8016316:	d030      	beq.n	801637a <__sflush_r+0x92>
 8016318:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801631a:	89a3      	ldrh	r3, [r4, #12]
 801631c:	0759      	lsls	r1, r3, #29
 801631e:	d505      	bpl.n	801632c <__sflush_r+0x44>
 8016320:	6863      	ldr	r3, [r4, #4]
 8016322:	1ad2      	subs	r2, r2, r3
 8016324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016326:	b10b      	cbz	r3, 801632c <__sflush_r+0x44>
 8016328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801632a:	1ad2      	subs	r2, r2, r3
 801632c:	2300      	movs	r3, #0
 801632e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016330:	6a21      	ldr	r1, [r4, #32]
 8016332:	4628      	mov	r0, r5
 8016334:	47b0      	blx	r6
 8016336:	1c43      	adds	r3, r0, #1
 8016338:	89a3      	ldrh	r3, [r4, #12]
 801633a:	d106      	bne.n	801634a <__sflush_r+0x62>
 801633c:	6829      	ldr	r1, [r5, #0]
 801633e:	291d      	cmp	r1, #29
 8016340:	d82b      	bhi.n	801639a <__sflush_r+0xb2>
 8016342:	4a2a      	ldr	r2, [pc, #168]	@ (80163ec <__sflush_r+0x104>)
 8016344:	40ca      	lsrs	r2, r1
 8016346:	07d6      	lsls	r6, r2, #31
 8016348:	d527      	bpl.n	801639a <__sflush_r+0xb2>
 801634a:	2200      	movs	r2, #0
 801634c:	6062      	str	r2, [r4, #4]
 801634e:	04d9      	lsls	r1, r3, #19
 8016350:	6922      	ldr	r2, [r4, #16]
 8016352:	6022      	str	r2, [r4, #0]
 8016354:	d504      	bpl.n	8016360 <__sflush_r+0x78>
 8016356:	1c42      	adds	r2, r0, #1
 8016358:	d101      	bne.n	801635e <__sflush_r+0x76>
 801635a:	682b      	ldr	r3, [r5, #0]
 801635c:	b903      	cbnz	r3, 8016360 <__sflush_r+0x78>
 801635e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016362:	602f      	str	r7, [r5, #0]
 8016364:	b1b9      	cbz	r1, 8016396 <__sflush_r+0xae>
 8016366:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801636a:	4299      	cmp	r1, r3
 801636c:	d002      	beq.n	8016374 <__sflush_r+0x8c>
 801636e:	4628      	mov	r0, r5
 8016370:	f7ff fa94 	bl	801589c <_free_r>
 8016374:	2300      	movs	r3, #0
 8016376:	6363      	str	r3, [r4, #52]	@ 0x34
 8016378:	e00d      	b.n	8016396 <__sflush_r+0xae>
 801637a:	2301      	movs	r3, #1
 801637c:	4628      	mov	r0, r5
 801637e:	47b0      	blx	r6
 8016380:	4602      	mov	r2, r0
 8016382:	1c50      	adds	r0, r2, #1
 8016384:	d1c9      	bne.n	801631a <__sflush_r+0x32>
 8016386:	682b      	ldr	r3, [r5, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d0c6      	beq.n	801631a <__sflush_r+0x32>
 801638c:	2b1d      	cmp	r3, #29
 801638e:	d001      	beq.n	8016394 <__sflush_r+0xac>
 8016390:	2b16      	cmp	r3, #22
 8016392:	d11e      	bne.n	80163d2 <__sflush_r+0xea>
 8016394:	602f      	str	r7, [r5, #0]
 8016396:	2000      	movs	r0, #0
 8016398:	e022      	b.n	80163e0 <__sflush_r+0xf8>
 801639a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801639e:	b21b      	sxth	r3, r3
 80163a0:	e01b      	b.n	80163da <__sflush_r+0xf2>
 80163a2:	690f      	ldr	r7, [r1, #16]
 80163a4:	2f00      	cmp	r7, #0
 80163a6:	d0f6      	beq.n	8016396 <__sflush_r+0xae>
 80163a8:	0793      	lsls	r3, r2, #30
 80163aa:	680e      	ldr	r6, [r1, #0]
 80163ac:	bf08      	it	eq
 80163ae:	694b      	ldreq	r3, [r1, #20]
 80163b0:	600f      	str	r7, [r1, #0]
 80163b2:	bf18      	it	ne
 80163b4:	2300      	movne	r3, #0
 80163b6:	eba6 0807 	sub.w	r8, r6, r7
 80163ba:	608b      	str	r3, [r1, #8]
 80163bc:	f1b8 0f00 	cmp.w	r8, #0
 80163c0:	dde9      	ble.n	8016396 <__sflush_r+0xae>
 80163c2:	6a21      	ldr	r1, [r4, #32]
 80163c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80163c6:	4643      	mov	r3, r8
 80163c8:	463a      	mov	r2, r7
 80163ca:	4628      	mov	r0, r5
 80163cc:	47b0      	blx	r6
 80163ce:	2800      	cmp	r0, #0
 80163d0:	dc08      	bgt.n	80163e4 <__sflush_r+0xfc>
 80163d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163da:	81a3      	strh	r3, [r4, #12]
 80163dc:	f04f 30ff 	mov.w	r0, #4294967295
 80163e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163e4:	4407      	add	r7, r0
 80163e6:	eba8 0800 	sub.w	r8, r8, r0
 80163ea:	e7e7      	b.n	80163bc <__sflush_r+0xd4>
 80163ec:	20400001 	.word	0x20400001

080163f0 <_fflush_r>:
 80163f0:	b538      	push	{r3, r4, r5, lr}
 80163f2:	690b      	ldr	r3, [r1, #16]
 80163f4:	4605      	mov	r5, r0
 80163f6:	460c      	mov	r4, r1
 80163f8:	b913      	cbnz	r3, 8016400 <_fflush_r+0x10>
 80163fa:	2500      	movs	r5, #0
 80163fc:	4628      	mov	r0, r5
 80163fe:	bd38      	pop	{r3, r4, r5, pc}
 8016400:	b118      	cbz	r0, 801640a <_fflush_r+0x1a>
 8016402:	6a03      	ldr	r3, [r0, #32]
 8016404:	b90b      	cbnz	r3, 801640a <_fflush_r+0x1a>
 8016406:	f7fe ff3d 	bl	8015284 <__sinit>
 801640a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d0f3      	beq.n	80163fa <_fflush_r+0xa>
 8016412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016414:	07d0      	lsls	r0, r2, #31
 8016416:	d404      	bmi.n	8016422 <_fflush_r+0x32>
 8016418:	0599      	lsls	r1, r3, #22
 801641a:	d402      	bmi.n	8016422 <_fflush_r+0x32>
 801641c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801641e:	f7ff fa06 	bl	801582e <__retarget_lock_acquire_recursive>
 8016422:	4628      	mov	r0, r5
 8016424:	4621      	mov	r1, r4
 8016426:	f7ff ff5f 	bl	80162e8 <__sflush_r>
 801642a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801642c:	07da      	lsls	r2, r3, #31
 801642e:	4605      	mov	r5, r0
 8016430:	d4e4      	bmi.n	80163fc <_fflush_r+0xc>
 8016432:	89a3      	ldrh	r3, [r4, #12]
 8016434:	059b      	lsls	r3, r3, #22
 8016436:	d4e1      	bmi.n	80163fc <_fflush_r+0xc>
 8016438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801643a:	f7ff f9f9 	bl	8015830 <__retarget_lock_release_recursive>
 801643e:	e7dd      	b.n	80163fc <_fflush_r+0xc>

08016440 <fiprintf>:
 8016440:	b40e      	push	{r1, r2, r3}
 8016442:	b503      	push	{r0, r1, lr}
 8016444:	4601      	mov	r1, r0
 8016446:	ab03      	add	r3, sp, #12
 8016448:	4805      	ldr	r0, [pc, #20]	@ (8016460 <fiprintf+0x20>)
 801644a:	f853 2b04 	ldr.w	r2, [r3], #4
 801644e:	6800      	ldr	r0, [r0, #0]
 8016450:	9301      	str	r3, [sp, #4]
 8016452:	f7ff fca5 	bl	8015da0 <_vfiprintf_r>
 8016456:	b002      	add	sp, #8
 8016458:	f85d eb04 	ldr.w	lr, [sp], #4
 801645c:	b003      	add	sp, #12
 801645e:	4770      	bx	lr
 8016460:	20000064 	.word	0x20000064

08016464 <__swhatbuf_r>:
 8016464:	b570      	push	{r4, r5, r6, lr}
 8016466:	460c      	mov	r4, r1
 8016468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801646c:	2900      	cmp	r1, #0
 801646e:	b096      	sub	sp, #88	@ 0x58
 8016470:	4615      	mov	r5, r2
 8016472:	461e      	mov	r6, r3
 8016474:	da0d      	bge.n	8016492 <__swhatbuf_r+0x2e>
 8016476:	89a3      	ldrh	r3, [r4, #12]
 8016478:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801647c:	f04f 0100 	mov.w	r1, #0
 8016480:	bf14      	ite	ne
 8016482:	2340      	movne	r3, #64	@ 0x40
 8016484:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016488:	2000      	movs	r0, #0
 801648a:	6031      	str	r1, [r6, #0]
 801648c:	602b      	str	r3, [r5, #0]
 801648e:	b016      	add	sp, #88	@ 0x58
 8016490:	bd70      	pop	{r4, r5, r6, pc}
 8016492:	466a      	mov	r2, sp
 8016494:	f000 f848 	bl	8016528 <_fstat_r>
 8016498:	2800      	cmp	r0, #0
 801649a:	dbec      	blt.n	8016476 <__swhatbuf_r+0x12>
 801649c:	9901      	ldr	r1, [sp, #4]
 801649e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80164a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80164a6:	4259      	negs	r1, r3
 80164a8:	4159      	adcs	r1, r3
 80164aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80164ae:	e7eb      	b.n	8016488 <__swhatbuf_r+0x24>

080164b0 <__smakebuf_r>:
 80164b0:	898b      	ldrh	r3, [r1, #12]
 80164b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164b4:	079d      	lsls	r5, r3, #30
 80164b6:	4606      	mov	r6, r0
 80164b8:	460c      	mov	r4, r1
 80164ba:	d507      	bpl.n	80164cc <__smakebuf_r+0x1c>
 80164bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80164c0:	6023      	str	r3, [r4, #0]
 80164c2:	6123      	str	r3, [r4, #16]
 80164c4:	2301      	movs	r3, #1
 80164c6:	6163      	str	r3, [r4, #20]
 80164c8:	b003      	add	sp, #12
 80164ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164cc:	ab01      	add	r3, sp, #4
 80164ce:	466a      	mov	r2, sp
 80164d0:	f7ff ffc8 	bl	8016464 <__swhatbuf_r>
 80164d4:	9f00      	ldr	r7, [sp, #0]
 80164d6:	4605      	mov	r5, r0
 80164d8:	4639      	mov	r1, r7
 80164da:	4630      	mov	r0, r6
 80164dc:	f7ff fa52 	bl	8015984 <_malloc_r>
 80164e0:	b948      	cbnz	r0, 80164f6 <__smakebuf_r+0x46>
 80164e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164e6:	059a      	lsls	r2, r3, #22
 80164e8:	d4ee      	bmi.n	80164c8 <__smakebuf_r+0x18>
 80164ea:	f023 0303 	bic.w	r3, r3, #3
 80164ee:	f043 0302 	orr.w	r3, r3, #2
 80164f2:	81a3      	strh	r3, [r4, #12]
 80164f4:	e7e2      	b.n	80164bc <__smakebuf_r+0xc>
 80164f6:	89a3      	ldrh	r3, [r4, #12]
 80164f8:	6020      	str	r0, [r4, #0]
 80164fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80164fe:	81a3      	strh	r3, [r4, #12]
 8016500:	9b01      	ldr	r3, [sp, #4]
 8016502:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016506:	b15b      	cbz	r3, 8016520 <__smakebuf_r+0x70>
 8016508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801650c:	4630      	mov	r0, r6
 801650e:	f000 f81d 	bl	801654c <_isatty_r>
 8016512:	b128      	cbz	r0, 8016520 <__smakebuf_r+0x70>
 8016514:	89a3      	ldrh	r3, [r4, #12]
 8016516:	f023 0303 	bic.w	r3, r3, #3
 801651a:	f043 0301 	orr.w	r3, r3, #1
 801651e:	81a3      	strh	r3, [r4, #12]
 8016520:	89a3      	ldrh	r3, [r4, #12]
 8016522:	431d      	orrs	r5, r3
 8016524:	81a5      	strh	r5, [r4, #12]
 8016526:	e7cf      	b.n	80164c8 <__smakebuf_r+0x18>

08016528 <_fstat_r>:
 8016528:	b538      	push	{r3, r4, r5, lr}
 801652a:	4d07      	ldr	r5, [pc, #28]	@ (8016548 <_fstat_r+0x20>)
 801652c:	2300      	movs	r3, #0
 801652e:	4604      	mov	r4, r0
 8016530:	4608      	mov	r0, r1
 8016532:	4611      	mov	r1, r2
 8016534:	602b      	str	r3, [r5, #0]
 8016536:	f7eb fb1f 	bl	8001b78 <_fstat>
 801653a:	1c43      	adds	r3, r0, #1
 801653c:	d102      	bne.n	8016544 <_fstat_r+0x1c>
 801653e:	682b      	ldr	r3, [r5, #0]
 8016540:	b103      	cbz	r3, 8016544 <_fstat_r+0x1c>
 8016542:	6023      	str	r3, [r4, #0]
 8016544:	bd38      	pop	{r3, r4, r5, pc}
 8016546:	bf00      	nop
 8016548:	20017450 	.word	0x20017450

0801654c <_isatty_r>:
 801654c:	b538      	push	{r3, r4, r5, lr}
 801654e:	4d06      	ldr	r5, [pc, #24]	@ (8016568 <_isatty_r+0x1c>)
 8016550:	2300      	movs	r3, #0
 8016552:	4604      	mov	r4, r0
 8016554:	4608      	mov	r0, r1
 8016556:	602b      	str	r3, [r5, #0]
 8016558:	f7eb fb1e 	bl	8001b98 <_isatty>
 801655c:	1c43      	adds	r3, r0, #1
 801655e:	d102      	bne.n	8016566 <_isatty_r+0x1a>
 8016560:	682b      	ldr	r3, [r5, #0]
 8016562:	b103      	cbz	r3, 8016566 <_isatty_r+0x1a>
 8016564:	6023      	str	r3, [r4, #0]
 8016566:	bd38      	pop	{r3, r4, r5, pc}
 8016568:	20017450 	.word	0x20017450

0801656c <_sbrk_r>:
 801656c:	b538      	push	{r3, r4, r5, lr}
 801656e:	4d06      	ldr	r5, [pc, #24]	@ (8016588 <_sbrk_r+0x1c>)
 8016570:	2300      	movs	r3, #0
 8016572:	4604      	mov	r4, r0
 8016574:	4608      	mov	r0, r1
 8016576:	602b      	str	r3, [r5, #0]
 8016578:	f7eb fb26 	bl	8001bc8 <_sbrk>
 801657c:	1c43      	adds	r3, r0, #1
 801657e:	d102      	bne.n	8016586 <_sbrk_r+0x1a>
 8016580:	682b      	ldr	r3, [r5, #0]
 8016582:	b103      	cbz	r3, 8016586 <_sbrk_r+0x1a>
 8016584:	6023      	str	r3, [r4, #0]
 8016586:	bd38      	pop	{r3, r4, r5, pc}
 8016588:	20017450 	.word	0x20017450

0801658c <abort>:
 801658c:	b508      	push	{r3, lr}
 801658e:	2006      	movs	r0, #6
 8016590:	f000 f85a 	bl	8016648 <raise>
 8016594:	2001      	movs	r0, #1
 8016596:	f7eb fa9f 	bl	8001ad8 <_exit>

0801659a <_realloc_r>:
 801659a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801659e:	4607      	mov	r7, r0
 80165a0:	4614      	mov	r4, r2
 80165a2:	460d      	mov	r5, r1
 80165a4:	b921      	cbnz	r1, 80165b0 <_realloc_r+0x16>
 80165a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165aa:	4611      	mov	r1, r2
 80165ac:	f7ff b9ea 	b.w	8015984 <_malloc_r>
 80165b0:	b92a      	cbnz	r2, 80165be <_realloc_r+0x24>
 80165b2:	f7ff f973 	bl	801589c <_free_r>
 80165b6:	4625      	mov	r5, r4
 80165b8:	4628      	mov	r0, r5
 80165ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165be:	f000 f85f 	bl	8016680 <_malloc_usable_size_r>
 80165c2:	4284      	cmp	r4, r0
 80165c4:	4606      	mov	r6, r0
 80165c6:	d802      	bhi.n	80165ce <_realloc_r+0x34>
 80165c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80165cc:	d8f4      	bhi.n	80165b8 <_realloc_r+0x1e>
 80165ce:	4621      	mov	r1, r4
 80165d0:	4638      	mov	r0, r7
 80165d2:	f7ff f9d7 	bl	8015984 <_malloc_r>
 80165d6:	4680      	mov	r8, r0
 80165d8:	b908      	cbnz	r0, 80165de <_realloc_r+0x44>
 80165da:	4645      	mov	r5, r8
 80165dc:	e7ec      	b.n	80165b8 <_realloc_r+0x1e>
 80165de:	42b4      	cmp	r4, r6
 80165e0:	4622      	mov	r2, r4
 80165e2:	4629      	mov	r1, r5
 80165e4:	bf28      	it	cs
 80165e6:	4632      	movcs	r2, r6
 80165e8:	f7ff f92b 	bl	8015842 <memcpy>
 80165ec:	4629      	mov	r1, r5
 80165ee:	4638      	mov	r0, r7
 80165f0:	f7ff f954 	bl	801589c <_free_r>
 80165f4:	e7f1      	b.n	80165da <_realloc_r+0x40>

080165f6 <_raise_r>:
 80165f6:	291f      	cmp	r1, #31
 80165f8:	b538      	push	{r3, r4, r5, lr}
 80165fa:	4605      	mov	r5, r0
 80165fc:	460c      	mov	r4, r1
 80165fe:	d904      	bls.n	801660a <_raise_r+0x14>
 8016600:	2316      	movs	r3, #22
 8016602:	6003      	str	r3, [r0, #0]
 8016604:	f04f 30ff 	mov.w	r0, #4294967295
 8016608:	bd38      	pop	{r3, r4, r5, pc}
 801660a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801660c:	b112      	cbz	r2, 8016614 <_raise_r+0x1e>
 801660e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016612:	b94b      	cbnz	r3, 8016628 <_raise_r+0x32>
 8016614:	4628      	mov	r0, r5
 8016616:	f000 f831 	bl	801667c <_getpid_r>
 801661a:	4622      	mov	r2, r4
 801661c:	4601      	mov	r1, r0
 801661e:	4628      	mov	r0, r5
 8016620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016624:	f000 b818 	b.w	8016658 <_kill_r>
 8016628:	2b01      	cmp	r3, #1
 801662a:	d00a      	beq.n	8016642 <_raise_r+0x4c>
 801662c:	1c59      	adds	r1, r3, #1
 801662e:	d103      	bne.n	8016638 <_raise_r+0x42>
 8016630:	2316      	movs	r3, #22
 8016632:	6003      	str	r3, [r0, #0]
 8016634:	2001      	movs	r0, #1
 8016636:	e7e7      	b.n	8016608 <_raise_r+0x12>
 8016638:	2100      	movs	r1, #0
 801663a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801663e:	4620      	mov	r0, r4
 8016640:	4798      	blx	r3
 8016642:	2000      	movs	r0, #0
 8016644:	e7e0      	b.n	8016608 <_raise_r+0x12>
	...

08016648 <raise>:
 8016648:	4b02      	ldr	r3, [pc, #8]	@ (8016654 <raise+0xc>)
 801664a:	4601      	mov	r1, r0
 801664c:	6818      	ldr	r0, [r3, #0]
 801664e:	f7ff bfd2 	b.w	80165f6 <_raise_r>
 8016652:	bf00      	nop
 8016654:	20000064 	.word	0x20000064

08016658 <_kill_r>:
 8016658:	b538      	push	{r3, r4, r5, lr}
 801665a:	4d07      	ldr	r5, [pc, #28]	@ (8016678 <_kill_r+0x20>)
 801665c:	2300      	movs	r3, #0
 801665e:	4604      	mov	r4, r0
 8016660:	4608      	mov	r0, r1
 8016662:	4611      	mov	r1, r2
 8016664:	602b      	str	r3, [r5, #0]
 8016666:	f7eb fa25 	bl	8001ab4 <_kill>
 801666a:	1c43      	adds	r3, r0, #1
 801666c:	d102      	bne.n	8016674 <_kill_r+0x1c>
 801666e:	682b      	ldr	r3, [r5, #0]
 8016670:	b103      	cbz	r3, 8016674 <_kill_r+0x1c>
 8016672:	6023      	str	r3, [r4, #0]
 8016674:	bd38      	pop	{r3, r4, r5, pc}
 8016676:	bf00      	nop
 8016678:	20017450 	.word	0x20017450

0801667c <_getpid_r>:
 801667c:	f7eb ba12 	b.w	8001aa4 <_getpid>

08016680 <_malloc_usable_size_r>:
 8016680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016684:	1f18      	subs	r0, r3, #4
 8016686:	2b00      	cmp	r3, #0
 8016688:	bfbc      	itt	lt
 801668a:	580b      	ldrlt	r3, [r1, r0]
 801668c:	18c0      	addlt	r0, r0, r3
 801668e:	4770      	bx	lr

08016690 <_init>:
 8016690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016692:	bf00      	nop
 8016694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016696:	bc08      	pop	{r3}
 8016698:	469e      	mov	lr, r3
 801669a:	4770      	bx	lr

0801669c <_fini>:
 801669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801669e:	bf00      	nop
 80166a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166a2:	bc08      	pop	{r3}
 80166a4:	469e      	mov	lr, r3
 80166a6:	4770      	bx	lr
